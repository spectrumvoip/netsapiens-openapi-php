<?php
/**
 * CreateResellerRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * CreateResellerRequest Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateResellerRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateReseller_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'reseller' => 'string',
        'description' => 'string',
        'domains_total' => 'int',
        'users_total' => 'int',
        'email_send_smtp_hostname' => 'string',
        'email_send_smtp_port' => 'int',
        'email_send_smtp_username' => 'string',
        'smtp_pwd' => 'string',
        'active_calls_against_license_count' => 'int',
        'active_calls_offnet_current' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'reseller' => null,
        'description' => null,
        'domains_total' => null,
        'users_total' => null,
        'email_send_smtp_hostname' => 'hostname',
        'email_send_smtp_port' => null,
        'email_send_smtp_username' => null,
        'smtp_pwd' => 'pas',
        'active_calls_against_license_count' => null,
        'active_calls_offnet_current' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'reseller' => false,
        'description' => false,
        'domains_total' => false,
        'users_total' => false,
        'email_send_smtp_hostname' => false,
        'email_send_smtp_port' => true,
        'email_send_smtp_username' => false,
        'smtp_pwd' => false,
        'active_calls_against_license_count' => false,
        'active_calls_offnet_current' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reseller' => 'reseller',
        'description' => 'description',
        'domains_total' => 'domains-total',
        'users_total' => 'users-total',
        'email_send_smtp_hostname' => 'email-send-smtp-hostname',
        'email_send_smtp_port' => 'email-send-smtp-port',
        'email_send_smtp_username' => 'email-send-smtp-username',
        'smtp_pwd' => 'smtp_pwd',
        'active_calls_against_license_count' => 'active-calls-against-license-count',
        'active_calls_offnet_current' => 'active-calls-offnet-current'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reseller' => 'setReseller',
        'description' => 'setDescription',
        'domains_total' => 'setDomainsTotal',
        'users_total' => 'setUsersTotal',
        'email_send_smtp_hostname' => 'setEmailSendSmtpHostname',
        'email_send_smtp_port' => 'setEmailSendSmtpPort',
        'email_send_smtp_username' => 'setEmailSendSmtpUsername',
        'smtp_pwd' => 'setSmtpPwd',
        'active_calls_against_license_count' => 'setActiveCallsAgainstLicenseCount',
        'active_calls_offnet_current' => 'setActiveCallsOffnetCurrent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reseller' => 'getReseller',
        'description' => 'getDescription',
        'domains_total' => 'getDomainsTotal',
        'users_total' => 'getUsersTotal',
        'email_send_smtp_hostname' => 'getEmailSendSmtpHostname',
        'email_send_smtp_port' => 'getEmailSendSmtpPort',
        'email_send_smtp_username' => 'getEmailSendSmtpUsername',
        'smtp_pwd' => 'getSmtpPwd',
        'active_calls_against_license_count' => 'getActiveCallsAgainstLicenseCount',
        'active_calls_offnet_current' => 'getActiveCallsOffnetCurrent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('reseller', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('domains_total', $data ?? [], null);
        $this->setIfExists('users_total', $data ?? [], null);
        $this->setIfExists('email_send_smtp_hostname', $data ?? [], null);
        $this->setIfExists('email_send_smtp_port', $data ?? [], null);
        $this->setIfExists('email_send_smtp_username', $data ?? [], null);
        $this->setIfExists('smtp_pwd', $data ?? [], null);
        $this->setIfExists('active_calls_against_license_count', $data ?? [], null);
        $this->setIfExists('active_calls_offnet_current', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['reseller'] === null) {
            $invalidProperties[] = "'reseller' can't be null";
        }
        if (!preg_match("/^[A-Za-z0-9 -_]+/", $this->container['reseller'])) {
            $invalidProperties[] = "invalid value for 'reseller', must be conform to the pattern /^[A-Za-z0-9 -_]+/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reseller
     *
     * @return string
     */
    public function getReseller()
    {
        return $this->container['reseller'];
    }

    /**
     * Sets reseller
     *
     * @param string $reseller The name of the Reseller. This is the main ID for the group which will be used to link domains for ownership.
     *
     * @return self
     */
    public function setReseller($reseller)
    {
        if (is_null($reseller)) {
            throw new \InvalidArgumentException('non-nullable reseller cannot be null');
        }

        if ((!preg_match("/^[A-Za-z0-9 -_]+/", ObjectSerializer::toString($reseller)))) {
            throw new \InvalidArgumentException("invalid value for \$reseller when calling CreateResellerRequest., must conform to the pattern /^[A-Za-z0-9 -_]+/.");
        }

        $this->container['reseller'] = $reseller;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description This description can be used to give a more complete description and notes for this reseller.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets domains_total
     *
     * @return int|null
     */
    public function getDomainsTotal()
    {
        return $this->container['domains_total'];
    }

    /**
     * Sets domains_total
     *
     * @param int|null $domains_total This is the total number of domains in this Reseller's account.
     *
     * @return self
     */
    public function setDomainsTotal($domains_total)
    {
        if (is_null($domains_total)) {
            throw new \InvalidArgumentException('non-nullable domains_total cannot be null');
        }
        $this->container['domains_total'] = $domains_total;

        return $this;
    }

    /**
     * Gets users_total
     *
     * @return int|null
     */
    public function getUsersTotal()
    {
        return $this->container['users_total'];
    }

    /**
     * Sets users_total
     *
     * @param int|null $users_total This is the total number of users in all domains owned by this reseller.
     *
     * @return self
     */
    public function setUsersTotal($users_total)
    {
        if (is_null($users_total)) {
            throw new \InvalidArgumentException('non-nullable users_total cannot be null');
        }
        $this->container['users_total'] = $users_total;

        return $this;
    }

    /**
     * Gets email_send_smtp_hostname
     *
     * @return string|null
     */
    public function getEmailSendSmtpHostname()
    {
        return $this->container['email_send_smtp_hostname'];
    }

    /**
     * Sets email_send_smtp_hostname
     *
     * @param string|null $email_send_smtp_hostname This is the SMTP server hostname
     *
     * @return self
     */
    public function setEmailSendSmtpHostname($email_send_smtp_hostname)
    {
        if (is_null($email_send_smtp_hostname)) {
            throw new \InvalidArgumentException('non-nullable email_send_smtp_hostname cannot be null');
        }
        $this->container['email_send_smtp_hostname'] = $email_send_smtp_hostname;

        return $this;
    }

    /**
     * Gets email_send_smtp_port
     *
     * @return int|null
     */
    public function getEmailSendSmtpPort()
    {
        return $this->container['email_send_smtp_port'];
    }

    /**
     * Sets email_send_smtp_port
     *
     * @param int|null $email_send_smtp_port This is the SMTP port for sending emails.
     *
     * @return self
     */
    public function setEmailSendSmtpPort($email_send_smtp_port)
    {
        if (is_null($email_send_smtp_port)) {
            array_push($this->openAPINullablesSetToNull, 'email_send_smtp_port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_send_smtp_port', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_send_smtp_port'] = $email_send_smtp_port;

        return $this;
    }

    /**
     * Gets email_send_smtp_username
     *
     * @return string|null
     */
    public function getEmailSendSmtpUsername()
    {
        return $this->container['email_send_smtp_username'];
    }

    /**
     * Sets email_send_smtp_username
     *
     * @param string|null $email_send_smtp_username This is the username used in connecting to SMTP  server for sending email.
     *
     * @return self
     */
    public function setEmailSendSmtpUsername($email_send_smtp_username)
    {
        if (is_null($email_send_smtp_username)) {
            throw new \InvalidArgumentException('non-nullable email_send_smtp_username cannot be null');
        }
        $this->container['email_send_smtp_username'] = $email_send_smtp_username;

        return $this;
    }

    /**
     * Gets smtp_pwd
     *
     * @return string|null
     */
    public function getSmtpPwd()
    {
        return $this->container['smtp_pwd'];
    }

    /**
     * Sets smtp_pwd
     *
     * @param string|null $smtp_pwd This is the password used in connecting to SMTP  server for sending email.
     *
     * @return self
     */
    public function setSmtpPwd($smtp_pwd)
    {
        if (is_null($smtp_pwd)) {
            throw new \InvalidArgumentException('non-nullable smtp_pwd cannot be null');
        }
        $this->container['smtp_pwd'] = $smtp_pwd;

        return $this;
    }

    /**
     * Gets active_calls_against_license_count
     *
     * @return int|null
     */
    public function getActiveCallsAgainstLicenseCount()
    {
        return $this->container['active_calls_against_license_count'];
    }

    /**
     * Sets active_calls_against_license_count
     *
     * @param int|null $active_calls_against_license_count This is the current active calls counting against the license including on net calls.
     *
     * @return self
     */
    public function setActiveCallsAgainstLicenseCount($active_calls_against_license_count)
    {
        if (is_null($active_calls_against_license_count)) {
            throw new \InvalidArgumentException('non-nullable active_calls_against_license_count cannot be null');
        }
        $this->container['active_calls_against_license_count'] = $active_calls_against_license_count;

        return $this;
    }

    /**
     * Gets active_calls_offnet_current
     *
     * @return int|null
     */
    public function getActiveCallsOffnetCurrent()
    {
        return $this->container['active_calls_offnet_current'];
    }

    /**
     * Sets active_calls_offnet_current
     *
     * @param int|null $active_calls_offnet_current This is the current active calls across all domains that are calls coming from or going to offnet numbers.
     *
     * @return self
     */
    public function setActiveCallsOffnetCurrent($active_calls_offnet_current)
    {
        if (is_null($active_calls_offnet_current)) {
            throw new \InvalidArgumentException('non-nullable active_calls_offnet_current cannot be null');
        }
        $this->container['active_calls_offnet_current'] = $active_calls_offnet_current;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


