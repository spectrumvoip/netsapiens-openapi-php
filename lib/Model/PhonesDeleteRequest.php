<?php
/**
 * PhonesDeleteRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * PhonesDeleteRequest Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PhonesDeleteRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_phones_delete_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mac' => 'string',
        'device_provisioning_username' => 'string',
        'device_provisioning_password' => 'string',
        'device_provisioning_last_retrieved_datetime' => '\DateTime',
        'global_one_time_pass' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mac' => null,
        'device_provisioning_username' => null,
        'device_provisioning_password' => null,
        'device_provisioning_last_retrieved_datetime' => 'date',
        'global_one_time_pass' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'mac' => false,
        'device_provisioning_username' => false,
        'device_provisioning_password' => false,
        'device_provisioning_last_retrieved_datetime' => false,
        'global_one_time_pass' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mac' => 'mac',
        'device_provisioning_username' => 'device-provisioning-username',
        'device_provisioning_password' => 'device-provisioning-password',
        'device_provisioning_last_retrieved_datetime' => 'device-provisioning-last-retrieved-datetime',
        'global_one_time_pass' => 'global-one-time-pass'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mac' => 'setMac',
        'device_provisioning_username' => 'setDeviceProvisioningUsername',
        'device_provisioning_password' => 'setDeviceProvisioningPassword',
        'device_provisioning_last_retrieved_datetime' => 'setDeviceProvisioningLastRetrievedDatetime',
        'global_one_time_pass' => 'setGlobalOneTimePass'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mac' => 'getMac',
        'device_provisioning_username' => 'getDeviceProvisioningUsername',
        'device_provisioning_password' => 'getDeviceProvisioningPassword',
        'device_provisioning_last_retrieved_datetime' => 'getDeviceProvisioningLastRetrievedDatetime',
        'global_one_time_pass' => 'getGlobalOneTimePass'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('mac', $data ?? [], null);
        $this->setIfExists('device_provisioning_username', $data ?? [], null);
        $this->setIfExists('device_provisioning_password', $data ?? [], null);
        $this->setIfExists('device_provisioning_last_retrieved_datetime', $data ?? [], null);
        $this->setIfExists('global_one_time_pass', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['mac'] === null) {
            $invalidProperties[] = "'mac' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mac
     *
     * @return string
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string $mac mac
     *
     * @return self
     */
    public function setMac($mac)
    {
        if (is_null($mac)) {
            throw new \InvalidArgumentException('non-nullable mac cannot be null');
        }
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets device_provisioning_username
     *
     * @return string|null
     */
    public function getDeviceProvisioningUsername()
    {
        return $this->container['device_provisioning_username'];
    }

    /**
     * Sets device_provisioning_username
     *
     * @param string|null $device_provisioning_username This is the per device provisioning username used for accessing the config file.
     *
     * @return self
     */
    public function setDeviceProvisioningUsername($device_provisioning_username)
    {
        if (is_null($device_provisioning_username)) {
            throw new \InvalidArgumentException('non-nullable device_provisioning_username cannot be null');
        }
        $this->container['device_provisioning_username'] = $device_provisioning_username;

        return $this;
    }

    /**
     * Gets device_provisioning_password
     *
     * @return string|null
     */
    public function getDeviceProvisioningPassword()
    {
        return $this->container['device_provisioning_password'];
    }

    /**
     * Sets device_provisioning_password
     *
     * @param string|null $device_provisioning_password This is the per device provisioning password used for accessing the config file.
     *
     * @return self
     */
    public function setDeviceProvisioningPassword($device_provisioning_password)
    {
        if (is_null($device_provisioning_password)) {
            throw new \InvalidArgumentException('non-nullable device_provisioning_password cannot be null');
        }
        $this->container['device_provisioning_password'] = $device_provisioning_password;

        return $this;
    }

    /**
     * Gets device_provisioning_last_retrieved_datetime
     *
     * @return \DateTime|null
     */
    public function getDeviceProvisioningLastRetrievedDatetime()
    {
        return $this->container['device_provisioning_last_retrieved_datetime'];
    }

    /**
     * Sets device_provisioning_last_retrieved_datetime
     *
     * @param \DateTime|null $device_provisioning_last_retrieved_datetime device_provisioning_last_retrieved_datetime
     *
     * @return self
     */
    public function setDeviceProvisioningLastRetrievedDatetime($device_provisioning_last_retrieved_datetime)
    {
        if (is_null($device_provisioning_last_retrieved_datetime)) {
            throw new \InvalidArgumentException('non-nullable device_provisioning_last_retrieved_datetime cannot be null');
        }
        $this->container['device_provisioning_last_retrieved_datetime'] = $device_provisioning_last_retrieved_datetime;

        return $this;
    }

    /**
     * Gets global_one_time_pass
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getGlobalOneTimePass()
    {
        return $this->container['global_one_time_pass'];
    }

    /**
     * Sets global_one_time_pass
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $global_one_time_pass This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setGlobalOneTimePass($global_one_time_pass)
    {
        if (is_null($global_one_time_pass)) {
            throw new \InvalidArgumentException('non-nullable global_one_time_pass cannot be null');
        }
        $this->container['global_one_time_pass'] = $global_one_time_pass;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


