<?php
/**
 * DomainLegacy
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * DomainLegacy Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomainLegacy implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DomainLegacy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'domain' => 'string',
        'territory' => 'string',
        'description' => 'string',
        'moh' => 'string',
        'mor' => 'string',
        'rmoh' => 'string',
        'resi' => 'string',
        'sso' => 'string',
        'call_limit' => 'int',
        'call_limit_ext' => 'int',
        'sub_limit' => 'int',
        'max_call_queue' => 'int',
        'max_aa' => 'int',
        'max_conference' => 'int',
        'max_department' => 'int',
        'max_user' => 'int',
        'max_device' => 'int',
        'time_zone' => 'string',
        'dial_plan' => 'string',
        'dial_policy' => 'string',
        'policies' => 'string',
        'email_sender' => 'string',
        'smtp_host' => 'string',
        'smtp_port' => 'string',
        'smtp_uid' => 'string',
        'smtp_pwd' => 'string',
        'from_user' => 'string',
        'from_host' => 'string',
        'active_call' => 'int',
        'count_for_limit' => 'int',
        'count_external' => 'int',
        'sub_count' => 'int',
        'max_site' => 'int',
        'max_fax' => 'int',
        'address_id' => 'string',
        'vmail_provisioned' => 'string',
        'callid_nmbr' => 'int',
        'callid_name' => 'string',
        'callid_emgr' => 'int',
        'area_code' => 'int',
        'vmail_transcribe' => 'string',
        'language' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'domain' => null,
        'territory' => null,
        'description' => null,
        'moh' => null,
        'mor' => null,
        'rmoh' => null,
        'resi' => null,
        'sso' => null,
        'call_limit' => null,
        'call_limit_ext' => null,
        'sub_limit' => null,
        'max_call_queue' => null,
        'max_aa' => null,
        'max_conference' => null,
        'max_department' => null,
        'max_user' => null,
        'max_device' => null,
        'time_zone' => null,
        'dial_plan' => null,
        'dial_policy' => null,
        'policies' => null,
        'email_sender' => 'email',
        'smtp_host' => 'hostname',
        'smtp_port' => null,
        'smtp_uid' => null,
        'smtp_pwd' => null,
        'from_user' => null,
        'from_host' => null,
        'active_call' => null,
        'count_for_limit' => null,
        'count_external' => null,
        'sub_count' => null,
        'max_site' => null,
        'max_fax' => null,
        'address_id' => null,
        'vmail_provisioned' => null,
        'callid_nmbr' => null,
        'callid_name' => null,
        'callid_emgr' => null,
        'area_code' => null,
        'vmail_transcribe' => null,
        'language' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'domain' => false,
        'territory' => false,
        'description' => false,
        'moh' => false,
        'mor' => false,
        'rmoh' => false,
        'resi' => false,
        'sso' => false,
        'call_limit' => false,
        'call_limit_ext' => false,
        'sub_limit' => false,
        'max_call_queue' => false,
        'max_aa' => false,
        'max_conference' => false,
        'max_department' => false,
        'max_user' => false,
        'max_device' => false,
        'time_zone' => false,
        'dial_plan' => false,
        'dial_policy' => false,
        'policies' => false,
        'email_sender' => false,
        'smtp_host' => false,
        'smtp_port' => false,
        'smtp_uid' => false,
        'smtp_pwd' => false,
        'from_user' => false,
        'from_host' => false,
        'active_call' => false,
        'count_for_limit' => false,
        'count_external' => false,
        'sub_count' => false,
        'max_site' => false,
        'max_fax' => false,
        'address_id' => false,
        'vmail_provisioned' => false,
        'callid_nmbr' => false,
        'callid_name' => false,
        'callid_emgr' => false,
        'area_code' => false,
        'vmail_transcribe' => false,
        'language' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
        'territory' => 'territory',
        'description' => 'description',
        'moh' => 'moh',
        'mor' => 'mor',
        'rmoh' => 'rmoh',
        'resi' => 'resi',
        'sso' => 'sso',
        'call_limit' => 'call_limit',
        'call_limit_ext' => 'call_limit_ext',
        'sub_limit' => 'sub_limit',
        'max_call_queue' => 'max_call_queue',
        'max_aa' => 'max_aa',
        'max_conference' => 'max_conference',
        'max_department' => 'max_department',
        'max_user' => 'max_user',
        'max_device' => 'max_device',
        'time_zone' => 'time_zone',
        'dial_plan' => 'dial_plan',
        'dial_policy' => 'dial_policy',
        'policies' => 'policies',
        'email_sender' => 'email_sender',
        'smtp_host' => 'smtp_host',
        'smtp_port' => 'smtp_port',
        'smtp_uid' => 'smtp_uid',
        'smtp_pwd' => 'smtp_pwd',
        'from_user' => 'from_user',
        'from_host' => 'from_host',
        'active_call' => 'active_call',
        'count_for_limit' => 'countForLimit',
        'count_external' => 'countExternal',
        'sub_count' => 'sub_count',
        'max_site' => 'max_site',
        'max_fax' => 'max_fax',
        'address_id' => 'address_id',
        'vmail_provisioned' => 'vmail_provisioned',
        'callid_nmbr' => 'callid_nmbr',
        'callid_name' => 'callid_name',
        'callid_emgr' => 'callid_emgr',
        'area_code' => 'area_code',
        'vmail_transcribe' => 'vmail_transcribe',
        'language' => 'language'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'territory' => 'setTerritory',
        'description' => 'setDescription',
        'moh' => 'setMoh',
        'mor' => 'setMor',
        'rmoh' => 'setRmoh',
        'resi' => 'setResi',
        'sso' => 'setSso',
        'call_limit' => 'setCallLimit',
        'call_limit_ext' => 'setCallLimitExt',
        'sub_limit' => 'setSubLimit',
        'max_call_queue' => 'setMaxCallQueue',
        'max_aa' => 'setMaxAa',
        'max_conference' => 'setMaxConference',
        'max_department' => 'setMaxDepartment',
        'max_user' => 'setMaxUser',
        'max_device' => 'setMaxDevice',
        'time_zone' => 'setTimeZone',
        'dial_plan' => 'setDialPlan',
        'dial_policy' => 'setDialPolicy',
        'policies' => 'setPolicies',
        'email_sender' => 'setEmailSender',
        'smtp_host' => 'setSmtpHost',
        'smtp_port' => 'setSmtpPort',
        'smtp_uid' => 'setSmtpUid',
        'smtp_pwd' => 'setSmtpPwd',
        'from_user' => 'setFromUser',
        'from_host' => 'setFromHost',
        'active_call' => 'setActiveCall',
        'count_for_limit' => 'setCountForLimit',
        'count_external' => 'setCountExternal',
        'sub_count' => 'setSubCount',
        'max_site' => 'setMaxSite',
        'max_fax' => 'setMaxFax',
        'address_id' => 'setAddressId',
        'vmail_provisioned' => 'setVmailProvisioned',
        'callid_nmbr' => 'setCallidNmbr',
        'callid_name' => 'setCallidName',
        'callid_emgr' => 'setCallidEmgr',
        'area_code' => 'setAreaCode',
        'vmail_transcribe' => 'setVmailTranscribe',
        'language' => 'setLanguage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'territory' => 'getTerritory',
        'description' => 'getDescription',
        'moh' => 'getMoh',
        'mor' => 'getMor',
        'rmoh' => 'getRmoh',
        'resi' => 'getResi',
        'sso' => 'getSso',
        'call_limit' => 'getCallLimit',
        'call_limit_ext' => 'getCallLimitExt',
        'sub_limit' => 'getSubLimit',
        'max_call_queue' => 'getMaxCallQueue',
        'max_aa' => 'getMaxAa',
        'max_conference' => 'getMaxConference',
        'max_department' => 'getMaxDepartment',
        'max_user' => 'getMaxUser',
        'max_device' => 'getMaxDevice',
        'time_zone' => 'getTimeZone',
        'dial_plan' => 'getDialPlan',
        'dial_policy' => 'getDialPolicy',
        'policies' => 'getPolicies',
        'email_sender' => 'getEmailSender',
        'smtp_host' => 'getSmtpHost',
        'smtp_port' => 'getSmtpPort',
        'smtp_uid' => 'getSmtpUid',
        'smtp_pwd' => 'getSmtpPwd',
        'from_user' => 'getFromUser',
        'from_host' => 'getFromHost',
        'active_call' => 'getActiveCall',
        'count_for_limit' => 'getCountForLimit',
        'count_external' => 'getCountExternal',
        'sub_count' => 'getSubCount',
        'max_site' => 'getMaxSite',
        'max_fax' => 'getMaxFax',
        'address_id' => 'getAddressId',
        'vmail_provisioned' => 'getVmailProvisioned',
        'callid_nmbr' => 'getCallidNmbr',
        'callid_name' => 'getCallidName',
        'callid_emgr' => 'getCallidEmgr',
        'area_code' => 'getAreaCode',
        'vmail_transcribe' => 'getVmailTranscribe',
        'language' => 'getLanguage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MOH_YES = 'yes';
    public const MOH_NO = 'no';
    public const MOR_YES = 'yes';
    public const MOR_NO = 'no';
    public const RMOH_YES = 'yes';
    public const RMOH_NO = 'no';
    public const RESI_YES = 'yes';
    public const RESI_NO = 'no';
    public const RESI_HOSPI = 'hospi';
    public const SSO_YES = 'yes';
    public const SSO_NO = 'no';
    public const TIME_ZONE_US_ALASKA = 'US/Alaska';
    public const TIME_ZONE_US_CENTRAL = 'US/Central';
    public const TIME_ZONE_US_EASTERN = 'US/Eastern';
    public const TIME_ZONE_US_HAWAII = 'US/Hawaii';
    public const TIME_ZONE_US_MOUNTAIN = 'US/Mountain';
    public const TIME_ZONE_US_PACIFIC = 'US/Pacific';
    public const TIME_ZONE_AFRICA_ADDIS_ABABA = 'Africa/Addis_Ababa';
    public const TIME_ZONE_AFRICA_ALGIERS = 'Africa/Algiers';
    public const TIME_ZONE_AFRICA_BRAZZAVILLE = 'Africa/Brazzaville';
    public const TIME_ZONE_AFRICA_CAIRO = 'Africa/Cairo';
    public const TIME_ZONE_AFRICA_CASABLANCA = 'Africa/Casablanca';
    public const TIME_ZONE_AFRICA_DAKAR = 'Africa/Dakar';
    public const TIME_ZONE_AFRICA_DAR_ES_SALAAM = 'Africa/Dar_es_Salaam';
    public const TIME_ZONE_AFRICA_DJIBOUTI = 'Africa/Djibouti';
    public const TIME_ZONE_AFRICA_JOHANNESBURG = 'Africa/Johannesburg';
    public const TIME_ZONE_AFRICA_KHARTOUM = 'Africa/Khartoum';
    public const TIME_ZONE_AFRICA_KIGALI = 'Africa/Kigali';
    public const TIME_ZONE_AFRICA_KINSHASA = 'Africa/Kinshasa';
    public const TIME_ZONE_AFRICA_LAGOS = 'Africa/Lagos';
    public const TIME_ZONE_AFRICA_NAIROBI = 'Africa/Nairobi';
    public const TIME_ZONE_AFRICA_TIMBUKTU = 'Africa/Timbuktu';
    public const TIME_ZONE_AFRICA_TRIPOLI = 'Africa/Tripoli';
    public const TIME_ZONE_AFRICA_TUNIS = 'Africa/Tunis';
    public const TIME_ZONE_AMERICA_ANTIGUA = 'America/Antigua';
    public const TIME_ZONE_AMERICA_ARUBA = 'America/Aruba';
    public const TIME_ZONE_AMERICA_BELIZE = 'America/Belize';
    public const TIME_ZONE_AMERICA_BOGOTA = 'America/Bogota';
    public const TIME_ZONE_AMERICA_BUENOS_AIRES = 'America/Buenos_Aires';
    public const TIME_ZONE_AMERICA_CANCUN = 'America/Cancun';
    public const TIME_ZONE_AMERICA_CARACAS = 'America/Caracas';
    public const TIME_ZONE_AMERICA_CAYMAN = 'America/Cayman';
    public const TIME_ZONE_AMERICA_CHIHUAHUA = 'America/Chihuahua';
    public const TIME_ZONE_AMERICA_COSTA_RICA = 'America/Costa_Rica';
    public const TIME_ZONE_AMERICA_DENVER = 'America/Denver';
    public const TIME_ZONE_AMERICA_DETROIT = 'America/Detroit';
    public const TIME_ZONE_AMERICA_EDMONTON = 'America/Edmonton';
    public const TIME_ZONE_AMERICA_EL_SALVADOR = 'America/El_Salvador';
    public const TIME_ZONE_AMERICA_ENSENADA = 'America/Ensenada';
    public const TIME_ZONE_AMERICA_GRENADA = 'America/Grenada';
    public const TIME_ZONE_AMERICA_GUADELOUPE = 'America/Guadeloupe';
    public const TIME_ZONE_AMERICA_GUATEMALA = 'America/Guatemala';
    public const TIME_ZONE_AMERICA_HAVANA = 'America/Havana';
    public const TIME_ZONE_AMERICA_INDIANAPOLIS = 'America/Indianapolis';
    public const TIME_ZONE_AMERICA_JAMAICA = 'America/Jamaica';
    public const TIME_ZONE_AMERICA_JUNEAU = 'America/Juneau';
    public const TIME_ZONE_AMERICA_LA_PAZ = 'America/La_Paz';
    public const TIME_ZONE_AMERICA_LIMA = 'America/Lima';
    public const TIME_ZONE_AMERICA_LOS_ANGELES = 'America/Los_Angeles';
    public const TIME_ZONE_AMERICA_LOUISVILLE = 'America/Louisville';
    public const TIME_ZONE_AMERICA_MARTINIQUE = 'America/Martinique';
    public const TIME_ZONE_AMERICA_MAZATLAN = 'America/Mazatlan';
    public const TIME_ZONE_AMERICA_MENDOZA = 'America/Mendoza';
    public const TIME_ZONE_AMERICA_MENOMINEE = 'America/Menominee';
    public const TIME_ZONE_AMERICA_MERIDA = 'America/Merida';
    public const TIME_ZONE_AMERICA_MEXICO_CITY = 'America/Mexico_City';
    public const TIME_ZONE_AMERICA_MIQUELON = 'America/Miquelon';
    public const TIME_ZONE_AMERICA_MONCTON = 'America/Moncton';
    public const TIME_ZONE_AMERICA_MONTERREY = 'America/Monterrey';
    public const TIME_ZONE_AMERICA_MONTEVIDEO = 'America/Montevideo';
    public const TIME_ZONE_AMERICA_MONTREAL = 'America/Montreal';
    public const TIME_ZONE_AMERICA_MONTSERRAT = 'America/Montserrat';
    public const TIME_ZONE_AMERICA_NASSAU = 'America/Nassau';
    public const TIME_ZONE_AMERICA_NEW_YORK = 'America/New_York';
    public const TIME_ZONE_AMERICA_PANAMA = 'America/Panama';
    public const TIME_ZONE_AMERICA_PHOENIX = 'America/Phoenix';
    public const TIME_ZONE_AMERICA_PORT_AU_PRINCE = 'America/Port-au-Prince';
    public const TIME_ZONE_AMERICA_PORT_OF_SPAIN = 'America/Port_of_Spain';
    public const TIME_ZONE_AMERICA_REGINA = 'America/Regina';
    public const TIME_ZONE_AMERICA_SANTIAGO = 'America/Santiago';
    public const TIME_ZONE_AMERICA_SANTO_DOMINGO = 'America/Santo_Domingo';
    public const TIME_ZONE_AMERICA_SAO_PAULO = 'America/Sao_Paulo';
    public const TIME_ZONE_AMERICA_THULE = 'America/Thule';
    public const TIME_ZONE_AMERICA_THUNDER_BAY = 'America/Thunder_Bay';
    public const TIME_ZONE_AMERICA_TIJUANA = 'America/Tijuana';
    public const TIME_ZONE_AMERICA_TORONTO = 'America/Toronto';
    public const TIME_ZONE_AMERICA_VANCOUVER = 'America/Vancouver';
    public const TIME_ZONE_AMERICA_WINNIPEG = 'America/Winnipeg';
    public const TIME_ZONE_AMERICA_YELLOWKNIFE = 'America/Yellowknife';
    public const TIME_ZONE_ANTARCTICA_SOUTH_POLE = 'Antarctica/South_Pole';
    public const TIME_ZONE_ARCTIC_LONGYEARBYEN = 'Arctic/Longyearbyen';
    public const TIME_ZONE_ASIA_AMMAN = 'Asia/Amman';
    public const TIME_ZONE_ASIA_BAGHDAD = 'Asia/Baghdad';
    public const TIME_ZONE_ASIA_BAHRAIN = 'Asia/Bahrain';
    public const TIME_ZONE_ASIA_BANGKOK = 'Asia/Bangkok';
    public const TIME_ZONE_ASIA_BEIRUT = 'Asia/Beirut';
    public const TIME_ZONE_ASIA_BRUNEI = 'Asia/Brunei';
    public const TIME_ZONE_ASIA_CALCUTTA = 'Asia/Calcutta';
    public const TIME_ZONE_ASIA_COLOMBO = 'Asia/Colombo';
    public const TIME_ZONE_ASIA_DACCA = 'Asia/Dacca';
    public const TIME_ZONE_ASIA_DAMASCUS = 'Asia/Damascus';
    public const TIME_ZONE_ASIA_DHAKA = 'Asia/Dhaka';
    public const TIME_ZONE_ASIA_DUBAI = 'Asia/Dubai';
    public const TIME_ZONE_ASIA_GAZA = 'Asia/Gaza';
    public const TIME_ZONE_ASIA_HONG_KONG = 'Asia/Hong_Kong';
    public const TIME_ZONE_ASIA_ISTANBUL = 'Asia/Istanbul';
    public const TIME_ZONE_ASIA_JAKARTA = 'Asia/Jakarta';
    public const TIME_ZONE_ASIA_JERUSALEM = 'Asia/Jerusalem';
    public const TIME_ZONE_ASIA_KABUL = 'Asia/Kabul';
    public const TIME_ZONE_ASIA_KATMANDU = 'Asia/Katmandu';
    public const TIME_ZONE_ASIA_KUALA_LUMPUR = 'Asia/Kuala_Lumpur';
    public const TIME_ZONE_ASIA_KUCHING = 'Asia/Kuching';
    public const TIME_ZONE_ASIA_KUWAIT = 'Asia/Kuwait';
    public const TIME_ZONE_ASIA_MACAU = 'Asia/Macau';
    public const TIME_ZONE_ASIA_MANILA = 'Asia/Manila';
    public const TIME_ZONE_ASIA_MUSCAT = 'Asia/Muscat';
    public const TIME_ZONE_ASIA_PHNOM_PENH = 'Asia/Phnom_Penh';
    public const TIME_ZONE_ASIA_RANGOON = 'Asia/Rangoon';
    public const TIME_ZONE_ASIA_RIYADH = 'Asia/Riyadh';
    public const TIME_ZONE_ASIA_SAIGON = 'Asia/Saigon';
    public const TIME_ZONE_ASIA_SEOUL = 'Asia/Seoul';
    public const TIME_ZONE_ASIA_SHANGHAI = 'Asia/Shanghai';
    public const TIME_ZONE_ASIA_SINGAPORE = 'Asia/Singapore';
    public const TIME_ZONE_ASIA_TAIPEI = 'Asia/Taipei';
    public const TIME_ZONE_ASIA_TEHRAN = 'Asia/Tehran';
    public const TIME_ZONE_ASIA_TEL_AVIV = 'Asia/Tel_Aviv';
    public const TIME_ZONE_ASIA_THIMPHU = 'Asia/Thimphu';
    public const TIME_ZONE_ASIA_TOKYO = 'Asia/Tokyo';
    public const TIME_ZONE_ASIA_ULAN_BATOR = 'Asia/Ulan_Bator';
    public const TIME_ZONE_ASIA_VIENTIANE = 'Asia/Vientiane';
    public const TIME_ZONE_ASIA_VLADIVOSTOK = 'Asia/Vladivostok';
    public const TIME_ZONE_ATLANTIC_AZORES = 'Atlantic/Azores';
    public const TIME_ZONE_ATLANTIC_BERMUDA = 'Atlantic/Bermuda';
    public const TIME_ZONE_ATLANTIC_CANARY = 'Atlantic/Canary';
    public const TIME_ZONE_ATLANTIC_CAPE_VERDE = 'Atlantic/Cape_Verde';
    public const TIME_ZONE_ATLANTIC_FAEROE = 'Atlantic/Faeroe';
    public const TIME_ZONE_ATLANTIC_REYKJAVIK = 'Atlantic/Reykjavik';
    public const TIME_ZONE_AUSTRALIA_ACT = 'Australia/ACT';
    public const TIME_ZONE_AUSTRALIA_ADELAIDE = 'Australia/Adelaide';
    public const TIME_ZONE_AUSTRALIA_BRISBANE = 'Australia/Brisbane';
    public const TIME_ZONE_AUSTRALIA_CANBERRA = 'Australia/Canberra';
    public const TIME_ZONE_AUSTRALIA_DARWIN = 'Australia/Darwin';
    public const TIME_ZONE_AUSTRALIA_LHI = 'Australia/LHI';
    public const TIME_ZONE_AUSTRALIA_MELBOURNE = 'Australia/Melbourne';
    public const TIME_ZONE_AUSTRALIA_NORTH = 'Australia/North';
    public const TIME_ZONE_AUSTRALIA_NSW = 'Australia/NSW';
    public const TIME_ZONE_AUSTRALIA_PERTH = 'Australia/Perth';
    public const TIME_ZONE_AUSTRALIA_QUEENSLAND = 'Australia/Queensland';
    public const TIME_ZONE_AUSTRALIA_SOUTH = 'Australia/South';
    public const TIME_ZONE_AUSTRALIA_SYDNEY = 'Australia/Sydney';
    public const TIME_ZONE_AUSTRALIA_TASMANIA = 'Australia/Tasmania';
    public const TIME_ZONE_AUSTRALIA_VICTORIA = 'Australia/Victoria';
    public const TIME_ZONE_AUSTRALIA_WEST = 'Australia/West';
    public const TIME_ZONE_CANADA_ATLANTIC = 'Canada/Atlantic';
    public const TIME_ZONE_CANADA_CENTRAL = 'Canada/Central';
    public const TIME_ZONE_CANADA_EASTERN = 'Canada/Eastern';
    public const TIME_ZONE_CANADA_MOUNTAIN = 'Canada/Mountain';
    public const TIME_ZONE_CANADA_NEWFOUNDLAND = 'Canada/Newfoundland';
    public const TIME_ZONE_CANADA_PACIFIC = 'Canada/Pacific';
    public const TIME_ZONE_CANADA_SASKATCHEWAN = 'Canada/Saskatchewan';
    public const TIME_ZONE_CANADA_YUKON = 'Canada/Yukon';
    public const TIME_ZONE_CUBA = 'Cuba';
    public const TIME_ZONE_ETC_GMT = 'Etc/GMT';
    public const TIME_ZONE_ETC_GMT1 = 'Etc/GMT+1';
    public const TIME_ZONE_ETC_GMT10 = 'Etc/GMT+10';
    public const TIME_ZONE_ETC_GMT11 = 'Etc/GMT+11';
    public const TIME_ZONE_ETC_GMT12 = 'Etc/GMT+12';
    public const TIME_ZONE_ETC_GMT2 = 'Etc/GMT+2';
    public const TIME_ZONE_ETC_GMT3 = 'Etc/GMT+3';
    public const TIME_ZONE_ETC_GMT4 = 'Etc/GMT+4';
    public const TIME_ZONE_ETC_GMT5 = 'Etc/GMT+5';
    public const TIME_ZONE_ETC_GMT6 = 'Etc/GMT+6';
    public const TIME_ZONE_ETC_GMT7 = 'Etc/GMT+7';
    public const TIME_ZONE_ETC_GMT8 = 'Etc/GMT+8';
    public const TIME_ZONE_ETC_GMT9 = 'Etc/GMT+9';
    public const TIME_ZONE_ETC_GMT_1 = 'Etc/GMT-1';
    public const TIME_ZONE_ETC_GMT_10 = 'Etc/GMT-10';
    public const TIME_ZONE_ETC_GMT_11 = 'Etc/GMT-11';
    public const TIME_ZONE_ETC_GMT_12 = 'Etc/GMT-12';
    public const TIME_ZONE_ETC_GMT_13 = 'Etc/GMT-13';
    public const TIME_ZONE_ETC_GMT_14 = 'Etc/GMT-14';
    public const TIME_ZONE_ETC_GMT_2 = 'Etc/GMT-2';
    public const TIME_ZONE_ETC_GMT_3 = 'Etc/GMT-3';
    public const TIME_ZONE_ETC_GMT_4 = 'Etc/GMT-4';
    public const TIME_ZONE_ETC_GMT_5 = 'Etc/GMT-5';
    public const TIME_ZONE_ETC_GMT_6 = 'Etc/GMT-6';
    public const TIME_ZONE_ETC_GMT_7 = 'Etc/GMT-7';
    public const TIME_ZONE_ETC_GMT_8 = 'Etc/GMT-8';
    public const TIME_ZONE_ETC_GMT_9 = 'Etc/GMT-9';
    public const TIME_ZONE_ETC_GREENWICH = 'Etc/Greenwich';
    public const TIME_ZONE_EUROPE_AMSTERDAM = 'Europe/Amsterdam';
    public const TIME_ZONE_EUROPE_ATHENS = 'Europe/Athens';
    public const TIME_ZONE_EUROPE_BELFAST = 'Europe/Belfast';
    public const TIME_ZONE_EUROPE_BELGRADE = 'Europe/Belgrade';
    public const TIME_ZONE_EUROPE_BERLIN = 'Europe/Berlin';
    public const TIME_ZONE_EUROPE_BRUSSELS = 'Europe/Brussels';
    public const TIME_ZONE_EUROPE_BUCHAREST = 'Europe/Bucharest';
    public const TIME_ZONE_EUROPE_BUDAPEST = 'Europe/Budapest';
    public const TIME_ZONE_EUROPE_COPENHAGEN = 'Europe/Copenhagen';
    public const TIME_ZONE_EUROPE_DUBLIN = 'Europe/Dublin';
    public const TIME_ZONE_EUROPE_HELSINKI = 'Europe/Helsinki';
    public const TIME_ZONE_EUROPE_ISTANBUL = 'Europe/Istanbul';
    public const TIME_ZONE_EUROPE_KIEV = 'Europe/Kiev';
    public const TIME_ZONE_EUROPE_LISBON = 'Europe/Lisbon';
    public const TIME_ZONE_EUROPE_LJUBLJANA = 'Europe/Ljubljana';
    public const TIME_ZONE_EUROPE_LONDON = 'Europe/London';
    public const TIME_ZONE_EUROPE_MADRID = 'Europe/Madrid';
    public const TIME_ZONE_EUROPE_MALTA = 'Europe/Malta';
    public const TIME_ZONE_EUROPE_MONACO = 'Europe/Monaco';
    public const TIME_ZONE_EUROPE_MOSCOW = 'Europe/Moscow';
    public const TIME_ZONE_EUROPE_OSLO = 'Europe/Oslo';
    public const TIME_ZONE_EUROPE_PARIS = 'Europe/Paris';
    public const TIME_ZONE_EUROPE_PRAGUE = 'Europe/Prague';
    public const TIME_ZONE_EUROPE_ROME = 'Europe/Rome';
    public const TIME_ZONE_EUROPE_SOFIA = 'Europe/Sofia';
    public const TIME_ZONE_EUROPE_STOCKHOLM = 'Europe/Stockholm';
    public const TIME_ZONE_EUROPE_VIENNA = 'Europe/Vienna';
    public const TIME_ZONE_EUROPE_WARSAW = 'Europe/Warsaw';
    public const TIME_ZONE_EUROPE_ZURICH = 'Europe/Zurich';
    public const TIME_ZONE_GREENWICH = 'Greenwich';
    public const TIME_ZONE_PACIFIC_AUCKLAND = 'Pacific/Auckland';
    public const TIME_ZONE_PACIFIC_EASTER = 'Pacific/Easter';
    public const TIME_ZONE_PACIFIC_FIJI = 'Pacific/Fiji';
    public const TIME_ZONE_PACIFIC_GALAPAGOS = 'Pacific/Galapagos';
    public const TIME_ZONE_PACIFIC_GAMBIER = 'Pacific/Gambier';
    public const TIME_ZONE_PACIFIC_GUAM = 'Pacific/Guam';
    public const TIME_ZONE_PACIFIC_HONOLULU = 'Pacific/Honolulu';
    public const TIME_ZONE_PACIFIC_MARQUESAS = 'Pacific/Marquesas';
    public const TIME_ZONE_PACIFIC_MIDWAY = 'Pacific/Midway';
    public const TIME_ZONE_PACIFIC_PALAU = 'Pacific/Palau';
    public const TIME_ZONE_PACIFIC_RAROTONGA = 'Pacific/Rarotonga';
    public const TIME_ZONE_PACIFIC_TAHITI = 'Pacific/Tahiti';
    public const POLICIES_ACTIVE = 'active';
    public const POLICIES_LOCKED = 'locked';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMohAllowableValues()
    {
        return [
            self::MOH_YES,
            self::MOH_NO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMorAllowableValues()
    {
        return [
            self::MOR_YES,
            self::MOR_NO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRmohAllowableValues()
    {
        return [
            self::RMOH_YES,
            self::RMOH_NO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResiAllowableValues()
    {
        return [
            self::RESI_YES,
            self::RESI_NO,
            self::RESI_HOSPI,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSsoAllowableValues()
    {
        return [
            self::SSO_YES,
            self::SSO_NO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimeZoneAllowableValues()
    {
        return [
            self::TIME_ZONE_US_ALASKA,
            self::TIME_ZONE_US_CENTRAL,
            self::TIME_ZONE_US_EASTERN,
            self::TIME_ZONE_US_HAWAII,
            self::TIME_ZONE_US_MOUNTAIN,
            self::TIME_ZONE_US_PACIFIC,
            self::TIME_ZONE_AFRICA_ADDIS_ABABA,
            self::TIME_ZONE_AFRICA_ALGIERS,
            self::TIME_ZONE_AFRICA_BRAZZAVILLE,
            self::TIME_ZONE_AFRICA_CAIRO,
            self::TIME_ZONE_AFRICA_CASABLANCA,
            self::TIME_ZONE_AFRICA_DAKAR,
            self::TIME_ZONE_AFRICA_DAR_ES_SALAAM,
            self::TIME_ZONE_AFRICA_DJIBOUTI,
            self::TIME_ZONE_AFRICA_JOHANNESBURG,
            self::TIME_ZONE_AFRICA_KHARTOUM,
            self::TIME_ZONE_AFRICA_KIGALI,
            self::TIME_ZONE_AFRICA_KINSHASA,
            self::TIME_ZONE_AFRICA_LAGOS,
            self::TIME_ZONE_AFRICA_NAIROBI,
            self::TIME_ZONE_AFRICA_TIMBUKTU,
            self::TIME_ZONE_AFRICA_TRIPOLI,
            self::TIME_ZONE_AFRICA_TUNIS,
            self::TIME_ZONE_AMERICA_ANTIGUA,
            self::TIME_ZONE_AMERICA_ARUBA,
            self::TIME_ZONE_AMERICA_BELIZE,
            self::TIME_ZONE_AMERICA_BOGOTA,
            self::TIME_ZONE_AMERICA_BUENOS_AIRES,
            self::TIME_ZONE_AMERICA_CANCUN,
            self::TIME_ZONE_AMERICA_CARACAS,
            self::TIME_ZONE_AMERICA_CAYMAN,
            self::TIME_ZONE_AMERICA_CHIHUAHUA,
            self::TIME_ZONE_AMERICA_COSTA_RICA,
            self::TIME_ZONE_AMERICA_DENVER,
            self::TIME_ZONE_AMERICA_DETROIT,
            self::TIME_ZONE_AMERICA_EDMONTON,
            self::TIME_ZONE_AMERICA_EL_SALVADOR,
            self::TIME_ZONE_AMERICA_ENSENADA,
            self::TIME_ZONE_AMERICA_GRENADA,
            self::TIME_ZONE_AMERICA_GUADELOUPE,
            self::TIME_ZONE_AMERICA_GUATEMALA,
            self::TIME_ZONE_AMERICA_HAVANA,
            self::TIME_ZONE_AMERICA_INDIANAPOLIS,
            self::TIME_ZONE_AMERICA_JAMAICA,
            self::TIME_ZONE_AMERICA_JUNEAU,
            self::TIME_ZONE_AMERICA_LA_PAZ,
            self::TIME_ZONE_AMERICA_LIMA,
            self::TIME_ZONE_AMERICA_LOS_ANGELES,
            self::TIME_ZONE_AMERICA_LOUISVILLE,
            self::TIME_ZONE_AMERICA_MARTINIQUE,
            self::TIME_ZONE_AMERICA_MAZATLAN,
            self::TIME_ZONE_AMERICA_MENDOZA,
            self::TIME_ZONE_AMERICA_MENOMINEE,
            self::TIME_ZONE_AMERICA_MERIDA,
            self::TIME_ZONE_AMERICA_MEXICO_CITY,
            self::TIME_ZONE_AMERICA_MIQUELON,
            self::TIME_ZONE_AMERICA_MONCTON,
            self::TIME_ZONE_AMERICA_MONTERREY,
            self::TIME_ZONE_AMERICA_MONTEVIDEO,
            self::TIME_ZONE_AMERICA_MONTREAL,
            self::TIME_ZONE_AMERICA_MONTSERRAT,
            self::TIME_ZONE_AMERICA_NASSAU,
            self::TIME_ZONE_AMERICA_NEW_YORK,
            self::TIME_ZONE_AMERICA_PANAMA,
            self::TIME_ZONE_AMERICA_PHOENIX,
            self::TIME_ZONE_AMERICA_PORT_AU_PRINCE,
            self::TIME_ZONE_AMERICA_PORT_OF_SPAIN,
            self::TIME_ZONE_AMERICA_REGINA,
            self::TIME_ZONE_AMERICA_SANTIAGO,
            self::TIME_ZONE_AMERICA_SANTO_DOMINGO,
            self::TIME_ZONE_AMERICA_SAO_PAULO,
            self::TIME_ZONE_AMERICA_THULE,
            self::TIME_ZONE_AMERICA_THUNDER_BAY,
            self::TIME_ZONE_AMERICA_TIJUANA,
            self::TIME_ZONE_AMERICA_TORONTO,
            self::TIME_ZONE_AMERICA_VANCOUVER,
            self::TIME_ZONE_AMERICA_WINNIPEG,
            self::TIME_ZONE_AMERICA_YELLOWKNIFE,
            self::TIME_ZONE_ANTARCTICA_SOUTH_POLE,
            self::TIME_ZONE_ARCTIC_LONGYEARBYEN,
            self::TIME_ZONE_ASIA_AMMAN,
            self::TIME_ZONE_ASIA_BAGHDAD,
            self::TIME_ZONE_ASIA_BAHRAIN,
            self::TIME_ZONE_ASIA_BANGKOK,
            self::TIME_ZONE_ASIA_BEIRUT,
            self::TIME_ZONE_ASIA_BRUNEI,
            self::TIME_ZONE_ASIA_CALCUTTA,
            self::TIME_ZONE_ASIA_COLOMBO,
            self::TIME_ZONE_ASIA_DACCA,
            self::TIME_ZONE_ASIA_DAMASCUS,
            self::TIME_ZONE_ASIA_DHAKA,
            self::TIME_ZONE_ASIA_DUBAI,
            self::TIME_ZONE_ASIA_GAZA,
            self::TIME_ZONE_ASIA_HONG_KONG,
            self::TIME_ZONE_ASIA_ISTANBUL,
            self::TIME_ZONE_ASIA_JAKARTA,
            self::TIME_ZONE_ASIA_JERUSALEM,
            self::TIME_ZONE_ASIA_KABUL,
            self::TIME_ZONE_ASIA_KATMANDU,
            self::TIME_ZONE_ASIA_KUALA_LUMPUR,
            self::TIME_ZONE_ASIA_KUCHING,
            self::TIME_ZONE_ASIA_KUWAIT,
            self::TIME_ZONE_ASIA_MACAU,
            self::TIME_ZONE_ASIA_MANILA,
            self::TIME_ZONE_ASIA_MUSCAT,
            self::TIME_ZONE_ASIA_PHNOM_PENH,
            self::TIME_ZONE_ASIA_RANGOON,
            self::TIME_ZONE_ASIA_RIYADH,
            self::TIME_ZONE_ASIA_SAIGON,
            self::TIME_ZONE_ASIA_SEOUL,
            self::TIME_ZONE_ASIA_SHANGHAI,
            self::TIME_ZONE_ASIA_SINGAPORE,
            self::TIME_ZONE_ASIA_TAIPEI,
            self::TIME_ZONE_ASIA_TEHRAN,
            self::TIME_ZONE_ASIA_TEL_AVIV,
            self::TIME_ZONE_ASIA_THIMPHU,
            self::TIME_ZONE_ASIA_TOKYO,
            self::TIME_ZONE_ASIA_ULAN_BATOR,
            self::TIME_ZONE_ASIA_VIENTIANE,
            self::TIME_ZONE_ASIA_VLADIVOSTOK,
            self::TIME_ZONE_ATLANTIC_AZORES,
            self::TIME_ZONE_ATLANTIC_BERMUDA,
            self::TIME_ZONE_ATLANTIC_CANARY,
            self::TIME_ZONE_ATLANTIC_CAPE_VERDE,
            self::TIME_ZONE_ATLANTIC_FAEROE,
            self::TIME_ZONE_ATLANTIC_REYKJAVIK,
            self::TIME_ZONE_AUSTRALIA_ACT,
            self::TIME_ZONE_AUSTRALIA_ADELAIDE,
            self::TIME_ZONE_AUSTRALIA_BRISBANE,
            self::TIME_ZONE_AUSTRALIA_CANBERRA,
            self::TIME_ZONE_AUSTRALIA_DARWIN,
            self::TIME_ZONE_AUSTRALIA_LHI,
            self::TIME_ZONE_AUSTRALIA_MELBOURNE,
            self::TIME_ZONE_AUSTRALIA_NORTH,
            self::TIME_ZONE_AUSTRALIA_NSW,
            self::TIME_ZONE_AUSTRALIA_PERTH,
            self::TIME_ZONE_AUSTRALIA_QUEENSLAND,
            self::TIME_ZONE_AUSTRALIA_SOUTH,
            self::TIME_ZONE_AUSTRALIA_SYDNEY,
            self::TIME_ZONE_AUSTRALIA_TASMANIA,
            self::TIME_ZONE_AUSTRALIA_VICTORIA,
            self::TIME_ZONE_AUSTRALIA_WEST,
            self::TIME_ZONE_CANADA_ATLANTIC,
            self::TIME_ZONE_CANADA_CENTRAL,
            self::TIME_ZONE_CANADA_EASTERN,
            self::TIME_ZONE_CANADA_MOUNTAIN,
            self::TIME_ZONE_CANADA_NEWFOUNDLAND,
            self::TIME_ZONE_CANADA_PACIFIC,
            self::TIME_ZONE_CANADA_SASKATCHEWAN,
            self::TIME_ZONE_CANADA_YUKON,
            self::TIME_ZONE_CUBA,
            self::TIME_ZONE_ETC_GMT,
            self::TIME_ZONE_ETC_GMT1,
            self::TIME_ZONE_ETC_GMT10,
            self::TIME_ZONE_ETC_GMT11,
            self::TIME_ZONE_ETC_GMT12,
            self::TIME_ZONE_ETC_GMT2,
            self::TIME_ZONE_ETC_GMT3,
            self::TIME_ZONE_ETC_GMT4,
            self::TIME_ZONE_ETC_GMT5,
            self::TIME_ZONE_ETC_GMT6,
            self::TIME_ZONE_ETC_GMT7,
            self::TIME_ZONE_ETC_GMT8,
            self::TIME_ZONE_ETC_GMT9,
            self::TIME_ZONE_ETC_GMT_1,
            self::TIME_ZONE_ETC_GMT_10,
            self::TIME_ZONE_ETC_GMT_11,
            self::TIME_ZONE_ETC_GMT_12,
            self::TIME_ZONE_ETC_GMT_13,
            self::TIME_ZONE_ETC_GMT_14,
            self::TIME_ZONE_ETC_GMT_2,
            self::TIME_ZONE_ETC_GMT_3,
            self::TIME_ZONE_ETC_GMT_4,
            self::TIME_ZONE_ETC_GMT_5,
            self::TIME_ZONE_ETC_GMT_6,
            self::TIME_ZONE_ETC_GMT_7,
            self::TIME_ZONE_ETC_GMT_8,
            self::TIME_ZONE_ETC_GMT_9,
            self::TIME_ZONE_ETC_GREENWICH,
            self::TIME_ZONE_EUROPE_AMSTERDAM,
            self::TIME_ZONE_EUROPE_ATHENS,
            self::TIME_ZONE_EUROPE_BELFAST,
            self::TIME_ZONE_EUROPE_BELGRADE,
            self::TIME_ZONE_EUROPE_BERLIN,
            self::TIME_ZONE_EUROPE_BRUSSELS,
            self::TIME_ZONE_EUROPE_BUCHAREST,
            self::TIME_ZONE_EUROPE_BUDAPEST,
            self::TIME_ZONE_EUROPE_COPENHAGEN,
            self::TIME_ZONE_EUROPE_DUBLIN,
            self::TIME_ZONE_EUROPE_HELSINKI,
            self::TIME_ZONE_EUROPE_ISTANBUL,
            self::TIME_ZONE_EUROPE_KIEV,
            self::TIME_ZONE_EUROPE_LISBON,
            self::TIME_ZONE_EUROPE_LJUBLJANA,
            self::TIME_ZONE_EUROPE_LONDON,
            self::TIME_ZONE_EUROPE_MADRID,
            self::TIME_ZONE_EUROPE_MALTA,
            self::TIME_ZONE_EUROPE_MONACO,
            self::TIME_ZONE_EUROPE_MOSCOW,
            self::TIME_ZONE_EUROPE_OSLO,
            self::TIME_ZONE_EUROPE_PARIS,
            self::TIME_ZONE_EUROPE_PRAGUE,
            self::TIME_ZONE_EUROPE_ROME,
            self::TIME_ZONE_EUROPE_SOFIA,
            self::TIME_ZONE_EUROPE_STOCKHOLM,
            self::TIME_ZONE_EUROPE_VIENNA,
            self::TIME_ZONE_EUROPE_WARSAW,
            self::TIME_ZONE_EUROPE_ZURICH,
            self::TIME_ZONE_GREENWICH,
            self::TIME_ZONE_PACIFIC_AUCKLAND,
            self::TIME_ZONE_PACIFIC_EASTER,
            self::TIME_ZONE_PACIFIC_FIJI,
            self::TIME_ZONE_PACIFIC_GALAPAGOS,
            self::TIME_ZONE_PACIFIC_GAMBIER,
            self::TIME_ZONE_PACIFIC_GUAM,
            self::TIME_ZONE_PACIFIC_HONOLULU,
            self::TIME_ZONE_PACIFIC_MARQUESAS,
            self::TIME_ZONE_PACIFIC_MIDWAY,
            self::TIME_ZONE_PACIFIC_PALAU,
            self::TIME_ZONE_PACIFIC_RAROTONGA,
            self::TIME_ZONE_PACIFIC_TAHITI,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPoliciesAllowableValues()
    {
        return [
            self::POLICIES_ACTIVE,
            self::POLICIES_LOCKED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('territory', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('moh', $data ?? [], null);
        $this->setIfExists('mor', $data ?? [], null);
        $this->setIfExists('rmoh', $data ?? [], null);
        $this->setIfExists('resi', $data ?? [], 'no');
        $this->setIfExists('sso', $data ?? [], 'no');
        $this->setIfExists('call_limit', $data ?? [], null);
        $this->setIfExists('call_limit_ext', $data ?? [], null);
        $this->setIfExists('sub_limit', $data ?? [], null);
        $this->setIfExists('max_call_queue', $data ?? [], null);
        $this->setIfExists('max_aa', $data ?? [], null);
        $this->setIfExists('max_conference', $data ?? [], null);
        $this->setIfExists('max_department', $data ?? [], null);
        $this->setIfExists('max_user', $data ?? [], null);
        $this->setIfExists('max_device', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('dial_plan', $data ?? [], null);
        $this->setIfExists('dial_policy', $data ?? [], null);
        $this->setIfExists('policies', $data ?? [], null);
        $this->setIfExists('email_sender', $data ?? [], null);
        $this->setIfExists('smtp_host', $data ?? [], null);
        $this->setIfExists('smtp_port', $data ?? [], null);
        $this->setIfExists('smtp_uid', $data ?? [], null);
        $this->setIfExists('smtp_pwd', $data ?? [], null);
        $this->setIfExists('from_user', $data ?? [], '[*]');
        $this->setIfExists('from_host', $data ?? [], '[*]');
        $this->setIfExists('active_call', $data ?? [], null);
        $this->setIfExists('count_for_limit', $data ?? [], null);
        $this->setIfExists('count_external', $data ?? [], null);
        $this->setIfExists('sub_count', $data ?? [], null);
        $this->setIfExists('max_site', $data ?? [], null);
        $this->setIfExists('max_fax', $data ?? [], null);
        $this->setIfExists('address_id', $data ?? [], null);
        $this->setIfExists('vmail_provisioned', $data ?? [], null);
        $this->setIfExists('callid_nmbr', $data ?? [], null);
        $this->setIfExists('callid_name', $data ?? [], null);
        $this->setIfExists('callid_emgr', $data ?? [], null);
        $this->setIfExists('area_code', $data ?? [], null);
        $this->setIfExists('vmail_transcribe', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if (!preg_match("/^[A-Za-z0-9-_.]+/", $this->container['domain'])) {
            $invalidProperties[] = "invalid value for 'domain', must be conform to the pattern /^[A-Za-z0-9-_.]+/.";
        }

        if ($this->container['territory'] === null) {
            $invalidProperties[] = "'territory' can't be null";
        }
        if (!preg_match("/^[A-Za-z0-9-_.]+/", $this->container['territory'])) {
            $invalidProperties[] = "invalid value for 'territory', must be conform to the pattern /^[A-Za-z0-9-_.]+/.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        $allowedValues = $this->getMohAllowableValues();
        if (!is_null($this->container['moh']) && !in_array($this->container['moh'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'moh', must be one of '%s'",
                $this->container['moh'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMorAllowableValues();
        if (!is_null($this->container['mor']) && !in_array($this->container['mor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mor', must be one of '%s'",
                $this->container['mor'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRmohAllowableValues();
        if (!is_null($this->container['rmoh']) && !in_array($this->container['rmoh'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rmoh', must be one of '%s'",
                $this->container['rmoh'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResiAllowableValues();
        if (!is_null($this->container['resi']) && !in_array($this->container['resi'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'resi', must be one of '%s'",
                $this->container['resi'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSsoAllowableValues();
        if (!is_null($this->container['sso']) && !in_array($this->container['sso'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sso', must be one of '%s'",
                $this->container['sso'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['call_limit']) && ($this->container['call_limit'] > 5000)) {
            $invalidProperties[] = "invalid value for 'call_limit', must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['call_limit']) && ($this->container['call_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'call_limit', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['call_limit_ext']) && ($this->container['call_limit_ext'] > 5000)) {
            $invalidProperties[] = "invalid value for 'call_limit_ext', must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['call_limit_ext']) && ($this->container['call_limit_ext'] < 0)) {
            $invalidProperties[] = "invalid value for 'call_limit_ext', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sub_limit']) && ($this->container['sub_limit'] > 5000)) {
            $invalidProperties[] = "invalid value for 'sub_limit', must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['sub_limit']) && ($this->container['sub_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'sub_limit', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_call_queue']) && ($this->container['max_call_queue'] > 5000)) {
            $invalidProperties[] = "invalid value for 'max_call_queue', must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['max_call_queue']) && ($this->container['max_call_queue'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_call_queue', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_aa']) && ($this->container['max_aa'] > 1000)) {
            $invalidProperties[] = "invalid value for 'max_aa', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['max_aa']) && ($this->container['max_aa'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_aa', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_conference']) && ($this->container['max_conference'] > 1000)) {
            $invalidProperties[] = "invalid value for 'max_conference', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['max_conference']) && ($this->container['max_conference'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_conference', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_department']) && ($this->container['max_department'] > 1000)) {
            $invalidProperties[] = "invalid value for 'max_department', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['max_department']) && ($this->container['max_department'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_department', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_user']) && ($this->container['max_user'] > 1000)) {
            $invalidProperties[] = "invalid value for 'max_user', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['max_user']) && ($this->container['max_user'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_user', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_device']) && ($this->container['max_device'] > 1000)) {
            $invalidProperties[] = "invalid value for 'max_device', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['max_device']) && ($this->container['max_device'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_device', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getTimeZoneAllowableValues();
        if (!is_null($this->container['time_zone']) && !in_array($this->container['time_zone'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'time_zone', must be one of '%s'",
                $this->container['time_zone'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPoliciesAllowableValues();
        if (!is_null($this->container['policies']) && !in_array($this->container['policies'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'policies', must be one of '%s'",
                $this->container['policies'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain This is the main name of the domain. This name should be capable of being in SIP enpoints so no special characters or spaces
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }

        if ((!preg_match("/^[A-Za-z0-9-_.]+/", ObjectSerializer::toString($domain)))) {
            throw new \InvalidArgumentException("invalid value for \$domain when calling DomainLegacy., must conform to the pattern /^[A-Za-z0-9-_.]+/.");
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets territory
     *
     * @return string
     */
    public function getTerritory()
    {
        return $this->container['territory'];
    }

    /**
     * Sets territory
     *
     * @param string $territory This is the Reseller name field. All domain's should be limied to a reseller.
     *
     * @return self
     */
    public function setTerritory($territory)
    {
        if (is_null($territory)) {
            throw new \InvalidArgumentException('non-nullable territory cannot be null');
        }

        if ((!preg_match("/^[A-Za-z0-9-_.]+/", ObjectSerializer::toString($territory)))) {
            throw new \InvalidArgumentException("invalid value for \$territory when calling DomainLegacy., must conform to the pattern /^[A-Za-z0-9-_.]+/.");
        }

        $this->container['territory'] = $territory;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of domain. Can be any plain text summary of the domain or organization.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets moh
     *
     * @return string|null
     */
    public function getMoh()
    {
        return $this->container['moh'];
    }

    /**
     * Sets moh
     *
     * @param string|null $moh Enablement of Music on Hold
     *
     * @return self
     */
    public function setMoh($moh)
    {
        if (is_null($moh)) {
            throw new \InvalidArgumentException('non-nullable moh cannot be null');
        }
        $allowedValues = $this->getMohAllowableValues();
        if (!in_array($moh, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'moh', must be one of '%s'",
                    $moh,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['moh'] = $moh;

        return $this;
    }

    /**
     * Gets mor
     *
     * @return string|null
     */
    public function getMor()
    {
        return $this->container['mor'];
    }

    /**
     * Sets mor
     *
     * @param string|null $mor Enablement of Music on Ring
     *
     * @return self
     */
    public function setMor($mor)
    {
        if (is_null($mor)) {
            throw new \InvalidArgumentException('non-nullable mor cannot be null');
        }
        $allowedValues = $this->getMorAllowableValues();
        if (!in_array($mor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mor', must be one of '%s'",
                    $mor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mor'] = $mor;

        return $this;
    }

    /**
     * Gets rmoh
     *
     * @return string|null
     */
    public function getRmoh()
    {
        return $this->container['rmoh'];
    }

    /**
     * Sets rmoh
     *
     * @param string|null $rmoh Enablement of Random Music on Hold by default
     *
     * @return self
     */
    public function setRmoh($rmoh)
    {
        if (is_null($rmoh)) {
            throw new \InvalidArgumentException('non-nullable rmoh cannot be null');
        }
        $allowedValues = $this->getRmohAllowableValues();
        if (!in_array($rmoh, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rmoh', must be one of '%s'",
                    $rmoh,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rmoh'] = $rmoh;

        return $this;
    }

    /**
     * Gets resi
     *
     * @return string|null
     */
    public function getResi()
    {
        return $this->container['resi'];
    }

    /**
     * Sets resi
     *
     * @param string|null $resi resi
     *
     * @return self
     */
    public function setResi($resi)
    {
        if (is_null($resi)) {
            throw new \InvalidArgumentException('non-nullable resi cannot be null');
        }
        $allowedValues = $this->getResiAllowableValues();
        if (!in_array($resi, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'resi', must be one of '%s'",
                    $resi,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resi'] = $resi;

        return $this;
    }

    /**
     * Gets sso
     *
     * @return string|null
     */
    public function getSso()
    {
        return $this->container['sso'];
    }

    /**
     * Sets sso
     *
     * @param string|null $sso sso
     *
     * @return self
     */
    public function setSso($sso)
    {
        if (is_null($sso)) {
            throw new \InvalidArgumentException('non-nullable sso cannot be null');
        }
        $allowedValues = $this->getSsoAllowableValues();
        if (!in_array($sso, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sso', must be one of '%s'",
                    $sso,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sso'] = $sso;

        return $this;
    }

    /**
     * Gets call_limit
     *
     * @return int|null
     */
    public function getCallLimit()
    {
        return $this->container['call_limit'];
    }

    /**
     * Sets call_limit
     *
     * @param int|null $call_limit call_limit
     *
     * @return self
     */
    public function setCallLimit($call_limit)
    {
        if (is_null($call_limit)) {
            throw new \InvalidArgumentException('non-nullable call_limit cannot be null');
        }

        if (($call_limit > 5000)) {
            throw new \InvalidArgumentException('invalid value for $call_limit when calling DomainLegacy., must be smaller than or equal to 5000.');
        }
        if (($call_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $call_limit when calling DomainLegacy., must be bigger than or equal to 0.');
        }

        $this->container['call_limit'] = $call_limit;

        return $this;
    }

    /**
     * Gets call_limit_ext
     *
     * @return int|null
     */
    public function getCallLimitExt()
    {
        return $this->container['call_limit_ext'];
    }

    /**
     * Sets call_limit_ext
     *
     * @param int|null $call_limit_ext call_limit_ext
     *
     * @return self
     */
    public function setCallLimitExt($call_limit_ext)
    {
        if (is_null($call_limit_ext)) {
            throw new \InvalidArgumentException('non-nullable call_limit_ext cannot be null');
        }

        if (($call_limit_ext > 5000)) {
            throw new \InvalidArgumentException('invalid value for $call_limit_ext when calling DomainLegacy., must be smaller than or equal to 5000.');
        }
        if (($call_limit_ext < 0)) {
            throw new \InvalidArgumentException('invalid value for $call_limit_ext when calling DomainLegacy., must be bigger than or equal to 0.');
        }

        $this->container['call_limit_ext'] = $call_limit_ext;

        return $this;
    }

    /**
     * Gets sub_limit
     *
     * @return int|null
     */
    public function getSubLimit()
    {
        return $this->container['sub_limit'];
    }

    /**
     * Sets sub_limit
     *
     * @param int|null $sub_limit sub_limit
     *
     * @return self
     */
    public function setSubLimit($sub_limit)
    {
        if (is_null($sub_limit)) {
            throw new \InvalidArgumentException('non-nullable sub_limit cannot be null');
        }

        if (($sub_limit > 5000)) {
            throw new \InvalidArgumentException('invalid value for $sub_limit when calling DomainLegacy., must be smaller than or equal to 5000.');
        }
        if (($sub_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $sub_limit when calling DomainLegacy., must be bigger than or equal to 0.');
        }

        $this->container['sub_limit'] = $sub_limit;

        return $this;
    }

    /**
     * Gets max_call_queue
     *
     * @return int|null
     */
    public function getMaxCallQueue()
    {
        return $this->container['max_call_queue'];
    }

    /**
     * Sets max_call_queue
     *
     * @param int|null $max_call_queue max_call_queue
     *
     * @return self
     */
    public function setMaxCallQueue($max_call_queue)
    {
        if (is_null($max_call_queue)) {
            throw new \InvalidArgumentException('non-nullable max_call_queue cannot be null');
        }

        if (($max_call_queue > 5000)) {
            throw new \InvalidArgumentException('invalid value for $max_call_queue when calling DomainLegacy., must be smaller than or equal to 5000.');
        }
        if (($max_call_queue < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_call_queue when calling DomainLegacy., must be bigger than or equal to 0.');
        }

        $this->container['max_call_queue'] = $max_call_queue;

        return $this;
    }

    /**
     * Gets max_aa
     *
     * @return int|null
     */
    public function getMaxAa()
    {
        return $this->container['max_aa'];
    }

    /**
     * Sets max_aa
     *
     * @param int|null $max_aa max_aa
     *
     * @return self
     */
    public function setMaxAa($max_aa)
    {
        if (is_null($max_aa)) {
            throw new \InvalidArgumentException('non-nullable max_aa cannot be null');
        }

        if (($max_aa > 1000)) {
            throw new \InvalidArgumentException('invalid value for $max_aa when calling DomainLegacy., must be smaller than or equal to 1000.');
        }
        if (($max_aa < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_aa when calling DomainLegacy., must be bigger than or equal to 0.');
        }

        $this->container['max_aa'] = $max_aa;

        return $this;
    }

    /**
     * Gets max_conference
     *
     * @return int|null
     */
    public function getMaxConference()
    {
        return $this->container['max_conference'];
    }

    /**
     * Sets max_conference
     *
     * @param int|null $max_conference max_conference
     *
     * @return self
     */
    public function setMaxConference($max_conference)
    {
        if (is_null($max_conference)) {
            throw new \InvalidArgumentException('non-nullable max_conference cannot be null');
        }

        if (($max_conference > 1000)) {
            throw new \InvalidArgumentException('invalid value for $max_conference when calling DomainLegacy., must be smaller than or equal to 1000.');
        }
        if (($max_conference < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_conference when calling DomainLegacy., must be bigger than or equal to 0.');
        }

        $this->container['max_conference'] = $max_conference;

        return $this;
    }

    /**
     * Gets max_department
     *
     * @return int|null
     */
    public function getMaxDepartment()
    {
        return $this->container['max_department'];
    }

    /**
     * Sets max_department
     *
     * @param int|null $max_department max_department
     *
     * @return self
     */
    public function setMaxDepartment($max_department)
    {
        if (is_null($max_department)) {
            throw new \InvalidArgumentException('non-nullable max_department cannot be null');
        }

        if (($max_department > 1000)) {
            throw new \InvalidArgumentException('invalid value for $max_department when calling DomainLegacy., must be smaller than or equal to 1000.');
        }
        if (($max_department < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_department when calling DomainLegacy., must be bigger than or equal to 0.');
        }

        $this->container['max_department'] = $max_department;

        return $this;
    }

    /**
     * Gets max_user
     *
     * @return int|null
     */
    public function getMaxUser()
    {
        return $this->container['max_user'];
    }

    /**
     * Sets max_user
     *
     * @param int|null $max_user max_user
     *
     * @return self
     */
    public function setMaxUser($max_user)
    {
        if (is_null($max_user)) {
            throw new \InvalidArgumentException('non-nullable max_user cannot be null');
        }

        if (($max_user > 1000)) {
            throw new \InvalidArgumentException('invalid value for $max_user when calling DomainLegacy., must be smaller than or equal to 1000.');
        }
        if (($max_user < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_user when calling DomainLegacy., must be bigger than or equal to 0.');
        }

        $this->container['max_user'] = $max_user;

        return $this;
    }

    /**
     * Gets max_device
     *
     * @return int|null
     */
    public function getMaxDevice()
    {
        return $this->container['max_device'];
    }

    /**
     * Sets max_device
     *
     * @param int|null $max_device max_device
     *
     * @return self
     */
    public function setMaxDevice($max_device)
    {
        if (is_null($max_device)) {
            throw new \InvalidArgumentException('non-nullable max_device cannot be null');
        }

        if (($max_device > 1000)) {
            throw new \InvalidArgumentException('invalid value for $max_device when calling DomainLegacy., must be smaller than or equal to 1000.');
        }
        if (($max_device < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_device when calling DomainLegacy., must be bigger than or equal to 0.');
        }

        $this->container['max_device'] = $max_device;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string|null $time_zone time_zone
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            throw new \InvalidArgumentException('non-nullable time_zone cannot be null');
        }
        $allowedValues = $this->getTimeZoneAllowableValues();
        if (!in_array($time_zone, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'time_zone', must be one of '%s'",
                    $time_zone,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets dial_plan
     *
     * @return string|null
     */
    public function getDialPlan()
    {
        return $this->container['dial_plan'];
    }

    /**
     * Sets dial_plan
     *
     * @param string|null $dial_plan dial_plan
     *
     * @return self
     */
    public function setDialPlan($dial_plan)
    {
        if (is_null($dial_plan)) {
            throw new \InvalidArgumentException('non-nullable dial_plan cannot be null');
        }
        $this->container['dial_plan'] = $dial_plan;

        return $this;
    }

    /**
     * Gets dial_policy
     *
     * @return string|null
     */
    public function getDialPolicy()
    {
        return $this->container['dial_policy'];
    }

    /**
     * Sets dial_policy
     *
     * @param string|null $dial_policy dial_policy
     *
     * @return self
     */
    public function setDialPolicy($dial_policy)
    {
        if (is_null($dial_policy)) {
            throw new \InvalidArgumentException('non-nullable dial_policy cannot be null');
        }
        $this->container['dial_policy'] = $dial_policy;

        return $this;
    }

    /**
     * Gets policies
     *
     * @return string|null
     */
    public function getPolicies()
    {
        return $this->container['policies'];
    }

    /**
     * Sets policies
     *
     * @param string|null $policies policies
     *
     * @return self
     */
    public function setPolicies($policies)
    {
        if (is_null($policies)) {
            throw new \InvalidArgumentException('non-nullable policies cannot be null');
        }
        $allowedValues = $this->getPoliciesAllowableValues();
        if (!in_array($policies, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'policies', must be one of '%s'",
                    $policies,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['policies'] = $policies;

        return $this;
    }

    /**
     * Gets email_sender
     *
     * @return string|null
     */
    public function getEmailSender()
    {
        return $this->container['email_sender'];
    }

    /**
     * Sets email_sender
     *
     * @param string|null $email_sender This e-mail address will be displayed on e-mails sent from the system
     *
     * @return self
     */
    public function setEmailSender($email_sender)
    {
        if (is_null($email_sender)) {
            throw new \InvalidArgumentException('non-nullable email_sender cannot be null');
        }
        $this->container['email_sender'] = $email_sender;

        return $this;
    }

    /**
     * Gets smtp_host
     *
     * @return string|null
     */
    public function getSmtpHost()
    {
        return $this->container['smtp_host'];
    }

    /**
     * Sets smtp_host
     *
     * @param string|null $smtp_host smtp_host
     *
     * @return self
     */
    public function setSmtpHost($smtp_host)
    {
        if (is_null($smtp_host)) {
            throw new \InvalidArgumentException('non-nullable smtp_host cannot be null');
        }
        $this->container['smtp_host'] = $smtp_host;

        return $this;
    }

    /**
     * Gets smtp_port
     *
     * @return string|null
     */
    public function getSmtpPort()
    {
        return $this->container['smtp_port'];
    }

    /**
     * Sets smtp_port
     *
     * @param string|null $smtp_port smtp_port
     *
     * @return self
     */
    public function setSmtpPort($smtp_port)
    {
        if (is_null($smtp_port)) {
            throw new \InvalidArgumentException('non-nullable smtp_port cannot be null');
        }
        $this->container['smtp_port'] = $smtp_port;

        return $this;
    }

    /**
     * Gets smtp_uid
     *
     * @return string|null
     */
    public function getSmtpUid()
    {
        return $this->container['smtp_uid'];
    }

    /**
     * Sets smtp_uid
     *
     * @param string|null $smtp_uid smtp_uid
     *
     * @return self
     */
    public function setSmtpUid($smtp_uid)
    {
        if (is_null($smtp_uid)) {
            throw new \InvalidArgumentException('non-nullable smtp_uid cannot be null');
        }
        $this->container['smtp_uid'] = $smtp_uid;

        return $this;
    }

    /**
     * Gets smtp_pwd
     *
     * @return string|null
     */
    public function getSmtpPwd()
    {
        return $this->container['smtp_pwd'];
    }

    /**
     * Sets smtp_pwd
     *
     * @param string|null $smtp_pwd smtp_pwd
     *
     * @return self
     */
    public function setSmtpPwd($smtp_pwd)
    {
        if (is_null($smtp_pwd)) {
            throw new \InvalidArgumentException('non-nullable smtp_pwd cannot be null');
        }
        $this->container['smtp_pwd'] = $smtp_pwd;

        return $this;
    }

    /**
     * Gets from_user
     *
     * @return string|null
     */
    public function getFromUser()
    {
        return $this->container['from_user'];
    }

    /**
     * Sets from_user
     *
     * @param string|null $from_user from_user
     *
     * @return self
     */
    public function setFromUser($from_user)
    {
        if (is_null($from_user)) {
            throw new \InvalidArgumentException('non-nullable from_user cannot be null');
        }
        $this->container['from_user'] = $from_user;

        return $this;
    }

    /**
     * Gets from_host
     *
     * @return string|null
     */
    public function getFromHost()
    {
        return $this->container['from_host'];
    }

    /**
     * Sets from_host
     *
     * @param string|null $from_host from_host
     *
     * @return self
     */
    public function setFromHost($from_host)
    {
        if (is_null($from_host)) {
            throw new \InvalidArgumentException('non-nullable from_host cannot be null');
        }
        $this->container['from_host'] = $from_host;

        return $this;
    }

    /**
     * Gets active_call
     *
     * @return int|null
     */
    public function getActiveCall()
    {
        return $this->container['active_call'];
    }

    /**
     * Sets active_call
     *
     * @param int|null $active_call active_call
     *
     * @return self
     */
    public function setActiveCall($active_call)
    {
        if (is_null($active_call)) {
            throw new \InvalidArgumentException('non-nullable active_call cannot be null');
        }
        $this->container['active_call'] = $active_call;

        return $this;
    }

    /**
     * Gets count_for_limit
     *
     * @return int|null
     */
    public function getCountForLimit()
    {
        return $this->container['count_for_limit'];
    }

    /**
     * Sets count_for_limit
     *
     * @param int|null $count_for_limit count_for_limit
     *
     * @return self
     */
    public function setCountForLimit($count_for_limit)
    {
        if (is_null($count_for_limit)) {
            throw new \InvalidArgumentException('non-nullable count_for_limit cannot be null');
        }
        $this->container['count_for_limit'] = $count_for_limit;

        return $this;
    }

    /**
     * Gets count_external
     *
     * @return int|null
     */
    public function getCountExternal()
    {
        return $this->container['count_external'];
    }

    /**
     * Sets count_external
     *
     * @param int|null $count_external count_external
     *
     * @return self
     */
    public function setCountExternal($count_external)
    {
        if (is_null($count_external)) {
            throw new \InvalidArgumentException('non-nullable count_external cannot be null');
        }
        $this->container['count_external'] = $count_external;

        return $this;
    }

    /**
     * Gets sub_count
     *
     * @return int|null
     */
    public function getSubCount()
    {
        return $this->container['sub_count'];
    }

    /**
     * Sets sub_count
     *
     * @param int|null $sub_count sub_count
     *
     * @return self
     */
    public function setSubCount($sub_count)
    {
        if (is_null($sub_count)) {
            throw new \InvalidArgumentException('non-nullable sub_count cannot be null');
        }
        $this->container['sub_count'] = $sub_count;

        return $this;
    }

    /**
     * Gets max_site
     *
     * @return int|null
     */
    public function getMaxSite()
    {
        return $this->container['max_site'];
    }

    /**
     * Sets max_site
     *
     * @param int|null $max_site max_site
     *
     * @return self
     */
    public function setMaxSite($max_site)
    {
        if (is_null($max_site)) {
            throw new \InvalidArgumentException('non-nullable max_site cannot be null');
        }
        $this->container['max_site'] = $max_site;

        return $this;
    }

    /**
     * Gets max_fax
     *
     * @return int|null
     */
    public function getMaxFax()
    {
        return $this->container['max_fax'];
    }

    /**
     * Sets max_fax
     *
     * @param int|null $max_fax max_fax
     *
     * @return self
     */
    public function setMaxFax($max_fax)
    {
        if (is_null($max_fax)) {
            throw new \InvalidArgumentException('non-nullable max_fax cannot be null');
        }
        $this->container['max_fax'] = $max_fax;

        return $this;
    }

    /**
     * Gets address_id
     *
     * @return string|null
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param string|null $address_id address_id
     *
     * @return self
     */
    public function setAddressId($address_id)
    {
        if (is_null($address_id)) {
            throw new \InvalidArgumentException('non-nullable address_id cannot be null');
        }
        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets vmail_provisioned
     *
     * @return string|null
     */
    public function getVmailProvisioned()
    {
        return $this->container['vmail_provisioned'];
    }

    /**
     * Sets vmail_provisioned
     *
     * @param string|null $vmail_provisioned vmail_provisioned
     *
     * @return self
     */
    public function setVmailProvisioned($vmail_provisioned)
    {
        if (is_null($vmail_provisioned)) {
            throw new \InvalidArgumentException('non-nullable vmail_provisioned cannot be null');
        }
        $this->container['vmail_provisioned'] = $vmail_provisioned;

        return $this;
    }

    /**
     * Gets callid_nmbr
     *
     * @return int|null
     */
    public function getCallidNmbr()
    {
        return $this->container['callid_nmbr'];
    }

    /**
     * Sets callid_nmbr
     *
     * @param int|null $callid_nmbr callid_nmbr
     *
     * @return self
     */
    public function setCallidNmbr($callid_nmbr)
    {
        if (is_null($callid_nmbr)) {
            throw new \InvalidArgumentException('non-nullable callid_nmbr cannot be null');
        }
        $this->container['callid_nmbr'] = $callid_nmbr;

        return $this;
    }

    /**
     * Gets callid_name
     *
     * @return string|null
     */
    public function getCallidName()
    {
        return $this->container['callid_name'];
    }

    /**
     * Sets callid_name
     *
     * @param string|null $callid_name callid_name
     *
     * @return self
     */
    public function setCallidName($callid_name)
    {
        if (is_null($callid_name)) {
            throw new \InvalidArgumentException('non-nullable callid_name cannot be null');
        }
        $this->container['callid_name'] = $callid_name;

        return $this;
    }

    /**
     * Gets callid_emgr
     *
     * @return int|null
     */
    public function getCallidEmgr()
    {
        return $this->container['callid_emgr'];
    }

    /**
     * Sets callid_emgr
     *
     * @param int|null $callid_emgr callid_emgr
     *
     * @return self
     */
    public function setCallidEmgr($callid_emgr)
    {
        if (is_null($callid_emgr)) {
            throw new \InvalidArgumentException('non-nullable callid_emgr cannot be null');
        }
        $this->container['callid_emgr'] = $callid_emgr;

        return $this;
    }

    /**
     * Gets area_code
     *
     * @return int|null
     */
    public function getAreaCode()
    {
        return $this->container['area_code'];
    }

    /**
     * Sets area_code
     *
     * @param int|null $area_code area_code
     *
     * @return self
     */
    public function setAreaCode($area_code)
    {
        if (is_null($area_code)) {
            throw new \InvalidArgumentException('non-nullable area_code cannot be null');
        }
        $this->container['area_code'] = $area_code;

        return $this;
    }

    /**
     * Gets vmail_transcribe
     *
     * @return string|null
     */
    public function getVmailTranscribe()
    {
        return $this->container['vmail_transcribe'];
    }

    /**
     * Sets vmail_transcribe
     *
     * @param string|null $vmail_transcribe vmail_transcribe
     *
     * @return self
     */
    public function setVmailTranscribe($vmail_transcribe)
    {
        if (is_null($vmail_transcribe)) {
            throw new \InvalidArgumentException('non-nullable vmail_transcribe cannot be null');
        }
        $this->container['vmail_transcribe'] = $vmail_transcribe;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language The default language for the domain
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


