<?php
/**
 * Messagesession
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * Messagesession Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Messagesession implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Messagesession';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user' => 'string',
        'domain' => 'string',
        'messagesession_remote' => '\SpectrumVoip\\\\NetSapiens\Model\MessagesessionMessagesessionRemote',
        'messagesession_muted' => 'string',
        'messagesession_id' => 'string',
        'messagesession_sms_number' => '\SpectrumVoip\\\\NetSapiens\Model\MessagesessionMessagesessionSmsNumber',
        'messagesession_last_datetime' => 'string',
        'messagesession_start_datetime' => 'string',
        'messagesession_last_message' => '\SpectrumVoip\\\\NetSapiens\Model\MessagesessionMessagesessionLastMessage',
        'messagesession_last_sender' => 'string',
        'messagesession_last_status' => 'string',
        'messagesession_last_email_reminder_datetime' => 'string',
        'messagesession_reciever_hostname' => 'string',
        'messagesession_queue_termination' => 'string',
        'messagesession_queue_status' => 'string',
        'messagesession_queue_session_id' => 'string',
        'messagesession_agent_start_datetime' => 'string',
        'messagesession_last_type' => 'string',
        'messagesession_last_media_type' => 'string',
        'messagesession_last_media_size' => 'int',
        'messagesession_type' => 'string',
        'messagesession_name' => 'string',
        'messagesession_participants' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user' => null,
        'domain' => null,
        'messagesession_remote' => null,
        'messagesession_muted' => null,
        'messagesession_id' => null,
        'messagesession_sms_number' => null,
        'messagesession_last_datetime' => null,
        'messagesession_start_datetime' => null,
        'messagesession_last_message' => null,
        'messagesession_last_sender' => null,
        'messagesession_last_status' => null,
        'messagesession_last_email_reminder_datetime' => null,
        'messagesession_reciever_hostname' => null,
        'messagesession_queue_termination' => null,
        'messagesession_queue_status' => null,
        'messagesession_queue_session_id' => null,
        'messagesession_agent_start_datetime' => null,
        'messagesession_last_type' => null,
        'messagesession_last_media_type' => null,
        'messagesession_last_media_size' => null,
        'messagesession_type' => null,
        'messagesession_name' => null,
        'messagesession_participants' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user' => false,
        'domain' => false,
        'messagesession_remote' => true,
        'messagesession_muted' => false,
        'messagesession_id' => false,
        'messagesession_sms_number' => true,
        'messagesession_last_datetime' => true,
        'messagesession_start_datetime' => true,
        'messagesession_last_message' => true,
        'messagesession_last_sender' => true,
        'messagesession_last_status' => true,
        'messagesession_last_email_reminder_datetime' => true,
        'messagesession_reciever_hostname' => false,
        'messagesession_queue_termination' => true,
        'messagesession_queue_status' => true,
        'messagesession_queue_session_id' => true,
        'messagesession_agent_start_datetime' => true,
        'messagesession_last_type' => false,
        'messagesession_last_media_type' => true,
        'messagesession_last_media_size' => true,
        'messagesession_type' => false,
        'messagesession_name' => true,
        'messagesession_participants' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
        'domain' => 'domain',
        'messagesession_remote' => 'messagesession-remote',
        'messagesession_muted' => 'messagesession-muted',
        'messagesession_id' => 'messagesession-id',
        'messagesession_sms_number' => 'messagesession-sms-number',
        'messagesession_last_datetime' => 'messagesession-last-datetime',
        'messagesession_start_datetime' => 'messagesession-start-datetime',
        'messagesession_last_message' => 'messagesession-last-message',
        'messagesession_last_sender' => 'messagesession-last-sender',
        'messagesession_last_status' => 'messagesession-last-status',
        'messagesession_last_email_reminder_datetime' => 'messagesession-last-email-reminder-datetime',
        'messagesession_reciever_hostname' => 'messagesession-reciever-hostname',
        'messagesession_queue_termination' => 'messagesession-queue-termination',
        'messagesession_queue_status' => 'messagesession-queue-status',
        'messagesession_queue_session_id' => 'messagesession-queue-session-id',
        'messagesession_agent_start_datetime' => 'messagesession-agent-start-datetime',
        'messagesession_last_type' => 'messagesession-last-type',
        'messagesession_last_media_type' => 'messagesession-last-media-type',
        'messagesession_last_media_size' => 'messagesession-last-media-size',
        'messagesession_type' => 'messagesession-type',
        'messagesession_name' => 'messagesession-name',
        'messagesession_participants' => 'messagesession-participants'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
        'domain' => 'setDomain',
        'messagesession_remote' => 'setMessagesessionRemote',
        'messagesession_muted' => 'setMessagesessionMuted',
        'messagesession_id' => 'setMessagesessionId',
        'messagesession_sms_number' => 'setMessagesessionSmsNumber',
        'messagesession_last_datetime' => 'setMessagesessionLastDatetime',
        'messagesession_start_datetime' => 'setMessagesessionStartDatetime',
        'messagesession_last_message' => 'setMessagesessionLastMessage',
        'messagesession_last_sender' => 'setMessagesessionLastSender',
        'messagesession_last_status' => 'setMessagesessionLastStatus',
        'messagesession_last_email_reminder_datetime' => 'setMessagesessionLastEmailReminderDatetime',
        'messagesession_reciever_hostname' => 'setMessagesessionRecieverHostname',
        'messagesession_queue_termination' => 'setMessagesessionQueueTermination',
        'messagesession_queue_status' => 'setMessagesessionQueueStatus',
        'messagesession_queue_session_id' => 'setMessagesessionQueueSessionId',
        'messagesession_agent_start_datetime' => 'setMessagesessionAgentStartDatetime',
        'messagesession_last_type' => 'setMessagesessionLastType',
        'messagesession_last_media_type' => 'setMessagesessionLastMediaType',
        'messagesession_last_media_size' => 'setMessagesessionLastMediaSize',
        'messagesession_type' => 'setMessagesessionType',
        'messagesession_name' => 'setMessagesessionName',
        'messagesession_participants' => 'setMessagesessionParticipants'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
        'domain' => 'getDomain',
        'messagesession_remote' => 'getMessagesessionRemote',
        'messagesession_muted' => 'getMessagesessionMuted',
        'messagesession_id' => 'getMessagesessionId',
        'messagesession_sms_number' => 'getMessagesessionSmsNumber',
        'messagesession_last_datetime' => 'getMessagesessionLastDatetime',
        'messagesession_start_datetime' => 'getMessagesessionStartDatetime',
        'messagesession_last_message' => 'getMessagesessionLastMessage',
        'messagesession_last_sender' => 'getMessagesessionLastSender',
        'messagesession_last_status' => 'getMessagesessionLastStatus',
        'messagesession_last_email_reminder_datetime' => 'getMessagesessionLastEmailReminderDatetime',
        'messagesession_reciever_hostname' => 'getMessagesessionRecieverHostname',
        'messagesession_queue_termination' => 'getMessagesessionQueueTermination',
        'messagesession_queue_status' => 'getMessagesessionQueueStatus',
        'messagesession_queue_session_id' => 'getMessagesessionQueueSessionId',
        'messagesession_agent_start_datetime' => 'getMessagesessionAgentStartDatetime',
        'messagesession_last_type' => 'getMessagesessionLastType',
        'messagesession_last_media_type' => 'getMessagesessionLastMediaType',
        'messagesession_last_media_size' => 'getMessagesessionLastMediaSize',
        'messagesession_type' => 'getMessagesessionType',
        'messagesession_name' => 'getMessagesessionName',
        'messagesession_participants' => 'getMessagesessionParticipants'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('messagesession_remote', $data ?? [], null);
        $this->setIfExists('messagesession_muted', $data ?? [], null);
        $this->setIfExists('messagesession_id', $data ?? [], null);
        $this->setIfExists('messagesession_sms_number', $data ?? [], null);
        $this->setIfExists('messagesession_last_datetime', $data ?? [], null);
        $this->setIfExists('messagesession_start_datetime', $data ?? [], null);
        $this->setIfExists('messagesession_last_message', $data ?? [], null);
        $this->setIfExists('messagesession_last_sender', $data ?? [], null);
        $this->setIfExists('messagesession_last_status', $data ?? [], null);
        $this->setIfExists('messagesession_last_email_reminder_datetime', $data ?? [], null);
        $this->setIfExists('messagesession_reciever_hostname', $data ?? [], null);
        $this->setIfExists('messagesession_queue_termination', $data ?? [], null);
        $this->setIfExists('messagesession_queue_status', $data ?? [], null);
        $this->setIfExists('messagesession_queue_session_id', $data ?? [], null);
        $this->setIfExists('messagesession_agent_start_datetime', $data ?? [], null);
        $this->setIfExists('messagesession_last_type', $data ?? [], null);
        $this->setIfExists('messagesession_last_media_type', $data ?? [], null);
        $this->setIfExists('messagesession_last_media_size', $data ?? [], null);
        $this->setIfExists('messagesession_type', $data ?? [], null);
        $this->setIfExists('messagesession_name', $data ?? [], null);
        $this->setIfExists('messagesession_participants', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ((mb_strlen($this->container['domain']) > 64)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 64.";
        }

        if (!preg_match("/^[A-Za-z0-9._-]+|\\*/", $this->container['domain'])) {
            $invalidProperties[] = "invalid value for 'domain', must be conform to the pattern /^[A-Za-z0-9._-]+|\\*/.";
        }

        if ($this->container['messagesession_remote'] === null) {
            $invalidProperties[] = "'messagesession_remote' can't be null";
        }
        if ($this->container['messagesession_muted'] === null) {
            $invalidProperties[] = "'messagesession_muted' can't be null";
        }
        if ($this->container['messagesession_id'] === null) {
            $invalidProperties[] = "'messagesession_id' can't be null";
        }
        if ($this->container['messagesession_sms_number'] === null) {
            $invalidProperties[] = "'messagesession_sms_number' can't be null";
        }
        if ($this->container['messagesession_last_datetime'] === null) {
            $invalidProperties[] = "'messagesession_last_datetime' can't be null";
        }
        if ($this->container['messagesession_start_datetime'] === null) {
            $invalidProperties[] = "'messagesession_start_datetime' can't be null";
        }
        if ($this->container['messagesession_last_message'] === null) {
            $invalidProperties[] = "'messagesession_last_message' can't be null";
        }
        if ($this->container['messagesession_last_sender'] === null) {
            $invalidProperties[] = "'messagesession_last_sender' can't be null";
        }
        if ($this->container['messagesession_last_status'] === null) {
            $invalidProperties[] = "'messagesession_last_status' can't be null";
        }
        if ($this->container['messagesession_last_email_reminder_datetime'] === null) {
            $invalidProperties[] = "'messagesession_last_email_reminder_datetime' can't be null";
        }
        if ($this->container['messagesession_reciever_hostname'] === null) {
            $invalidProperties[] = "'messagesession_reciever_hostname' can't be null";
        }
        if ($this->container['messagesession_queue_termination'] === null) {
            $invalidProperties[] = "'messagesession_queue_termination' can't be null";
        }
        if ($this->container['messagesession_queue_status'] === null) {
            $invalidProperties[] = "'messagesession_queue_status' can't be null";
        }
        if ($this->container['messagesession_queue_session_id'] === null) {
            $invalidProperties[] = "'messagesession_queue_session_id' can't be null";
        }
        if ($this->container['messagesession_agent_start_datetime'] === null) {
            $invalidProperties[] = "'messagesession_agent_start_datetime' can't be null";
        }
        if ($this->container['messagesession_last_type'] === null) {
            $invalidProperties[] = "'messagesession_last_type' can't be null";
        }
        if ($this->container['messagesession_last_media_type'] === null) {
            $invalidProperties[] = "'messagesession_last_media_type' can't be null";
        }
        if ($this->container['messagesession_last_media_size'] === null) {
            $invalidProperties[] = "'messagesession_last_media_size' can't be null";
        }
        if ($this->container['messagesession_type'] === null) {
            $invalidProperties[] = "'messagesession_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user This is the main user extension for the user account.
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain This is the main organization name. This is used to link resource to its group/tenant/organization/enterprise. ~ and * can be used alone in special cases to mean My Domain (~) and All Domains (\\*).
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        if ((mb_strlen($domain) > 64)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling Messagesession., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[A-Za-z0-9._-]+|\\*/", ObjectSerializer::toString($domain)))) {
            throw new \InvalidArgumentException("invalid value for \$domain when calling Messagesession., must conform to the pattern /^[A-Za-z0-9._-]+|\\*/.");
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets messagesession_remote
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\MessagesessionMessagesessionRemote
     */
    public function getMessagesessionRemote()
    {
        return $this->container['messagesession_remote'];
    }

    /**
     * Sets messagesession_remote
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\MessagesessionMessagesessionRemote $messagesession_remote messagesession_remote
     *
     * @return self
     */
    public function setMessagesessionRemote($messagesession_remote)
    {
        if (is_null($messagesession_remote)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_remote');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_remote', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_remote'] = $messagesession_remote;

        return $this;
    }

    /**
     * Gets messagesession_muted
     *
     * @return string
     */
    public function getMessagesessionMuted()
    {
        return $this->container['messagesession_muted'];
    }

    /**
     * Sets messagesession_muted
     *
     * @param string $messagesession_muted This is whether or not the message session is muted or not. \"yes\" or \"no\"
     *
     * @return self
     */
    public function setMessagesessionMuted($messagesession_muted)
    {
        if (is_null($messagesession_muted)) {
            throw new \InvalidArgumentException('non-nullable messagesession_muted cannot be null');
        }
        $this->container['messagesession_muted'] = $messagesession_muted;

        return $this;
    }

    /**
     * Gets messagesession_id
     *
     * @return string
     */
    public function getMessagesessionId()
    {
        return $this->container['messagesession_id'];
    }

    /**
     * Sets messagesession_id
     *
     * @param string $messagesession_id This is the identifier for the session
     *
     * @return self
     */
    public function setMessagesessionId($messagesession_id)
    {
        if (is_null($messagesession_id)) {
            throw new \InvalidArgumentException('non-nullable messagesession_id cannot be null');
        }
        $this->container['messagesession_id'] = $messagesession_id;

        return $this;
    }

    /**
     * Gets messagesession_sms_number
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\MessagesessionMessagesessionSmsNumber
     */
    public function getMessagesessionSmsNumber()
    {
        return $this->container['messagesession_sms_number'];
    }

    /**
     * Sets messagesession_sms_number
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\MessagesessionMessagesessionSmsNumber $messagesession_sms_number messagesession_sms_number
     *
     * @return self
     */
    public function setMessagesessionSmsNumber($messagesession_sms_number)
    {
        if (is_null($messagesession_sms_number)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_sms_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_sms_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_sms_number'] = $messagesession_sms_number;

        return $this;
    }

    /**
     * Gets messagesession_last_datetime
     *
     * @return string
     */
    public function getMessagesessionLastDatetime()
    {
        return $this->container['messagesession_last_datetime'];
    }

    /**
     * Sets messagesession_last_datetime
     *
     * @param string $messagesession_last_datetime This is the last time the session had an inbound or outbound message
     *
     * @return self
     */
    public function setMessagesessionLastDatetime($messagesession_last_datetime)
    {
        if (is_null($messagesession_last_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_last_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_last_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_last_datetime'] = $messagesession_last_datetime;

        return $this;
    }

    /**
     * Gets messagesession_start_datetime
     *
     * @return string
     */
    public function getMessagesessionStartDatetime()
    {
        return $this->container['messagesession_start_datetime'];
    }

    /**
     * Sets messagesession_start_datetime
     *
     * @param string $messagesession_start_datetime This is the when the message session started
     *
     * @return self
     */
    public function setMessagesessionStartDatetime($messagesession_start_datetime)
    {
        if (is_null($messagesession_start_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_start_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_start_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_start_datetime'] = $messagesession_start_datetime;

        return $this;
    }

    /**
     * Gets messagesession_last_message
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\MessagesessionMessagesessionLastMessage
     */
    public function getMessagesessionLastMessage()
    {
        return $this->container['messagesession_last_message'];
    }

    /**
     * Sets messagesession_last_message
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\MessagesessionMessagesessionLastMessage $messagesession_last_message messagesession_last_message
     *
     * @return self
     */
    public function setMessagesessionLastMessage($messagesession_last_message)
    {
        if (is_null($messagesession_last_message)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_last_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_last_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_last_message'] = $messagesession_last_message;

        return $this;
    }

    /**
     * Gets messagesession_last_sender
     *
     * @return string
     */
    public function getMessagesessionLastSender()
    {
        return $this->container['messagesession_last_sender'];
    }

    /**
     * Sets messagesession_last_sender
     *
     * @param string $messagesession_last_sender This shows the UID or the phonenumber of who was the last message sender
     *
     * @return self
     */
    public function setMessagesessionLastSender($messagesession_last_sender)
    {
        if (is_null($messagesession_last_sender)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_last_sender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_last_sender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_last_sender'] = $messagesession_last_sender;

        return $this;
    }

    /**
     * Gets messagesession_last_status
     *
     * @return string
     */
    public function getMessagesessionLastStatus()
    {
        return $this->container['messagesession_last_status'];
    }

    /**
     * Sets messagesession_last_status
     *
     * @param string $messagesession_last_status This is the last status of the messagesession. Will contain read/unread status
     *
     * @return self
     */
    public function setMessagesessionLastStatus($messagesession_last_status)
    {
        if (is_null($messagesession_last_status)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_last_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_last_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_last_status'] = $messagesession_last_status;

        return $this;
    }

    /**
     * Gets messagesession_last_email_reminder_datetime
     *
     * @return string
     */
    public function getMessagesessionLastEmailReminderDatetime()
    {
        return $this->container['messagesession_last_email_reminder_datetime'];
    }

    /**
     * Sets messagesession_last_email_reminder_datetime
     *
     * @param string $messagesession_last_email_reminder_datetime This is when the last email reminder was sent out notifiying the user of a missed message
     *
     * @return self
     */
    public function setMessagesessionLastEmailReminderDatetime($messagesession_last_email_reminder_datetime)
    {
        if (is_null($messagesession_last_email_reminder_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_last_email_reminder_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_last_email_reminder_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_last_email_reminder_datetime'] = $messagesession_last_email_reminder_datetime;

        return $this;
    }

    /**
     * Gets messagesession_reciever_hostname
     *
     * @return string
     */
    public function getMessagesessionRecieverHostname()
    {
        return $this->container['messagesession_reciever_hostname'];
    }

    /**
     * Sets messagesession_reciever_hostname
     *
     * @param string $messagesession_reciever_hostname This is the hostname of the last received message
     *
     * @return self
     */
    public function setMessagesessionRecieverHostname($messagesession_reciever_hostname)
    {
        if (is_null($messagesession_reciever_hostname)) {
            throw new \InvalidArgumentException('non-nullable messagesession_reciever_hostname cannot be null');
        }
        $this->container['messagesession_reciever_hostname'] = $messagesession_reciever_hostname;

        return $this;
    }

    /**
     * Gets messagesession_queue_termination
     *
     * @return string
     */
    public function getMessagesessionQueueTermination()
    {
        return $this->container['messagesession_queue_termination'];
    }

    /**
     * Sets messagesession_queue_termination
     *
     * @param string $messagesession_queue_termination This is which SMS queue the messagesession is assigned to
     *
     * @return self
     */
    public function setMessagesessionQueueTermination($messagesession_queue_termination)
    {
        if (is_null($messagesession_queue_termination)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_queue_termination');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_queue_termination', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_queue_termination'] = $messagesession_queue_termination;

        return $this;
    }

    /**
     * Gets messagesession_queue_status
     *
     * @return string
     */
    public function getMessagesessionQueueStatus()
    {
        return $this->container['messagesession_queue_status'];
    }

    /**
     * Sets messagesession_queue_status
     *
     * @param string $messagesession_queue_status This is the queue status of the messagesession
     *
     * @return self
     */
    public function setMessagesessionQueueStatus($messagesession_queue_status)
    {
        if (is_null($messagesession_queue_status)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_queue_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_queue_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_queue_status'] = $messagesession_queue_status;

        return $this;
    }

    /**
     * Gets messagesession_queue_session_id
     *
     * @return string
     */
    public function getMessagesessionQueueSessionId()
    {
        return $this->container['messagesession_queue_session_id'];
    }

    /**
     * Sets messagesession_queue_session_id
     *
     * @param string $messagesession_queue_session_id This is the queue session id placed on the messagesession
     *
     * @return self
     */
    public function setMessagesessionQueueSessionId($messagesession_queue_session_id)
    {
        if (is_null($messagesession_queue_session_id)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_queue_session_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_queue_session_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_queue_session_id'] = $messagesession_queue_session_id;

        return $this;
    }

    /**
     * Gets messagesession_agent_start_datetime
     *
     * @return string
     */
    public function getMessagesessionAgentStartDatetime()
    {
        return $this->container['messagesession_agent_start_datetime'];
    }

    /**
     * Sets messagesession_agent_start_datetime
     *
     * @param string $messagesession_agent_start_datetime This is when the messagesession was started by the agent
     *
     * @return self
     */
    public function setMessagesessionAgentStartDatetime($messagesession_agent_start_datetime)
    {
        if (is_null($messagesession_agent_start_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_agent_start_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_agent_start_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_agent_start_datetime'] = $messagesession_agent_start_datetime;

        return $this;
    }

    /**
     * Gets messagesession_last_type
     *
     * @return string
     */
    public function getMessagesessionLastType()
    {
        return $this->container['messagesession_last_type'];
    }

    /**
     * Sets messagesession_last_type
     *
     * @param string $messagesession_last_type messagesession_last_type
     *
     * @return self
     */
    public function setMessagesessionLastType($messagesession_last_type)
    {
        if (is_null($messagesession_last_type)) {
            throw new \InvalidArgumentException('non-nullable messagesession_last_type cannot be null');
        }
        $this->container['messagesession_last_type'] = $messagesession_last_type;

        return $this;
    }

    /**
     * Gets messagesession_last_media_type
     *
     * @return string
     */
    public function getMessagesessionLastMediaType()
    {
        return $this->container['messagesession_last_media_type'];
    }

    /**
     * Sets messagesession_last_media_type
     *
     * @param string $messagesession_last_media_type This is the last media type of the messagesession
     *
     * @return self
     */
    public function setMessagesessionLastMediaType($messagesession_last_media_type)
    {
        if (is_null($messagesession_last_media_type)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_last_media_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_last_media_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_last_media_type'] = $messagesession_last_media_type;

        return $this;
    }

    /**
     * Gets messagesession_last_media_size
     *
     * @return int
     */
    public function getMessagesessionLastMediaSize()
    {
        return $this->container['messagesession_last_media_size'];
    }

    /**
     * Sets messagesession_last_media_size
     *
     * @param int $messagesession_last_media_size This is the size of the last media of the messagesession
     *
     * @return self
     */
    public function setMessagesessionLastMediaSize($messagesession_last_media_size)
    {
        if (is_null($messagesession_last_media_size)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_last_media_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_last_media_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_last_media_size'] = $messagesession_last_media_size;

        return $this;
    }

    /**
     * Gets messagesession_type
     *
     * @return string
     */
    public function getMessagesessionType()
    {
        return $this->container['messagesession_type'];
    }

    /**
     * Sets messagesession_type
     *
     * @param string $messagesession_type This is the type of messagesession
     *
     * @return self
     */
    public function setMessagesessionType($messagesession_type)
    {
        if (is_null($messagesession_type)) {
            throw new \InvalidArgumentException('non-nullable messagesession_type cannot be null');
        }
        $this->container['messagesession_type'] = $messagesession_type;

        return $this;
    }

    /**
     * Gets messagesession_name
     *
     * @return string|null
     */
    public function getMessagesessionName()
    {
        return $this->container['messagesession_name'];
    }

    /**
     * Sets messagesession_name
     *
     * @param string|null $messagesession_name This is the name of the messagesession. Names can be assigned to group chats
     *
     * @return self
     */
    public function setMessagesessionName($messagesession_name)
    {
        if (is_null($messagesession_name)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_name'] = $messagesession_name;

        return $this;
    }

    /**
     * Gets messagesession_participants
     *
     * @return string|null
     */
    public function getMessagesessionParticipants()
    {
        return $this->container['messagesession_participants'];
    }

    /**
     * Sets messagesession_participants
     *
     * @param string|null $messagesession_participants This is a comma seperated list of participants within a group chat or group sms messagesession
     *
     * @return self
     */
    public function setMessagesessionParticipants($messagesession_participants)
    {
        if (is_null($messagesession_participants)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_participants');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_participants', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_participants'] = $messagesession_participants;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


