<?php
/**
 * GetRoutes200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * GetRoutes200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetRoutes200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetRoutes_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'forward_request_matchrule' => 'string',
        'match_from' => 'string',
        'class' => 'string',
        'hostname' => 'string',
        'route_status' => 'string',
        'route_name' => 'string',
        'route_option' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'forward_request_matchrule' => null,
        'match_from' => null,
        'class' => null,
        'hostname' => null,
        'route_status' => null,
        'route_name' => null,
        'route_option' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'forward_request_matchrule' => false,
        'match_from' => false,
        'class' => false,
        'hostname' => false,
        'route_status' => false,
        'route_name' => false,
        'route_option' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'forward_request_matchrule' => 'forward_request_matchrule',
        'match_from' => 'match_from',
        'class' => 'class',
        'hostname' => 'hostname',
        'route_status' => 'route_status',
        'route_name' => 'route_name',
        'route_option' => 'route_option'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'forward_request_matchrule' => 'setForwardRequestMatchrule',
        'match_from' => 'setMatchFrom',
        'class' => 'setClass',
        'hostname' => 'setHostname',
        'route_status' => 'setRouteStatus',
        'route_name' => 'setRouteName',
        'route_option' => 'setRouteOption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'forward_request_matchrule' => 'getForwardRequestMatchrule',
        'match_from' => 'getMatchFrom',
        'class' => 'getClass',
        'hostname' => 'getHostname',
        'route_status' => 'getRouteStatus',
        'route_name' => 'getRouteName',
        'route_option' => 'getRouteOption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('forward_request_matchrule', $data ?? [], null);
        $this->setIfExists('match_from', $data ?? [], null);
        $this->setIfExists('class', $data ?? [], null);
        $this->setIfExists('hostname', $data ?? [], null);
        $this->setIfExists('route_status', $data ?? [], null);
        $this->setIfExists('route_name', $data ?? [], null);
        $this->setIfExists('route_option', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['forward_request_matchrule'] === null) {
            $invalidProperties[] = "'forward_request_matchrule' can't be null";
        }
        if ($this->container['match_from'] === null) {
            $invalidProperties[] = "'match_from' can't be null";
        }
        if ($this->container['class'] === null) {
            $invalidProperties[] = "'class' can't be null";
        }
        if ($this->container['hostname'] === null) {
            $invalidProperties[] = "'hostname' can't be null";
        }
        if ($this->container['route_status'] === null) {
            $invalidProperties[] = "'route_status' can't be null";
        }
        if ($this->container['route_name'] === null) {
            $invalidProperties[] = "'route_name' can't be null";
        }
        if ($this->container['route_option'] === null) {
            $invalidProperties[] = "'route_option' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets forward_request_matchrule
     *
     * @return string
     */
    public function getForwardRequestMatchrule()
    {
        return $this->container['forward_request_matchrule'];
    }

    /**
     * Sets forward_request_matchrule
     *
     * @param string $forward_request_matchrule forward_request_matchrule
     *
     * @return self
     */
    public function setForwardRequestMatchrule($forward_request_matchrule)
    {
        if (is_null($forward_request_matchrule)) {
            throw new \InvalidArgumentException('non-nullable forward_request_matchrule cannot be null');
        }
        $this->container['forward_request_matchrule'] = $forward_request_matchrule;

        return $this;
    }

    /**
     * Gets match_from
     *
     * @return string
     */
    public function getMatchFrom()
    {
        return $this->container['match_from'];
    }

    /**
     * Sets match_from
     *
     * @param string $match_from match_from
     *
     * @return self
     */
    public function setMatchFrom($match_from)
    {
        if (is_null($match_from)) {
            throw new \InvalidArgumentException('non-nullable match_from cannot be null');
        }
        $this->container['match_from'] = $match_from;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string $class class
     *
     * @return self
     */
    public function setClass($class)
    {
        if (is_null($class)) {
            throw new \InvalidArgumentException('non-nullable class cannot be null');
        }
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        if (is_null($hostname)) {
            throw new \InvalidArgumentException('non-nullable hostname cannot be null');
        }
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets route_status
     *
     * @return string
     */
    public function getRouteStatus()
    {
        return $this->container['route_status'];
    }

    /**
     * Sets route_status
     *
     * @param string $route_status route_status
     *
     * @return self
     */
    public function setRouteStatus($route_status)
    {
        if (is_null($route_status)) {
            throw new \InvalidArgumentException('non-nullable route_status cannot be null');
        }
        $this->container['route_status'] = $route_status;

        return $this;
    }

    /**
     * Gets route_name
     *
     * @return string
     */
    public function getRouteName()
    {
        return $this->container['route_name'];
    }

    /**
     * Sets route_name
     *
     * @param string $route_name route_name
     *
     * @return self
     */
    public function setRouteName($route_name)
    {
        if (is_null($route_name)) {
            throw new \InvalidArgumentException('non-nullable route_name cannot be null');
        }
        $this->container['route_name'] = $route_name;

        return $this;
    }

    /**
     * Gets route_option
     *
     * @return string
     */
    public function getRouteOption()
    {
        return $this->container['route_option'];
    }

    /**
     * Sets route_option
     *
     * @param string $route_option route_option
     *
     * @return self
     */
    public function setRouteOption($route_option)
    {
        if (is_null($route_option)) {
            throw new \InvalidArgumentException('non-nullable route_option cannot be null');
        }
        $this->container['route_option'] = $route_option;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


