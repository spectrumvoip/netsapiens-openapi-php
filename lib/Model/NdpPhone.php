<?php
/**
 * NdpPhone
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * NdpPhone Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NdpPhone implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NdpPhone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mac' => 'string',
        'model' => 'string',
        'server' => 'string',
        'subscriber_name' => 'string',
        'domain' => 'string',
        'territory' => 'string',
        'dir_inc' => 'string',
        'presence' => 'string',
        'device1' => 'string',
        'device2' => 'string',
        'device3' => 'string',
        'device4' => 'string',
        'device5' => 'string',
        'device6' => 'string',
        'device7' => 'string',
        'device8' => 'string',
        'notes' => 'string',
        'line1_share' => 'string',
        'line2_share' => 'string',
        'line3_share' => 'string',
        'line4_share' => 'string',
        'line5_share' => 'string',
        'line6_share' => 'string',
        'transport' => 'string',
        'overrides' => 'string',
        'device_provisioning_username' => 'string',
        'device_provisioning_password' => 'string',
        'device_provisioning_last_retrieved_datetime' => '\DateTime',
        'date_created' => 'string',
        'registration_expires_time' => 'string',
        'mode' => 'string',
        'global_one_time_pass' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'modified' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mac' => null,
        'model' => null,
        'server' => null,
        'subscriber_name' => null,
        'domain' => null,
        'territory' => null,
        'dir_inc' => null,
        'presence' => null,
        'device1' => null,
        'device2' => null,
        'device3' => null,
        'device4' => null,
        'device5' => null,
        'device6' => null,
        'device7' => null,
        'device8' => null,
        'notes' => null,
        'line1_share' => null,
        'line2_share' => null,
        'line3_share' => null,
        'line4_share' => null,
        'line5_share' => null,
        'line6_share' => null,
        'transport' => null,
        'overrides' => null,
        'device_provisioning_username' => null,
        'device_provisioning_password' => null,
        'device_provisioning_last_retrieved_datetime' => 'date',
        'date_created' => null,
        'registration_expires_time' => null,
        'mode' => null,
        'global_one_time_pass' => null,
        'modified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'mac' => false,
        'model' => false,
        'server' => false,
        'subscriber_name' => false,
        'domain' => false,
        'territory' => false,
        'dir_inc' => false,
        'presence' => false,
        'device1' => false,
        'device2' => false,
        'device3' => false,
        'device4' => false,
        'device5' => false,
        'device6' => false,
        'device7' => false,
        'device8' => false,
        'notes' => false,
        'line1_share' => false,
        'line2_share' => false,
        'line3_share' => false,
        'line4_share' => false,
        'line5_share' => false,
        'line6_share' => false,
        'transport' => false,
        'overrides' => false,
        'device_provisioning_username' => false,
        'device_provisioning_password' => false,
        'device_provisioning_last_retrieved_datetime' => false,
        'date_created' => false,
        'registration_expires_time' => true,
        'mode' => true,
        'global_one_time_pass' => false,
        'modified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mac' => 'mac',
        'model' => 'model',
        'server' => 'server',
        'subscriber_name' => 'subscriber_name',
        'domain' => 'domain',
        'territory' => 'territory',
        'dir_inc' => 'dir_inc',
        'presence' => 'presence',
        'device1' => 'device1',
        'device2' => 'device2',
        'device3' => 'device3',
        'device4' => 'device4',
        'device5' => 'device5',
        'device6' => 'device6',
        'device7' => 'device7',
        'device8' => 'device8',
        'notes' => 'notes',
        'line1_share' => 'line1_share',
        'line2_share' => 'line2_share',
        'line3_share' => 'line3_share',
        'line4_share' => 'line4_share',
        'line5_share' => 'line5_share',
        'line6_share' => 'line6_share',
        'transport' => 'transport',
        'overrides' => 'overrides',
        'device_provisioning_username' => 'device-provisioning-username',
        'device_provisioning_password' => 'device-provisioning-password',
        'device_provisioning_last_retrieved_datetime' => 'device-provisioning-last-retrieved-datetime',
        'date_created' => 'date_created',
        'registration_expires_time' => 'registration_expires_time',
        'mode' => 'mode',
        'global_one_time_pass' => 'global-one-time-pass',
        'modified' => 'modified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mac' => 'setMac',
        'model' => 'setModel',
        'server' => 'setServer',
        'subscriber_name' => 'setSubscriberName',
        'domain' => 'setDomain',
        'territory' => 'setTerritory',
        'dir_inc' => 'setDirInc',
        'presence' => 'setPresence',
        'device1' => 'setDevice1',
        'device2' => 'setDevice2',
        'device3' => 'setDevice3',
        'device4' => 'setDevice4',
        'device5' => 'setDevice5',
        'device6' => 'setDevice6',
        'device7' => 'setDevice7',
        'device8' => 'setDevice8',
        'notes' => 'setNotes',
        'line1_share' => 'setLine1Share',
        'line2_share' => 'setLine2Share',
        'line3_share' => 'setLine3Share',
        'line4_share' => 'setLine4Share',
        'line5_share' => 'setLine5Share',
        'line6_share' => 'setLine6Share',
        'transport' => 'setTransport',
        'overrides' => 'setOverrides',
        'device_provisioning_username' => 'setDeviceProvisioningUsername',
        'device_provisioning_password' => 'setDeviceProvisioningPassword',
        'device_provisioning_last_retrieved_datetime' => 'setDeviceProvisioningLastRetrievedDatetime',
        'date_created' => 'setDateCreated',
        'registration_expires_time' => 'setRegistrationExpiresTime',
        'mode' => 'setMode',
        'global_one_time_pass' => 'setGlobalOneTimePass',
        'modified' => 'setModified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mac' => 'getMac',
        'model' => 'getModel',
        'server' => 'getServer',
        'subscriber_name' => 'getSubscriberName',
        'domain' => 'getDomain',
        'territory' => 'getTerritory',
        'dir_inc' => 'getDirInc',
        'presence' => 'getPresence',
        'device1' => 'getDevice1',
        'device2' => 'getDevice2',
        'device3' => 'getDevice3',
        'device4' => 'getDevice4',
        'device5' => 'getDevice5',
        'device6' => 'getDevice6',
        'device7' => 'getDevice7',
        'device8' => 'getDevice8',
        'notes' => 'getNotes',
        'line1_share' => 'getLine1Share',
        'line2_share' => 'getLine2Share',
        'line3_share' => 'getLine3Share',
        'line4_share' => 'getLine4Share',
        'line5_share' => 'getLine5Share',
        'line6_share' => 'getLine6Share',
        'transport' => 'getTransport',
        'overrides' => 'getOverrides',
        'device_provisioning_username' => 'getDeviceProvisioningUsername',
        'device_provisioning_password' => 'getDeviceProvisioningPassword',
        'device_provisioning_last_retrieved_datetime' => 'getDeviceProvisioningLastRetrievedDatetime',
        'date_created' => 'getDateCreated',
        'registration_expires_time' => 'getRegistrationExpiresTime',
        'mode' => 'getMode',
        'global_one_time_pass' => 'getGlobalOneTimePass',
        'modified' => 'getModified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('mac', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('server', $data ?? [], null);
        $this->setIfExists('subscriber_name', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('territory', $data ?? [], null);
        $this->setIfExists('dir_inc', $data ?? [], null);
        $this->setIfExists('presence', $data ?? [], null);
        $this->setIfExists('device1', $data ?? [], null);
        $this->setIfExists('device2', $data ?? [], null);
        $this->setIfExists('device3', $data ?? [], null);
        $this->setIfExists('device4', $data ?? [], null);
        $this->setIfExists('device5', $data ?? [], null);
        $this->setIfExists('device6', $data ?? [], null);
        $this->setIfExists('device7', $data ?? [], null);
        $this->setIfExists('device8', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('line1_share', $data ?? [], null);
        $this->setIfExists('line2_share', $data ?? [], null);
        $this->setIfExists('line3_share', $data ?? [], null);
        $this->setIfExists('line4_share', $data ?? [], null);
        $this->setIfExists('line5_share', $data ?? [], null);
        $this->setIfExists('line6_share', $data ?? [], null);
        $this->setIfExists('transport', $data ?? [], null);
        $this->setIfExists('overrides', $data ?? [], null);
        $this->setIfExists('device_provisioning_username', $data ?? [], null);
        $this->setIfExists('device_provisioning_password', $data ?? [], null);
        $this->setIfExists('device_provisioning_last_retrieved_datetime', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('registration_expires_time', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('global_one_time_pass', $data ?? [], null);
        $this->setIfExists('modified', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['mac'] === null) {
            $invalidProperties[] = "'mac' can't be null";
        }
        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mac
     *
     * @return string
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string $mac mac
     *
     * @return self
     */
    public function setMac($mac)
    {
        if (is_null($mac)) {
            throw new \InvalidArgumentException('non-nullable mac cannot be null');
        }
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server server
     *
     * @return self
     */
    public function setServer($server)
    {
        if (is_null($server)) {
            throw new \InvalidArgumentException('non-nullable server cannot be null');
        }
        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets subscriber_name
     *
     * @return string|null
     */
    public function getSubscriberName()
    {
        return $this->container['subscriber_name'];
    }

    /**
     * Sets subscriber_name
     *
     * @param string|null $subscriber_name subscriber_name
     *
     * @return self
     */
    public function setSubscriberName($subscriber_name)
    {
        if (is_null($subscriber_name)) {
            throw new \InvalidArgumentException('non-nullable subscriber_name cannot be null');
        }
        $this->container['subscriber_name'] = $subscriber_name;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets territory
     *
     * @return string|null
     */
    public function getTerritory()
    {
        return $this->container['territory'];
    }

    /**
     * Sets territory
     *
     * @param string|null $territory territory
     *
     * @return self
     */
    public function setTerritory($territory)
    {
        if (is_null($territory)) {
            throw new \InvalidArgumentException('non-nullable territory cannot be null');
        }
        $this->container['territory'] = $territory;

        return $this;
    }

    /**
     * Gets dir_inc
     *
     * @return string|null
     */
    public function getDirInc()
    {
        return $this->container['dir_inc'];
    }

    /**
     * Sets dir_inc
     *
     * @param string|null $dir_inc dir_inc
     *
     * @return self
     */
    public function setDirInc($dir_inc)
    {
        if (is_null($dir_inc)) {
            throw new \InvalidArgumentException('non-nullable dir_inc cannot be null');
        }
        $this->container['dir_inc'] = $dir_inc;

        return $this;
    }

    /**
     * Gets presence
     *
     * @return string|null
     */
    public function getPresence()
    {
        return $this->container['presence'];
    }

    /**
     * Sets presence
     *
     * @param string|null $presence presence
     *
     * @return self
     */
    public function setPresence($presence)
    {
        if (is_null($presence)) {
            throw new \InvalidArgumentException('non-nullable presence cannot be null');
        }
        $this->container['presence'] = $presence;

        return $this;
    }

    /**
     * Gets device1
     *
     * @return string|null
     */
    public function getDevice1()
    {
        return $this->container['device1'];
    }

    /**
     * Sets device1
     *
     * @param string|null $device1 device1
     *
     * @return self
     */
    public function setDevice1($device1)
    {
        if (is_null($device1)) {
            throw new \InvalidArgumentException('non-nullable device1 cannot be null');
        }
        $this->container['device1'] = $device1;

        return $this;
    }

    /**
     * Gets device2
     *
     * @return string|null
     */
    public function getDevice2()
    {
        return $this->container['device2'];
    }

    /**
     * Sets device2
     *
     * @param string|null $device2 device2
     *
     * @return self
     */
    public function setDevice2($device2)
    {
        if (is_null($device2)) {
            throw new \InvalidArgumentException('non-nullable device2 cannot be null');
        }
        $this->container['device2'] = $device2;

        return $this;
    }

    /**
     * Gets device3
     *
     * @return string|null
     */
    public function getDevice3()
    {
        return $this->container['device3'];
    }

    /**
     * Sets device3
     *
     * @param string|null $device3 device3
     *
     * @return self
     */
    public function setDevice3($device3)
    {
        if (is_null($device3)) {
            throw new \InvalidArgumentException('non-nullable device3 cannot be null');
        }
        $this->container['device3'] = $device3;

        return $this;
    }

    /**
     * Gets device4
     *
     * @return string|null
     */
    public function getDevice4()
    {
        return $this->container['device4'];
    }

    /**
     * Sets device4
     *
     * @param string|null $device4 device4
     *
     * @return self
     */
    public function setDevice4($device4)
    {
        if (is_null($device4)) {
            throw new \InvalidArgumentException('non-nullable device4 cannot be null');
        }
        $this->container['device4'] = $device4;

        return $this;
    }

    /**
     * Gets device5
     *
     * @return string|null
     */
    public function getDevice5()
    {
        return $this->container['device5'];
    }

    /**
     * Sets device5
     *
     * @param string|null $device5 device5
     *
     * @return self
     */
    public function setDevice5($device5)
    {
        if (is_null($device5)) {
            throw new \InvalidArgumentException('non-nullable device5 cannot be null');
        }
        $this->container['device5'] = $device5;

        return $this;
    }

    /**
     * Gets device6
     *
     * @return string|null
     */
    public function getDevice6()
    {
        return $this->container['device6'];
    }

    /**
     * Sets device6
     *
     * @param string|null $device6 device6
     *
     * @return self
     */
    public function setDevice6($device6)
    {
        if (is_null($device6)) {
            throw new \InvalidArgumentException('non-nullable device6 cannot be null');
        }
        $this->container['device6'] = $device6;

        return $this;
    }

    /**
     * Gets device7
     *
     * @return string|null
     */
    public function getDevice7()
    {
        return $this->container['device7'];
    }

    /**
     * Sets device7
     *
     * @param string|null $device7 device7
     *
     * @return self
     */
    public function setDevice7($device7)
    {
        if (is_null($device7)) {
            throw new \InvalidArgumentException('non-nullable device7 cannot be null');
        }
        $this->container['device7'] = $device7;

        return $this;
    }

    /**
     * Gets device8
     *
     * @return string|null
     */
    public function getDevice8()
    {
        return $this->container['device8'];
    }

    /**
     * Sets device8
     *
     * @param string|null $device8 device8
     *
     * @return self
     */
    public function setDevice8($device8)
    {
        if (is_null($device8)) {
            throw new \InvalidArgumentException('non-nullable device8 cannot be null');
        }
        $this->container['device8'] = $device8;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets line1_share
     *
     * @return string|null
     */
    public function getLine1Share()
    {
        return $this->container['line1_share'];
    }

    /**
     * Sets line1_share
     *
     * @param string|null $line1_share line1_share
     *
     * @return self
     */
    public function setLine1Share($line1_share)
    {
        if (is_null($line1_share)) {
            throw new \InvalidArgumentException('non-nullable line1_share cannot be null');
        }
        $this->container['line1_share'] = $line1_share;

        return $this;
    }

    /**
     * Gets line2_share
     *
     * @return string|null
     */
    public function getLine2Share()
    {
        return $this->container['line2_share'];
    }

    /**
     * Sets line2_share
     *
     * @param string|null $line2_share line2_share
     *
     * @return self
     */
    public function setLine2Share($line2_share)
    {
        if (is_null($line2_share)) {
            throw new \InvalidArgumentException('non-nullable line2_share cannot be null');
        }
        $this->container['line2_share'] = $line2_share;

        return $this;
    }

    /**
     * Gets line3_share
     *
     * @return string|null
     */
    public function getLine3Share()
    {
        return $this->container['line3_share'];
    }

    /**
     * Sets line3_share
     *
     * @param string|null $line3_share line3_share
     *
     * @return self
     */
    public function setLine3Share($line3_share)
    {
        if (is_null($line3_share)) {
            throw new \InvalidArgumentException('non-nullable line3_share cannot be null');
        }
        $this->container['line3_share'] = $line3_share;

        return $this;
    }

    /**
     * Gets line4_share
     *
     * @return string|null
     */
    public function getLine4Share()
    {
        return $this->container['line4_share'];
    }

    /**
     * Sets line4_share
     *
     * @param string|null $line4_share line4_share
     *
     * @return self
     */
    public function setLine4Share($line4_share)
    {
        if (is_null($line4_share)) {
            throw new \InvalidArgumentException('non-nullable line4_share cannot be null');
        }
        $this->container['line4_share'] = $line4_share;

        return $this;
    }

    /**
     * Gets line5_share
     *
     * @return string|null
     */
    public function getLine5Share()
    {
        return $this->container['line5_share'];
    }

    /**
     * Sets line5_share
     *
     * @param string|null $line5_share line5_share
     *
     * @return self
     */
    public function setLine5Share($line5_share)
    {
        if (is_null($line5_share)) {
            throw new \InvalidArgumentException('non-nullable line5_share cannot be null');
        }
        $this->container['line5_share'] = $line5_share;

        return $this;
    }

    /**
     * Gets line6_share
     *
     * @return string|null
     */
    public function getLine6Share()
    {
        return $this->container['line6_share'];
    }

    /**
     * Sets line6_share
     *
     * @param string|null $line6_share line6_share
     *
     * @return self
     */
    public function setLine6Share($line6_share)
    {
        if (is_null($line6_share)) {
            throw new \InvalidArgumentException('non-nullable line6_share cannot be null');
        }
        $this->container['line6_share'] = $line6_share;

        return $this;
    }

    /**
     * Gets transport
     *
     * @return string|null
     */
    public function getTransport()
    {
        return $this->container['transport'];
    }

    /**
     * Sets transport
     *
     * @param string|null $transport transport
     *
     * @return self
     */
    public function setTransport($transport)
    {
        if (is_null($transport)) {
            throw new \InvalidArgumentException('non-nullable transport cannot be null');
        }
        $this->container['transport'] = $transport;

        return $this;
    }

    /**
     * Gets overrides
     *
     * @return string|null
     */
    public function getOverrides()
    {
        return $this->container['overrides'];
    }

    /**
     * Sets overrides
     *
     * @param string|null $overrides overrides
     *
     * @return self
     */
    public function setOverrides($overrides)
    {
        if (is_null($overrides)) {
            throw new \InvalidArgumentException('non-nullable overrides cannot be null');
        }
        $this->container['overrides'] = $overrides;

        return $this;
    }

    /**
     * Gets device_provisioning_username
     *
     * @return string|null
     */
    public function getDeviceProvisioningUsername()
    {
        return $this->container['device_provisioning_username'];
    }

    /**
     * Sets device_provisioning_username
     *
     * @param string|null $device_provisioning_username This is the per device provisioning username used for accessing the config file.
     *
     * @return self
     */
    public function setDeviceProvisioningUsername($device_provisioning_username)
    {
        if (is_null($device_provisioning_username)) {
            throw new \InvalidArgumentException('non-nullable device_provisioning_username cannot be null');
        }
        $this->container['device_provisioning_username'] = $device_provisioning_username;

        return $this;
    }

    /**
     * Gets device_provisioning_password
     *
     * @return string|null
     */
    public function getDeviceProvisioningPassword()
    {
        return $this->container['device_provisioning_password'];
    }

    /**
     * Sets device_provisioning_password
     *
     * @param string|null $device_provisioning_password This is the per device provisioning password used for accessing the config file.
     *
     * @return self
     */
    public function setDeviceProvisioningPassword($device_provisioning_password)
    {
        if (is_null($device_provisioning_password)) {
            throw new \InvalidArgumentException('non-nullable device_provisioning_password cannot be null');
        }
        $this->container['device_provisioning_password'] = $device_provisioning_password;

        return $this;
    }

    /**
     * Gets device_provisioning_last_retrieved_datetime
     *
     * @return \DateTime|null
     */
    public function getDeviceProvisioningLastRetrievedDatetime()
    {
        return $this->container['device_provisioning_last_retrieved_datetime'];
    }

    /**
     * Sets device_provisioning_last_retrieved_datetime
     *
     * @param \DateTime|null $device_provisioning_last_retrieved_datetime device_provisioning_last_retrieved_datetime
     *
     * @return self
     */
    public function setDeviceProvisioningLastRetrievedDatetime($device_provisioning_last_retrieved_datetime)
    {
        if (is_null($device_provisioning_last_retrieved_datetime)) {
            throw new \InvalidArgumentException('non-nullable device_provisioning_last_retrieved_datetime cannot be null');
        }
        $this->container['device_provisioning_last_retrieved_datetime'] = $device_provisioning_last_retrieved_datetime;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets registration_expires_time
     *
     * @return string|null
     */
    public function getRegistrationExpiresTime()
    {
        return $this->container['registration_expires_time'];
    }

    /**
     * Sets registration_expires_time
     *
     * @param string|null $registration_expires_time registration_expires_time
     *
     * @return self
     */
    public function setRegistrationExpiresTime($registration_expires_time)
    {
        if (is_null($registration_expires_time)) {
            array_push($this->openAPINullablesSetToNull, 'registration_expires_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_expires_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_expires_time'] = $registration_expires_time;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            array_push($this->openAPINullablesSetToNull, 'mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets global_one_time_pass
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getGlobalOneTimePass()
    {
        return $this->container['global_one_time_pass'];
    }

    /**
     * Sets global_one_time_pass
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $global_one_time_pass This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setGlobalOneTimePass($global_one_time_pass)
    {
        if (is_null($global_one_time_pass)) {
            throw new \InvalidArgumentException('non-nullable global_one_time_pass cannot be null');
        }
        $this->container['global_one_time_pass'] = $global_one_time_pass;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return bool|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param bool|null $modified modified
     *
     * @return self
     */
    public function setModified($modified)
    {
        if (is_null($modified)) {
            throw new \InvalidArgumentException('non-nullable modified cannot be null');
        }
        $this->container['modified'] = $modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


