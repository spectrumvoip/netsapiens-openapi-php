<?php
/**
 * NdpModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * NdpModel Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NdpModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NdpModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'brand' => 'string',
        'model' => 'string',
        'portal_view' => 'string',
        'device_type' => 'string',
        'ndp_syntax' => 'string',
        'brand_model' => 'string',
        'force_https' => 'string',
        'allow_tftp' => 'string',
        'phone_ext' => 'int',
        'fxs' => 'int',
        'fxo' => 'int',
        'trunk' => 'int',
        'directory' => 'string',
        'presense' => 'string',
        'sla' => 'string',
        'sidecar' => 'string',
        'resync' => 'string',
        'encrypt_support' => 'string',
        'firmware_support' => 'string',
        'firmware_options' => 'string',
        'overrides' => 'string',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'brand' => null,
        'model' => null,
        'portal_view' => null,
        'device_type' => null,
        'ndp_syntax' => null,
        'brand_model' => null,
        'force_https' => null,
        'allow_tftp' => null,
        'phone_ext' => null,
        'fxs' => null,
        'fxo' => null,
        'trunk' => null,
        'directory' => null,
        'presense' => null,
        'sla' => null,
        'sidecar' => null,
        'resync' => null,
        'encrypt_support' => null,
        'firmware_support' => null,
        'firmware_options' => null,
        'overrides' => null,
        'description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'brand' => false,
        'model' => false,
        'portal_view' => false,
        'device_type' => false,
        'ndp_syntax' => false,
        'brand_model' => false,
        'force_https' => false,
        'allow_tftp' => false,
        'phone_ext' => false,
        'fxs' => false,
        'fxo' => false,
        'trunk' => false,
        'directory' => false,
        'presense' => false,
        'sla' => false,
        'sidecar' => false,
        'resync' => false,
        'encrypt_support' => false,
        'firmware_support' => false,
        'firmware_options' => false,
        'overrides' => false,
        'description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'brand' => 'brand',
        'model' => 'model',
        'portal_view' => 'portal_view',
        'device_type' => 'device_type',
        'ndp_syntax' => 'ndp_syntax',
        'brand_model' => 'brand_model',
        'force_https' => 'force_https',
        'allow_tftp' => 'allow_tftp',
        'phone_ext' => 'phone_ext',
        'fxs' => 'fxs',
        'fxo' => 'fxo',
        'trunk' => 'trunk',
        'directory' => 'directory',
        'presense' => 'presense',
        'sla' => 'sla',
        'sidecar' => 'sidecar',
        'resync' => 'resync',
        'encrypt_support' => 'encrypt_support',
        'firmware_support' => 'firmware_support',
        'firmware_options' => 'firmware_options',
        'overrides' => 'overrides',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'brand' => 'setBrand',
        'model' => 'setModel',
        'portal_view' => 'setPortalView',
        'device_type' => 'setDeviceType',
        'ndp_syntax' => 'setNdpSyntax',
        'brand_model' => 'setBrandModel',
        'force_https' => 'setForceHttps',
        'allow_tftp' => 'setAllowTftp',
        'phone_ext' => 'setPhoneExt',
        'fxs' => 'setFxs',
        'fxo' => 'setFxo',
        'trunk' => 'setTrunk',
        'directory' => 'setDirectory',
        'presense' => 'setPresense',
        'sla' => 'setSla',
        'sidecar' => 'setSidecar',
        'resync' => 'setResync',
        'encrypt_support' => 'setEncryptSupport',
        'firmware_support' => 'setFirmwareSupport',
        'firmware_options' => 'setFirmwareOptions',
        'overrides' => 'setOverrides',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'brand' => 'getBrand',
        'model' => 'getModel',
        'portal_view' => 'getPortalView',
        'device_type' => 'getDeviceType',
        'ndp_syntax' => 'getNdpSyntax',
        'brand_model' => 'getBrandModel',
        'force_https' => 'getForceHttps',
        'allow_tftp' => 'getAllowTftp',
        'phone_ext' => 'getPhoneExt',
        'fxs' => 'getFxs',
        'fxo' => 'getFxo',
        'trunk' => 'getTrunk',
        'directory' => 'getDirectory',
        'presense' => 'getPresense',
        'sla' => 'getSla',
        'sidecar' => 'getSidecar',
        'resync' => 'getResync',
        'encrypt_support' => 'getEncryptSupport',
        'firmware_support' => 'getFirmwareSupport',
        'firmware_options' => 'getFirmwareOptions',
        'overrides' => 'getOverrides',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('portal_view', $data ?? [], null);
        $this->setIfExists('device_type', $data ?? [], null);
        $this->setIfExists('ndp_syntax', $data ?? [], null);
        $this->setIfExists('brand_model', $data ?? [], null);
        $this->setIfExists('force_https', $data ?? [], null);
        $this->setIfExists('allow_tftp', $data ?? [], null);
        $this->setIfExists('phone_ext', $data ?? [], null);
        $this->setIfExists('fxs', $data ?? [], null);
        $this->setIfExists('fxo', $data ?? [], null);
        $this->setIfExists('trunk', $data ?? [], null);
        $this->setIfExists('directory', $data ?? [], null);
        $this->setIfExists('presense', $data ?? [], null);
        $this->setIfExists('sla', $data ?? [], null);
        $this->setIfExists('sidecar', $data ?? [], null);
        $this->setIfExists('resync', $data ?? [], null);
        $this->setIfExists('encrypt_support', $data ?? [], null);
        $this->setIfExists('firmware_support', $data ?? [], null);
        $this->setIfExists('firmware_options', $data ?? [], null);
        $this->setIfExists('overrides', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['brand'] === null) {
            $invalidProperties[] = "'brand' can't be null";
        }
        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ($this->container['portal_view'] === null) {
            $invalidProperties[] = "'portal_view' can't be null";
        }
        if ($this->container['device_type'] === null) {
            $invalidProperties[] = "'device_type' can't be null";
        }
        if ($this->container['ndp_syntax'] === null) {
            $invalidProperties[] = "'ndp_syntax' can't be null";
        }
        if ($this->container['brand_model'] === null) {
            $invalidProperties[] = "'brand_model' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets brand
     *
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string $brand brand
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets portal_view
     *
     * @return string
     */
    public function getPortalView()
    {
        return $this->container['portal_view'];
    }

    /**
     * Sets portal_view
     *
     * @param string $portal_view portal_view
     *
     * @return self
     */
    public function setPortalView($portal_view)
    {
        if (is_null($portal_view)) {
            throw new \InvalidArgumentException('non-nullable portal_view cannot be null');
        }
        $this->container['portal_view'] = $portal_view;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return string
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param string $device_type device_type
     *
     * @return self
     */
    public function setDeviceType($device_type)
    {
        if (is_null($device_type)) {
            throw new \InvalidArgumentException('non-nullable device_type cannot be null');
        }
        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets ndp_syntax
     *
     * @return string
     */
    public function getNdpSyntax()
    {
        return $this->container['ndp_syntax'];
    }

    /**
     * Sets ndp_syntax
     *
     * @param string $ndp_syntax ndp_syntax
     *
     * @return self
     */
    public function setNdpSyntax($ndp_syntax)
    {
        if (is_null($ndp_syntax)) {
            throw new \InvalidArgumentException('non-nullable ndp_syntax cannot be null');
        }
        $this->container['ndp_syntax'] = $ndp_syntax;

        return $this;
    }

    /**
     * Gets brand_model
     *
     * @return string
     */
    public function getBrandModel()
    {
        return $this->container['brand_model'];
    }

    /**
     * Sets brand_model
     *
     * @param string $brand_model brand_model
     *
     * @return self
     */
    public function setBrandModel($brand_model)
    {
        if (is_null($brand_model)) {
            throw new \InvalidArgumentException('non-nullable brand_model cannot be null');
        }
        $this->container['brand_model'] = $brand_model;

        return $this;
    }

    /**
     * Gets force_https
     *
     * @return string|null
     */
    public function getForceHttps()
    {
        return $this->container['force_https'];
    }

    /**
     * Sets force_https
     *
     * @param string|null $force_https force_https
     *
     * @return self
     */
    public function setForceHttps($force_https)
    {
        if (is_null($force_https)) {
            throw new \InvalidArgumentException('non-nullable force_https cannot be null');
        }
        $this->container['force_https'] = $force_https;

        return $this;
    }

    /**
     * Gets allow_tftp
     *
     * @return string|null
     */
    public function getAllowTftp()
    {
        return $this->container['allow_tftp'];
    }

    /**
     * Sets allow_tftp
     *
     * @param string|null $allow_tftp allow_tftp
     *
     * @return self
     */
    public function setAllowTftp($allow_tftp)
    {
        if (is_null($allow_tftp)) {
            throw new \InvalidArgumentException('non-nullable allow_tftp cannot be null');
        }
        $this->container['allow_tftp'] = $allow_tftp;

        return $this;
    }

    /**
     * Gets phone_ext
     *
     * @return int|null
     */
    public function getPhoneExt()
    {
        return $this->container['phone_ext'];
    }

    /**
     * Sets phone_ext
     *
     * @param int|null $phone_ext phone_ext
     *
     * @return self
     */
    public function setPhoneExt($phone_ext)
    {
        if (is_null($phone_ext)) {
            throw new \InvalidArgumentException('non-nullable phone_ext cannot be null');
        }
        $this->container['phone_ext'] = $phone_ext;

        return $this;
    }

    /**
     * Gets fxs
     *
     * @return int|null
     */
    public function getFxs()
    {
        return $this->container['fxs'];
    }

    /**
     * Sets fxs
     *
     * @param int|null $fxs fxs
     *
     * @return self
     */
    public function setFxs($fxs)
    {
        if (is_null($fxs)) {
            throw new \InvalidArgumentException('non-nullable fxs cannot be null');
        }
        $this->container['fxs'] = $fxs;

        return $this;
    }

    /**
     * Gets fxo
     *
     * @return int|null
     */
    public function getFxo()
    {
        return $this->container['fxo'];
    }

    /**
     * Sets fxo
     *
     * @param int|null $fxo fxo
     *
     * @return self
     */
    public function setFxo($fxo)
    {
        if (is_null($fxo)) {
            throw new \InvalidArgumentException('non-nullable fxo cannot be null');
        }
        $this->container['fxo'] = $fxo;

        return $this;
    }

    /**
     * Gets trunk
     *
     * @return int|null
     */
    public function getTrunk()
    {
        return $this->container['trunk'];
    }

    /**
     * Sets trunk
     *
     * @param int|null $trunk trunk
     *
     * @return self
     */
    public function setTrunk($trunk)
    {
        if (is_null($trunk)) {
            throw new \InvalidArgumentException('non-nullable trunk cannot be null');
        }
        $this->container['trunk'] = $trunk;

        return $this;
    }

    /**
     * Gets directory
     *
     * @return string|null
     */
    public function getDirectory()
    {
        return $this->container['directory'];
    }

    /**
     * Sets directory
     *
     * @param string|null $directory directory
     *
     * @return self
     */
    public function setDirectory($directory)
    {
        if (is_null($directory)) {
            throw new \InvalidArgumentException('non-nullable directory cannot be null');
        }
        $this->container['directory'] = $directory;

        return $this;
    }

    /**
     * Gets presense
     *
     * @return string|null
     */
    public function getPresense()
    {
        return $this->container['presense'];
    }

    /**
     * Sets presense
     *
     * @param string|null $presense presense
     *
     * @return self
     */
    public function setPresense($presense)
    {
        if (is_null($presense)) {
            throw new \InvalidArgumentException('non-nullable presense cannot be null');
        }
        $this->container['presense'] = $presense;

        return $this;
    }

    /**
     * Gets sla
     *
     * @return string|null
     */
    public function getSla()
    {
        return $this->container['sla'];
    }

    /**
     * Sets sla
     *
     * @param string|null $sla sla
     *
     * @return self
     */
    public function setSla($sla)
    {
        if (is_null($sla)) {
            throw new \InvalidArgumentException('non-nullable sla cannot be null');
        }
        $this->container['sla'] = $sla;

        return $this;
    }

    /**
     * Gets sidecar
     *
     * @return string|null
     */
    public function getSidecar()
    {
        return $this->container['sidecar'];
    }

    /**
     * Sets sidecar
     *
     * @param string|null $sidecar sidecar
     *
     * @return self
     */
    public function setSidecar($sidecar)
    {
        if (is_null($sidecar)) {
            throw new \InvalidArgumentException('non-nullable sidecar cannot be null');
        }
        $this->container['sidecar'] = $sidecar;

        return $this;
    }

    /**
     * Gets resync
     *
     * @return string|null
     */
    public function getResync()
    {
        return $this->container['resync'];
    }

    /**
     * Sets resync
     *
     * @param string|null $resync resync
     *
     * @return self
     */
    public function setResync($resync)
    {
        if (is_null($resync)) {
            throw new \InvalidArgumentException('non-nullable resync cannot be null');
        }
        $this->container['resync'] = $resync;

        return $this;
    }

    /**
     * Gets encrypt_support
     *
     * @return string|null
     */
    public function getEncryptSupport()
    {
        return $this->container['encrypt_support'];
    }

    /**
     * Sets encrypt_support
     *
     * @param string|null $encrypt_support encrypt_support
     *
     * @return self
     */
    public function setEncryptSupport($encrypt_support)
    {
        if (is_null($encrypt_support)) {
            throw new \InvalidArgumentException('non-nullable encrypt_support cannot be null');
        }
        $this->container['encrypt_support'] = $encrypt_support;

        return $this;
    }

    /**
     * Gets firmware_support
     *
     * @return string|null
     */
    public function getFirmwareSupport()
    {
        return $this->container['firmware_support'];
    }

    /**
     * Sets firmware_support
     *
     * @param string|null $firmware_support firmware_support
     *
     * @return self
     */
    public function setFirmwareSupport($firmware_support)
    {
        if (is_null($firmware_support)) {
            throw new \InvalidArgumentException('non-nullable firmware_support cannot be null');
        }
        $this->container['firmware_support'] = $firmware_support;

        return $this;
    }

    /**
     * Gets firmware_options
     *
     * @return string|null
     */
    public function getFirmwareOptions()
    {
        return $this->container['firmware_options'];
    }

    /**
     * Sets firmware_options
     *
     * @param string|null $firmware_options firmware_options
     *
     * @return self
     */
    public function setFirmwareOptions($firmware_options)
    {
        if (is_null($firmware_options)) {
            throw new \InvalidArgumentException('non-nullable firmware_options cannot be null');
        }
        $this->container['firmware_options'] = $firmware_options;

        return $this;
    }

    /**
     * Gets overrides
     *
     * @return string|null
     */
    public function getOverrides()
    {
        return $this->container['overrides'];
    }

    /**
     * Sets overrides
     *
     * @param string|null $overrides overrides
     *
     * @return self
     */
    public function setOverrides($overrides)
    {
        if (is_null($overrides)) {
            throw new \InvalidArgumentException('non-nullable overrides cannot be null');
        }
        $this->container['overrides'] = $overrides;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


