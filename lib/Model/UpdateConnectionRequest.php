<?php
/**
 * UpdateConnectionRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * UpdateConnectionRequest Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateConnectionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateConnection_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'connection_term_match_pattern' => 'string',
        'connection_audio_relay_enabled' => 'string',
        'connection_address' => 'string',
        'dial_plan' => 'string',
        'dial_policy' => 'string',
        'limits_max_active_calls_orig' => 'int',
        'limits_max_active_calls_term' => 'int',
        'limits_max_active_calls_total' => 'int',
        'connection_linked_billing_user' => 'string',
        'connection_sip_registration_username' => 'string',
        'connection_sip_registration_password' => 'string',
        'connection_sip_registration_realm' => 'string',
        'connection_orig_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault',
        'connection_term_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault',
        'connection_translation_request_host' => 'string',
        'connection_translation_destination_host' => 'string',
        'connection_translation_request_user' => 'string',
        'connection_translation_destination_user' => 'string',
        'connection_translation_source_user' => 'string',
        'connection_source_ip_checking_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'connection_include_server_header_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'connection_relay_comfort_noise_enabled' => 'string',
        'connection_pcmu_only_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'connection_enforce_minimum_duration_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'connection_bind_to_alternate_interface_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'connection_block_video_in_sdp_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'connection_sip_get_new_dialog_destination_from' => 'string',
        'connection_sip_get_response_destination_from' => 'string',
        'connection_require_encrypted_audio_enabled' => 'string',
        'connection_sip_transport_protocol' => 'string',
        'connection_check_orig_matching_sip_header' => 'string',
        'connection_sip_session_timer_enabled' => 'string',
        'connection_prevent_rtp_port_change_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'connection_hide_post_dial_delay_with_ringback_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'connection_remote_ringback_handling' => 'string',
        'connection_block_media_in_sip_180_ringing' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'connection_allow_mid_call_uri_updates_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'connection_record_all_calls_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'connection_custom_p_asserted_id_format' => 'string',
        'connection_require_sip_authentication_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'connection_translation_source_host' => 'string',
        'utc_offset' => 'string',
        'time_zone' => 'string',
        'minimum_call_duration_seconds' => 'int',
        'connection_sip_registration_expires_datetime' => 'string',
        'connection_sip_authenticate_as_client_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'connection_is_carrier_trunk' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'call_routing' => '\SpectrumVoip\\\\NetSapiens\Model\CreateConnectionRequestCallRouting',
        'active_calls_max_last_month' => 'int',
        'active_calls_max_this_month' => 'int',
        'active_calls_orig_current' => 'int',
        'active_calls_orig_since_startup' => 'int',
        'active_calls_term_current' => 'int',
        'active_calls_term_since_startup' => 'int',
        'connection_sip_registration_datetime' => 'string',
        'last_modified_datetime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'connection_term_match_pattern' => null,
        'connection_audio_relay_enabled' => null,
        'connection_address' => null,
        'dial_plan' => null,
        'dial_policy' => null,
        'limits_max_active_calls_orig' => null,
        'limits_max_active_calls_term' => null,
        'limits_max_active_calls_total' => null,
        'connection_linked_billing_user' => null,
        'connection_sip_registration_username' => null,
        'connection_sip_registration_password' => null,
        'connection_sip_registration_realm' => null,
        'connection_orig_enabled' => null,
        'connection_term_enabled' => null,
        'connection_translation_request_host' => null,
        'connection_translation_destination_host' => null,
        'connection_translation_request_user' => null,
        'connection_translation_destination_user' => null,
        'connection_translation_source_user' => null,
        'connection_source_ip_checking_enabled' => null,
        'connection_include_server_header_enabled' => null,
        'connection_relay_comfort_noise_enabled' => null,
        'connection_pcmu_only_enabled' => null,
        'connection_enforce_minimum_duration_enabled' => null,
        'connection_bind_to_alternate_interface_enabled' => null,
        'connection_block_video_in_sdp_enabled' => null,
        'connection_sip_get_new_dialog_destination_from' => null,
        'connection_sip_get_response_destination_from' => null,
        'connection_require_encrypted_audio_enabled' => null,
        'connection_sip_transport_protocol' => null,
        'connection_check_orig_matching_sip_header' => null,
        'connection_sip_session_timer_enabled' => null,
        'connection_prevent_rtp_port_change_enabled' => null,
        'connection_hide_post_dial_delay_with_ringback_enabled' => null,
        'connection_remote_ringback_handling' => null,
        'connection_block_media_in_sip_180_ringing' => null,
        'connection_allow_mid_call_uri_updates_enabled' => null,
        'connection_record_all_calls_enabled' => null,
        'connection_custom_p_asserted_id_format' => null,
        'connection_require_sip_authentication_enabled' => null,
        'connection_translation_source_host' => null,
        'utc_offset' => null,
        'time_zone' => null,
        'minimum_call_duration_seconds' => null,
        'connection_sip_registration_expires_datetime' => null,
        'connection_sip_authenticate_as_client_enabled' => null,
        'connection_is_carrier_trunk' => null,
        'call_routing' => null,
        'active_calls_max_last_month' => null,
        'active_calls_max_this_month' => null,
        'active_calls_orig_current' => null,
        'active_calls_orig_since_startup' => null,
        'active_calls_term_current' => null,
        'active_calls_term_since_startup' => null,
        'connection_sip_registration_datetime' => null,
        'last_modified_datetime' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'connection_term_match_pattern' => false,
        'connection_audio_relay_enabled' => false,
        'connection_address' => false,
        'dial_plan' => false,
        'dial_policy' => false,
        'limits_max_active_calls_orig' => false,
        'limits_max_active_calls_term' => false,
        'limits_max_active_calls_total' => false,
        'connection_linked_billing_user' => false,
        'connection_sip_registration_username' => false,
        'connection_sip_registration_password' => false,
        'connection_sip_registration_realm' => false,
        'connection_orig_enabled' => false,
        'connection_term_enabled' => false,
        'connection_translation_request_host' => false,
        'connection_translation_destination_host' => false,
        'connection_translation_request_user' => false,
        'connection_translation_destination_user' => false,
        'connection_translation_source_user' => false,
        'connection_source_ip_checking_enabled' => false,
        'connection_include_server_header_enabled' => false,
        'connection_relay_comfort_noise_enabled' => false,
        'connection_pcmu_only_enabled' => false,
        'connection_enforce_minimum_duration_enabled' => false,
        'connection_bind_to_alternate_interface_enabled' => false,
        'connection_block_video_in_sdp_enabled' => false,
        'connection_sip_get_new_dialog_destination_from' => false,
        'connection_sip_get_response_destination_from' => false,
        'connection_require_encrypted_audio_enabled' => false,
        'connection_sip_transport_protocol' => false,
        'connection_check_orig_matching_sip_header' => false,
        'connection_sip_session_timer_enabled' => false,
        'connection_prevent_rtp_port_change_enabled' => false,
        'connection_hide_post_dial_delay_with_ringback_enabled' => false,
        'connection_remote_ringback_handling' => false,
        'connection_block_media_in_sip_180_ringing' => false,
        'connection_allow_mid_call_uri_updates_enabled' => false,
        'connection_record_all_calls_enabled' => false,
        'connection_custom_p_asserted_id_format' => false,
        'connection_require_sip_authentication_enabled' => false,
        'connection_translation_source_host' => false,
        'utc_offset' => false,
        'time_zone' => false,
        'minimum_call_duration_seconds' => false,
        'connection_sip_registration_expires_datetime' => false,
        'connection_sip_authenticate_as_client_enabled' => false,
        'connection_is_carrier_trunk' => false,
        'call_routing' => true,
        'active_calls_max_last_month' => false,
        'active_calls_max_this_month' => false,
        'active_calls_orig_current' => false,
        'active_calls_orig_since_startup' => false,
        'active_calls_term_current' => false,
        'active_calls_term_since_startup' => false,
        'connection_sip_registration_datetime' => false,
        'last_modified_datetime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'connection_term_match_pattern' => 'connection-term-match-pattern',
        'connection_audio_relay_enabled' => 'connection-audio-relay-enabled',
        'connection_address' => 'connection-address',
        'dial_plan' => 'dial-plan',
        'dial_policy' => 'dial-policy',
        'limits_max_active_calls_orig' => 'limits-max-active-calls-orig',
        'limits_max_active_calls_term' => 'limits-max-active-calls-term',
        'limits_max_active_calls_total' => 'limits-max-active-calls-total',
        'connection_linked_billing_user' => 'connection-linked-billing-user',
        'connection_sip_registration_username' => 'connection-sip-registration-username',
        'connection_sip_registration_password' => 'connection-sip-registration-password',
        'connection_sip_registration_realm' => 'connection-sip-registration-realm',
        'connection_orig_enabled' => 'connection-orig-enabled',
        'connection_term_enabled' => 'connection-term-enabled',
        'connection_translation_request_host' => 'connection-translation-request-host',
        'connection_translation_destination_host' => 'connection-translation-destination-host',
        'connection_translation_request_user' => 'connection-translation-request-user',
        'connection_translation_destination_user' => 'connection-translation-destination-user',
        'connection_translation_source_user' => 'connection-translation-source-user',
        'connection_source_ip_checking_enabled' => 'connection-source-ip-checking-enabled',
        'connection_include_server_header_enabled' => 'connection-include-server-header-enabled',
        'connection_relay_comfort_noise_enabled' => 'connection-relay-comfort-noise-enabled',
        'connection_pcmu_only_enabled' => 'connection-pcmu-only-enabled',
        'connection_enforce_minimum_duration_enabled' => 'connection-enforce-minimum-duration-enabled',
        'connection_bind_to_alternate_interface_enabled' => 'connection-bind-to-alternate-interface-enabled',
        'connection_block_video_in_sdp_enabled' => 'connection-block-video-in-sdp-enabled',
        'connection_sip_get_new_dialog_destination_from' => 'connection-sip-get-new-dialog-destination-from',
        'connection_sip_get_response_destination_from' => 'connection-sip-get-response-destination-from',
        'connection_require_encrypted_audio_enabled' => 'connection-require-encrypted-audio-enabled',
        'connection_sip_transport_protocol' => 'connection-sip-transport-protocol',
        'connection_check_orig_matching_sip_header' => 'connection-check-orig-matching-sip-header',
        'connection_sip_session_timer_enabled' => 'connection-sip-session-timer-enabled',
        'connection_prevent_rtp_port_change_enabled' => 'connection-prevent-rtp-port-change-enabled',
        'connection_hide_post_dial_delay_with_ringback_enabled' => 'connection-hide-post-dial-delay-with-ringback-enabled',
        'connection_remote_ringback_handling' => 'connection-remote-ringback-handling',
        'connection_block_media_in_sip_180_ringing' => 'connection-block-media-in-sip-180-ringing',
        'connection_allow_mid_call_uri_updates_enabled' => 'connection-allow-mid-call-uri-updates-enabled',
        'connection_record_all_calls_enabled' => 'connection-record-all-calls-enabled',
        'connection_custom_p_asserted_id_format' => 'connection-custom-p-asserted-id-format',
        'connection_require_sip_authentication_enabled' => 'connection-require-sip-authentication-enabled',
        'connection_translation_source_host' => 'connection-translation-source-host',
        'utc_offset' => 'utc-offset',
        'time_zone' => 'time-zone',
        'minimum_call_duration_seconds' => 'minimum-call-duration-seconds',
        'connection_sip_registration_expires_datetime' => 'connection-sip-registration-expires-datetime',
        'connection_sip_authenticate_as_client_enabled' => 'connection-sip-authenticate-as-client-enabled',
        'connection_is_carrier_trunk' => 'connection-is-carrier-trunk',
        'call_routing' => 'call-routing',
        'active_calls_max_last_month' => 'active-calls-max-last-month',
        'active_calls_max_this_month' => 'active-calls-max-this-month',
        'active_calls_orig_current' => 'active-calls-orig-current',
        'active_calls_orig_since_startup' => 'active-calls-orig-since-startup',
        'active_calls_term_current' => 'active-calls-term-current',
        'active_calls_term_since_startup' => 'active-calls-term-since-startup',
        'connection_sip_registration_datetime' => 'connection-sip-registration-datetime',
        'last_modified_datetime' => 'last-modified-datetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'connection_term_match_pattern' => 'setConnectionTermMatchPattern',
        'connection_audio_relay_enabled' => 'setConnectionAudioRelayEnabled',
        'connection_address' => 'setConnectionAddress',
        'dial_plan' => 'setDialPlan',
        'dial_policy' => 'setDialPolicy',
        'limits_max_active_calls_orig' => 'setLimitsMaxActiveCallsOrig',
        'limits_max_active_calls_term' => 'setLimitsMaxActiveCallsTerm',
        'limits_max_active_calls_total' => 'setLimitsMaxActiveCallsTotal',
        'connection_linked_billing_user' => 'setConnectionLinkedBillingUser',
        'connection_sip_registration_username' => 'setConnectionSipRegistrationUsername',
        'connection_sip_registration_password' => 'setConnectionSipRegistrationPassword',
        'connection_sip_registration_realm' => 'setConnectionSipRegistrationRealm',
        'connection_orig_enabled' => 'setConnectionOrigEnabled',
        'connection_term_enabled' => 'setConnectionTermEnabled',
        'connection_translation_request_host' => 'setConnectionTranslationRequestHost',
        'connection_translation_destination_host' => 'setConnectionTranslationDestinationHost',
        'connection_translation_request_user' => 'setConnectionTranslationRequestUser',
        'connection_translation_destination_user' => 'setConnectionTranslationDestinationUser',
        'connection_translation_source_user' => 'setConnectionTranslationSourceUser',
        'connection_source_ip_checking_enabled' => 'setConnectionSourceIpCheckingEnabled',
        'connection_include_server_header_enabled' => 'setConnectionIncludeServerHeaderEnabled',
        'connection_relay_comfort_noise_enabled' => 'setConnectionRelayComfortNoiseEnabled',
        'connection_pcmu_only_enabled' => 'setConnectionPcmuOnlyEnabled',
        'connection_enforce_minimum_duration_enabled' => 'setConnectionEnforceMinimumDurationEnabled',
        'connection_bind_to_alternate_interface_enabled' => 'setConnectionBindToAlternateInterfaceEnabled',
        'connection_block_video_in_sdp_enabled' => 'setConnectionBlockVideoInSdpEnabled',
        'connection_sip_get_new_dialog_destination_from' => 'setConnectionSipGetNewDialogDestinationFrom',
        'connection_sip_get_response_destination_from' => 'setConnectionSipGetResponseDestinationFrom',
        'connection_require_encrypted_audio_enabled' => 'setConnectionRequireEncryptedAudioEnabled',
        'connection_sip_transport_protocol' => 'setConnectionSipTransportProtocol',
        'connection_check_orig_matching_sip_header' => 'setConnectionCheckOrigMatchingSipHeader',
        'connection_sip_session_timer_enabled' => 'setConnectionSipSessionTimerEnabled',
        'connection_prevent_rtp_port_change_enabled' => 'setConnectionPreventRtpPortChangeEnabled',
        'connection_hide_post_dial_delay_with_ringback_enabled' => 'setConnectionHidePostDialDelayWithRingbackEnabled',
        'connection_remote_ringback_handling' => 'setConnectionRemoteRingbackHandling',
        'connection_block_media_in_sip_180_ringing' => 'setConnectionBlockMediaInSip180Ringing',
        'connection_allow_mid_call_uri_updates_enabled' => 'setConnectionAllowMidCallUriUpdatesEnabled',
        'connection_record_all_calls_enabled' => 'setConnectionRecordAllCallsEnabled',
        'connection_custom_p_asserted_id_format' => 'setConnectionCustomPAssertedIdFormat',
        'connection_require_sip_authentication_enabled' => 'setConnectionRequireSipAuthenticationEnabled',
        'connection_translation_source_host' => 'setConnectionTranslationSourceHost',
        'utc_offset' => 'setUtcOffset',
        'time_zone' => 'setTimeZone',
        'minimum_call_duration_seconds' => 'setMinimumCallDurationSeconds',
        'connection_sip_registration_expires_datetime' => 'setConnectionSipRegistrationExpiresDatetime',
        'connection_sip_authenticate_as_client_enabled' => 'setConnectionSipAuthenticateAsClientEnabled',
        'connection_is_carrier_trunk' => 'setConnectionIsCarrierTrunk',
        'call_routing' => 'setCallRouting',
        'active_calls_max_last_month' => 'setActiveCallsMaxLastMonth',
        'active_calls_max_this_month' => 'setActiveCallsMaxThisMonth',
        'active_calls_orig_current' => 'setActiveCallsOrigCurrent',
        'active_calls_orig_since_startup' => 'setActiveCallsOrigSinceStartup',
        'active_calls_term_current' => 'setActiveCallsTermCurrent',
        'active_calls_term_since_startup' => 'setActiveCallsTermSinceStartup',
        'connection_sip_registration_datetime' => 'setConnectionSipRegistrationDatetime',
        'last_modified_datetime' => 'setLastModifiedDatetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'connection_term_match_pattern' => 'getConnectionTermMatchPattern',
        'connection_audio_relay_enabled' => 'getConnectionAudioRelayEnabled',
        'connection_address' => 'getConnectionAddress',
        'dial_plan' => 'getDialPlan',
        'dial_policy' => 'getDialPolicy',
        'limits_max_active_calls_orig' => 'getLimitsMaxActiveCallsOrig',
        'limits_max_active_calls_term' => 'getLimitsMaxActiveCallsTerm',
        'limits_max_active_calls_total' => 'getLimitsMaxActiveCallsTotal',
        'connection_linked_billing_user' => 'getConnectionLinkedBillingUser',
        'connection_sip_registration_username' => 'getConnectionSipRegistrationUsername',
        'connection_sip_registration_password' => 'getConnectionSipRegistrationPassword',
        'connection_sip_registration_realm' => 'getConnectionSipRegistrationRealm',
        'connection_orig_enabled' => 'getConnectionOrigEnabled',
        'connection_term_enabled' => 'getConnectionTermEnabled',
        'connection_translation_request_host' => 'getConnectionTranslationRequestHost',
        'connection_translation_destination_host' => 'getConnectionTranslationDestinationHost',
        'connection_translation_request_user' => 'getConnectionTranslationRequestUser',
        'connection_translation_destination_user' => 'getConnectionTranslationDestinationUser',
        'connection_translation_source_user' => 'getConnectionTranslationSourceUser',
        'connection_source_ip_checking_enabled' => 'getConnectionSourceIpCheckingEnabled',
        'connection_include_server_header_enabled' => 'getConnectionIncludeServerHeaderEnabled',
        'connection_relay_comfort_noise_enabled' => 'getConnectionRelayComfortNoiseEnabled',
        'connection_pcmu_only_enabled' => 'getConnectionPcmuOnlyEnabled',
        'connection_enforce_minimum_duration_enabled' => 'getConnectionEnforceMinimumDurationEnabled',
        'connection_bind_to_alternate_interface_enabled' => 'getConnectionBindToAlternateInterfaceEnabled',
        'connection_block_video_in_sdp_enabled' => 'getConnectionBlockVideoInSdpEnabled',
        'connection_sip_get_new_dialog_destination_from' => 'getConnectionSipGetNewDialogDestinationFrom',
        'connection_sip_get_response_destination_from' => 'getConnectionSipGetResponseDestinationFrom',
        'connection_require_encrypted_audio_enabled' => 'getConnectionRequireEncryptedAudioEnabled',
        'connection_sip_transport_protocol' => 'getConnectionSipTransportProtocol',
        'connection_check_orig_matching_sip_header' => 'getConnectionCheckOrigMatchingSipHeader',
        'connection_sip_session_timer_enabled' => 'getConnectionSipSessionTimerEnabled',
        'connection_prevent_rtp_port_change_enabled' => 'getConnectionPreventRtpPortChangeEnabled',
        'connection_hide_post_dial_delay_with_ringback_enabled' => 'getConnectionHidePostDialDelayWithRingbackEnabled',
        'connection_remote_ringback_handling' => 'getConnectionRemoteRingbackHandling',
        'connection_block_media_in_sip_180_ringing' => 'getConnectionBlockMediaInSip180Ringing',
        'connection_allow_mid_call_uri_updates_enabled' => 'getConnectionAllowMidCallUriUpdatesEnabled',
        'connection_record_all_calls_enabled' => 'getConnectionRecordAllCallsEnabled',
        'connection_custom_p_asserted_id_format' => 'getConnectionCustomPAssertedIdFormat',
        'connection_require_sip_authentication_enabled' => 'getConnectionRequireSipAuthenticationEnabled',
        'connection_translation_source_host' => 'getConnectionTranslationSourceHost',
        'utc_offset' => 'getUtcOffset',
        'time_zone' => 'getTimeZone',
        'minimum_call_duration_seconds' => 'getMinimumCallDurationSeconds',
        'connection_sip_registration_expires_datetime' => 'getConnectionSipRegistrationExpiresDatetime',
        'connection_sip_authenticate_as_client_enabled' => 'getConnectionSipAuthenticateAsClientEnabled',
        'connection_is_carrier_trunk' => 'getConnectionIsCarrierTrunk',
        'call_routing' => 'getCallRouting',
        'active_calls_max_last_month' => 'getActiveCallsMaxLastMonth',
        'active_calls_max_this_month' => 'getActiveCallsMaxThisMonth',
        'active_calls_orig_current' => 'getActiveCallsOrigCurrent',
        'active_calls_orig_since_startup' => 'getActiveCallsOrigSinceStartup',
        'active_calls_term_current' => 'getActiveCallsTermCurrent',
        'active_calls_term_since_startup' => 'getActiveCallsTermSinceStartup',
        'connection_sip_registration_datetime' => 'getConnectionSipRegistrationDatetime',
        'last_modified_datetime' => 'getLastModifiedDatetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('connection_term_match_pattern', $data ?? [], null);
        $this->setIfExists('connection_audio_relay_enabled', $data ?? [], null);
        $this->setIfExists('connection_address', $data ?? [], null);
        $this->setIfExists('dial_plan', $data ?? [], null);
        $this->setIfExists('dial_policy', $data ?? [], null);
        $this->setIfExists('limits_max_active_calls_orig', $data ?? [], null);
        $this->setIfExists('limits_max_active_calls_term', $data ?? [], null);
        $this->setIfExists('limits_max_active_calls_total', $data ?? [], null);
        $this->setIfExists('connection_linked_billing_user', $data ?? [], null);
        $this->setIfExists('connection_sip_registration_username', $data ?? [], null);
        $this->setIfExists('connection_sip_registration_password', $data ?? [], null);
        $this->setIfExists('connection_sip_registration_realm', $data ?? [], null);
        $this->setIfExists('connection_orig_enabled', $data ?? [], null);
        $this->setIfExists('connection_term_enabled', $data ?? [], null);
        $this->setIfExists('connection_translation_request_host', $data ?? [], null);
        $this->setIfExists('connection_translation_destination_host', $data ?? [], '''');
        $this->setIfExists('connection_translation_request_user', $data ?? [], '''');
        $this->setIfExists('connection_translation_destination_user', $data ?? [], '''');
        $this->setIfExists('connection_translation_source_user', $data ?? [], '''');
        $this->setIfExists('connection_source_ip_checking_enabled', $data ?? [], null);
        $this->setIfExists('connection_include_server_header_enabled', $data ?? [], null);
        $this->setIfExists('connection_relay_comfort_noise_enabled', $data ?? [], 'system-default');
        $this->setIfExists('connection_pcmu_only_enabled', $data ?? [], null);
        $this->setIfExists('connection_enforce_minimum_duration_enabled', $data ?? [], null);
        $this->setIfExists('connection_bind_to_alternate_interface_enabled', $data ?? [], null);
        $this->setIfExists('connection_block_video_in_sdp_enabled', $data ?? [], null);
        $this->setIfExists('connection_sip_get_new_dialog_destination_from', $data ?? [], 'default-ip');
        $this->setIfExists('connection_sip_get_response_destination_from', $data ?? [], 'default-ip');
        $this->setIfExists('connection_require_encrypted_audio_enabled', $data ?? [], 'no');
        $this->setIfExists('connection_sip_transport_protocol', $data ?? [], 'UDP');
        $this->setIfExists('connection_check_orig_matching_sip_header', $data ?? [], 'from');
        $this->setIfExists('connection_sip_session_timer_enabled', $data ?? [], 'system-default');
        $this->setIfExists('connection_prevent_rtp_port_change_enabled', $data ?? [], null);
        $this->setIfExists('connection_hide_post_dial_delay_with_ringback_enabled', $data ?? [], null);
        $this->setIfExists('connection_remote_ringback_handling', $data ?? [], 'allowed');
        $this->setIfExists('connection_block_media_in_sip_180_ringing', $data ?? [], null);
        $this->setIfExists('connection_allow_mid_call_uri_updates_enabled', $data ?? [], null);
        $this->setIfExists('connection_record_all_calls_enabled', $data ?? [], null);
        $this->setIfExists('connection_custom_p_asserted_id_format', $data ?? [], null);
        $this->setIfExists('connection_require_sip_authentication_enabled', $data ?? [], null);
        $this->setIfExists('connection_translation_source_host', $data ?? [], null);
        $this->setIfExists('utc_offset', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('minimum_call_duration_seconds', $data ?? [], 0);
        $this->setIfExists('connection_sip_registration_expires_datetime', $data ?? [], null);
        $this->setIfExists('connection_sip_authenticate_as_client_enabled', $data ?? [], null);
        $this->setIfExists('connection_is_carrier_trunk', $data ?? [], null);
        $this->setIfExists('call_routing', $data ?? [], null);
        $this->setIfExists('active_calls_max_last_month', $data ?? [], null);
        $this->setIfExists('active_calls_max_this_month', $data ?? [], null);
        $this->setIfExists('active_calls_orig_current', $data ?? [], null);
        $this->setIfExists('active_calls_orig_since_startup', $data ?? [], null);
        $this->setIfExists('active_calls_term_current', $data ?? [], null);
        $this->setIfExists('active_calls_term_since_startup', $data ?? [], null);
        $this->setIfExists('connection_sip_registration_datetime', $data ?? [], null);
        $this->setIfExists('last_modified_datetime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description This is the connection's description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets connection_term_match_pattern
     *
     * @return string|null
     */
    public function getConnectionTermMatchPattern()
    {
        return $this->container['connection_term_match_pattern'];
    }

    /**
     * Sets connection_term_match_pattern
     *
     * @param string|null $connection_term_match_pattern Defaulted to connection-orig-match-pattern
     *
     * @return self
     */
    public function setConnectionTermMatchPattern($connection_term_match_pattern)
    {
        if (is_null($connection_term_match_pattern)) {
            throw new \InvalidArgumentException('non-nullable connection_term_match_pattern cannot be null');
        }
        $this->container['connection_term_match_pattern'] = $connection_term_match_pattern;

        return $this;
    }

    /**
     * Gets connection_audio_relay_enabled
     *
     * @return string|null
     */
    public function getConnectionAudioRelayEnabled()
    {
        return $this->container['connection_audio_relay_enabled'];
    }

    /**
     * Sets connection_audio_relay_enabled
     *
     * @param string|null $connection_audio_relay_enabled Available options are \"yes\", \"optional\", \"no\". \"Yes\" will set the connection audio realy to \"automatic\". \"Optional\" will set it to \"none\". \"No\" will set it to \"never\". Default will be \"yes\".
     *
     * @return self
     */
    public function setConnectionAudioRelayEnabled($connection_audio_relay_enabled)
    {
        if (is_null($connection_audio_relay_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_audio_relay_enabled cannot be null');
        }
        $this->container['connection_audio_relay_enabled'] = $connection_audio_relay_enabled;

        return $this;
    }

    /**
     * Gets connection_address
     *
     * @return string|null
     */
    public function getConnectionAddress()
    {
        return $this->container['connection_address'];
    }

    /**
     * Sets connection_address
     *
     * @param string|null $connection_address This is the connection's address
     *
     * @return self
     */
    public function setConnectionAddress($connection_address)
    {
        if (is_null($connection_address)) {
            throw new \InvalidArgumentException('non-nullable connection_address cannot be null');
        }
        $this->container['connection_address'] = $connection_address;

        return $this;
    }

    /**
     * Gets dial_plan
     *
     * @return string|null
     */
    public function getDialPlan()
    {
        return $this->container['dial_plan'];
    }

    /**
     * Sets dial_plan
     *
     * @param string|null $dial_plan This is the connection's dial plan
     *
     * @return self
     */
    public function setDialPlan($dial_plan)
    {
        if (is_null($dial_plan)) {
            throw new \InvalidArgumentException('non-nullable dial_plan cannot be null');
        }
        $this->container['dial_plan'] = $dial_plan;

        return $this;
    }

    /**
     * Gets dial_policy
     *
     * @return string|null
     */
    public function getDialPolicy()
    {
        return $this->container['dial_policy'];
    }

    /**
     * Sets dial_policy
     *
     * @param string|null $dial_policy This is the connection's dial policy
     *
     * @return self
     */
    public function setDialPolicy($dial_policy)
    {
        if (is_null($dial_policy)) {
            throw new \InvalidArgumentException('non-nullable dial_policy cannot be null');
        }
        $this->container['dial_policy'] = $dial_policy;

        return $this;
    }

    /**
     * Gets limits_max_active_calls_orig
     *
     * @return int|null
     */
    public function getLimitsMaxActiveCallsOrig()
    {
        return $this->container['limits_max_active_calls_orig'];
    }

    /**
     * Sets limits_max_active_calls_orig
     *
     * @param int|null $limits_max_active_calls_orig This is the connection's limit of maximum originating calls
     *
     * @return self
     */
    public function setLimitsMaxActiveCallsOrig($limits_max_active_calls_orig)
    {
        if (is_null($limits_max_active_calls_orig)) {
            throw new \InvalidArgumentException('non-nullable limits_max_active_calls_orig cannot be null');
        }
        $this->container['limits_max_active_calls_orig'] = $limits_max_active_calls_orig;

        return $this;
    }

    /**
     * Gets limits_max_active_calls_term
     *
     * @return int|null
     */
    public function getLimitsMaxActiveCallsTerm()
    {
        return $this->container['limits_max_active_calls_term'];
    }

    /**
     * Sets limits_max_active_calls_term
     *
     * @param int|null $limits_max_active_calls_term This is the connection's limit of maximum terminating calls
     *
     * @return self
     */
    public function setLimitsMaxActiveCallsTerm($limits_max_active_calls_term)
    {
        if (is_null($limits_max_active_calls_term)) {
            throw new \InvalidArgumentException('non-nullable limits_max_active_calls_term cannot be null');
        }
        $this->container['limits_max_active_calls_term'] = $limits_max_active_calls_term;

        return $this;
    }

    /**
     * Gets limits_max_active_calls_total
     *
     * @return int|null
     */
    public function getLimitsMaxActiveCallsTotal()
    {
        return $this->container['limits_max_active_calls_total'];
    }

    /**
     * Sets limits_max_active_calls_total
     *
     * @param int|null $limits_max_active_calls_total This is the connection's limit of maximum total calls
     *
     * @return self
     */
    public function setLimitsMaxActiveCallsTotal($limits_max_active_calls_total)
    {
        if (is_null($limits_max_active_calls_total)) {
            throw new \InvalidArgumentException('non-nullable limits_max_active_calls_total cannot be null');
        }
        $this->container['limits_max_active_calls_total'] = $limits_max_active_calls_total;

        return $this;
    }

    /**
     * Gets connection_linked_billing_user
     *
     * @return string|null
     */
    public function getConnectionLinkedBillingUser()
    {
        return $this->container['connection_linked_billing_user'];
    }

    /**
     * Sets connection_linked_billing_user
     *
     * @param string|null $connection_linked_billing_user This is the connection's linked billing user
     *
     * @return self
     */
    public function setConnectionLinkedBillingUser($connection_linked_billing_user)
    {
        if (is_null($connection_linked_billing_user)) {
            throw new \InvalidArgumentException('non-nullable connection_linked_billing_user cannot be null');
        }
        $this->container['connection_linked_billing_user'] = $connection_linked_billing_user;

        return $this;
    }

    /**
     * Gets connection_sip_registration_username
     *
     * @return string|null
     */
    public function getConnectionSipRegistrationUsername()
    {
        return $this->container['connection_sip_registration_username'];
    }

    /**
     * Sets connection_sip_registration_username
     *
     * @param string|null $connection_sip_registration_username This is the connection's authorized username
     *
     * @return self
     */
    public function setConnectionSipRegistrationUsername($connection_sip_registration_username)
    {
        if (is_null($connection_sip_registration_username)) {
            throw new \InvalidArgumentException('non-nullable connection_sip_registration_username cannot be null');
        }
        $this->container['connection_sip_registration_username'] = $connection_sip_registration_username;

        return $this;
    }

    /**
     * Gets connection_sip_registration_password
     *
     * @return string|null
     */
    public function getConnectionSipRegistrationPassword()
    {
        return $this->container['connection_sip_registration_password'];
    }

    /**
     * Sets connection_sip_registration_password
     *
     * @param string|null $connection_sip_registration_password This is the connection's password
     *
     * @return self
     */
    public function setConnectionSipRegistrationPassword($connection_sip_registration_password)
    {
        if (is_null($connection_sip_registration_password)) {
            throw new \InvalidArgumentException('non-nullable connection_sip_registration_password cannot be null');
        }
        $this->container['connection_sip_registration_password'] = $connection_sip_registration_password;

        return $this;
    }

    /**
     * Gets connection_sip_registration_realm
     *
     * @return string|null
     */
    public function getConnectionSipRegistrationRealm()
    {
        return $this->container['connection_sip_registration_realm'];
    }

    /**
     * Sets connection_sip_registration_realm
     *
     * @param string|null $connection_sip_registration_realm This is the connection's authentication realm
     *
     * @return self
     */
    public function setConnectionSipRegistrationRealm($connection_sip_registration_realm)
    {
        if (is_null($connection_sip_registration_realm)) {
            throw new \InvalidArgumentException('non-nullable connection_sip_registration_realm cannot be null');
        }
        $this->container['connection_sip_registration_realm'] = $connection_sip_registration_realm;

        return $this;
    }

    /**
     * Gets connection_orig_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null
     */
    public function getConnectionOrigEnabled()
    {
        return $this->container['connection_orig_enabled'];
    }

    /**
     * Sets connection_orig_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null $connection_orig_enabled When enabled this rule is available to be user though it may not be active as the timeframe might not match the current time or there could be other hihger priority timeframes.
     *
     * @return self
     */
    public function setConnectionOrigEnabled($connection_orig_enabled)
    {
        if (is_null($connection_orig_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_orig_enabled cannot be null');
        }
        $this->container['connection_orig_enabled'] = $connection_orig_enabled;

        return $this;
    }

    /**
     * Gets connection_term_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null
     */
    public function getConnectionTermEnabled()
    {
        return $this->container['connection_term_enabled'];
    }

    /**
     * Sets connection_term_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null $connection_term_enabled When enabled this rule is available to be user though it may not be active as the timeframe might not match the current time or there could be other hihger priority timeframes.
     *
     * @return self
     */
    public function setConnectionTermEnabled($connection_term_enabled)
    {
        if (is_null($connection_term_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_term_enabled cannot be null');
        }
        $this->container['connection_term_enabled'] = $connection_term_enabled;

        return $this;
    }

    /**
     * Gets connection_translation_request_host
     *
     * @return string|null
     */
    public function getConnectionTranslationRequestHost()
    {
        return $this->container['connection_translation_request_host'];
    }

    /**
     * Sets connection_translation_request_host
     *
     * @param string|null $connection_translation_request_host This is the connection's translation request host.
     *
     * @return self
     */
    public function setConnectionTranslationRequestHost($connection_translation_request_host)
    {
        if (is_null($connection_translation_request_host)) {
            throw new \InvalidArgumentException('non-nullable connection_translation_request_host cannot be null');
        }
        $this->container['connection_translation_request_host'] = $connection_translation_request_host;

        return $this;
    }

    /**
     * Gets connection_translation_destination_host
     *
     * @return string|null
     */
    public function getConnectionTranslationDestinationHost()
    {
        return $this->container['connection_translation_destination_host'];
    }

    /**
     * Sets connection_translation_destination_host
     *
     * @param string|null $connection_translation_destination_host This is the connection's translation destination host. This typically comes from the connection-orig-match-pattern. Defaults to ''
     *
     * @return self
     */
    public function setConnectionTranslationDestinationHost($connection_translation_destination_host)
    {
        if (is_null($connection_translation_destination_host)) {
            throw new \InvalidArgumentException('non-nullable connection_translation_destination_host cannot be null');
        }
        $this->container['connection_translation_destination_host'] = $connection_translation_destination_host;

        return $this;
    }

    /**
     * Gets connection_translation_request_user
     *
     * @return string|null
     */
    public function getConnectionTranslationRequestUser()
    {
        return $this->container['connection_translation_request_user'];
    }

    /**
     * Sets connection_translation_request_user
     *
     * @param string|null $connection_translation_request_user This is the connection's translation request user. This is typically set to [*]. Defaults to \"\"
     *
     * @return self
     */
    public function setConnectionTranslationRequestUser($connection_translation_request_user)
    {
        if (is_null($connection_translation_request_user)) {
            throw new \InvalidArgumentException('non-nullable connection_translation_request_user cannot be null');
        }
        $this->container['connection_translation_request_user'] = $connection_translation_request_user;

        return $this;
    }

    /**
     * Gets connection_translation_destination_user
     *
     * @return string|null
     */
    public function getConnectionTranslationDestinationUser()
    {
        return $this->container['connection_translation_destination_user'];
    }

    /**
     * Sets connection_translation_destination_user
     *
     * @param string|null $connection_translation_destination_user This is the connection's translation destination user. This is typically set to [*]. Defaults to \"\"
     *
     * @return self
     */
    public function setConnectionTranslationDestinationUser($connection_translation_destination_user)
    {
        if (is_null($connection_translation_destination_user)) {
            throw new \InvalidArgumentException('non-nullable connection_translation_destination_user cannot be null');
        }
        $this->container['connection_translation_destination_user'] = $connection_translation_destination_user;

        return $this;
    }

    /**
     * Gets connection_translation_source_user
     *
     * @return string|null
     */
    public function getConnectionTranslationSourceUser()
    {
        return $this->container['connection_translation_source_user'];
    }

    /**
     * Sets connection_translation_source_user
     *
     * @param string|null $connection_translation_source_user This is the connection's translation source user. This is typically set to [*]. Defaults to \"\"
     *
     * @return self
     */
    public function setConnectionTranslationSourceUser($connection_translation_source_user)
    {
        if (is_null($connection_translation_source_user)) {
            throw new \InvalidArgumentException('non-nullable connection_translation_source_user cannot be null');
        }
        $this->container['connection_translation_source_user'] = $connection_translation_source_user;

        return $this;
    }

    /**
     * Gets connection_source_ip_checking_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionSourceIpCheckingEnabled()
    {
        return $this->container['connection_source_ip_checking_enabled'];
    }

    /**
     * Sets connection_source_ip_checking_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_source_ip_checking_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionSourceIpCheckingEnabled($connection_source_ip_checking_enabled)
    {
        if (is_null($connection_source_ip_checking_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_source_ip_checking_enabled cannot be null');
        }
        $this->container['connection_source_ip_checking_enabled'] = $connection_source_ip_checking_enabled;

        return $this;
    }

    /**
     * Gets connection_include_server_header_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionIncludeServerHeaderEnabled()
    {
        return $this->container['connection_include_server_header_enabled'];
    }

    /**
     * Sets connection_include_server_header_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_include_server_header_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionIncludeServerHeaderEnabled($connection_include_server_header_enabled)
    {
        if (is_null($connection_include_server_header_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_include_server_header_enabled cannot be null');
        }
        $this->container['connection_include_server_header_enabled'] = $connection_include_server_header_enabled;

        return $this;
    }

    /**
     * Gets connection_relay_comfort_noise_enabled
     *
     * @return string|null
     */
    public function getConnectionRelayComfortNoiseEnabled()
    {
        return $this->container['connection_relay_comfort_noise_enabled'];
    }

    /**
     * Sets connection_relay_comfort_noise_enabled
     *
     * @param string|null $connection_relay_comfort_noise_enabled This will set whether there is an RTP Relay comfort noise. Can be set to yes or no. If not set, will be set to system-default
     *
     * @return self
     */
    public function setConnectionRelayComfortNoiseEnabled($connection_relay_comfort_noise_enabled)
    {
        if (is_null($connection_relay_comfort_noise_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_relay_comfort_noise_enabled cannot be null');
        }
        $this->container['connection_relay_comfort_noise_enabled'] = $connection_relay_comfort_noise_enabled;

        return $this;
    }

    /**
     * Gets connection_pcmu_only_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionPcmuOnlyEnabled()
    {
        return $this->container['connection_pcmu_only_enabled'];
    }

    /**
     * Sets connection_pcmu_only_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_pcmu_only_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionPcmuOnlyEnabled($connection_pcmu_only_enabled)
    {
        if (is_null($connection_pcmu_only_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_pcmu_only_enabled cannot be null');
        }
        $this->container['connection_pcmu_only_enabled'] = $connection_pcmu_only_enabled;

        return $this;
    }

    /**
     * Gets connection_enforce_minimum_duration_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionEnforceMinimumDurationEnabled()
    {
        return $this->container['connection_enforce_minimum_duration_enabled'];
    }

    /**
     * Sets connection_enforce_minimum_duration_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_enforce_minimum_duration_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionEnforceMinimumDurationEnabled($connection_enforce_minimum_duration_enabled)
    {
        if (is_null($connection_enforce_minimum_duration_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_enforce_minimum_duration_enabled cannot be null');
        }
        $this->container['connection_enforce_minimum_duration_enabled'] = $connection_enforce_minimum_duration_enabled;

        return $this;
    }

    /**
     * Gets connection_bind_to_alternate_interface_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionBindToAlternateInterfaceEnabled()
    {
        return $this->container['connection_bind_to_alternate_interface_enabled'];
    }

    /**
     * Sets connection_bind_to_alternate_interface_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_bind_to_alternate_interface_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionBindToAlternateInterfaceEnabled($connection_bind_to_alternate_interface_enabled)
    {
        if (is_null($connection_bind_to_alternate_interface_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_bind_to_alternate_interface_enabled cannot be null');
        }
        $this->container['connection_bind_to_alternate_interface_enabled'] = $connection_bind_to_alternate_interface_enabled;

        return $this;
    }

    /**
     * Gets connection_block_video_in_sdp_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionBlockVideoInSdpEnabled()
    {
        return $this->container['connection_block_video_in_sdp_enabled'];
    }

    /**
     * Sets connection_block_video_in_sdp_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_block_video_in_sdp_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionBlockVideoInSdpEnabled($connection_block_video_in_sdp_enabled)
    {
        if (is_null($connection_block_video_in_sdp_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_block_video_in_sdp_enabled cannot be null');
        }
        $this->container['connection_block_video_in_sdp_enabled'] = $connection_block_video_in_sdp_enabled;

        return $this;
    }

    /**
     * Gets connection_sip_get_new_dialog_destination_from
     *
     * @return string|null
     */
    public function getConnectionSipGetNewDialogDestinationFrom()
    {
        return $this->container['connection_sip_get_new_dialog_destination_from'];
    }

    /**
     * Sets connection_sip_get_new_dialog_destination_from
     *
     * @param string|null $connection_sip_get_new_dialog_destination_from This will set the new dialog destination. Values available are contact-header or via-header. Default would be default-ip
     *
     * @return self
     */
    public function setConnectionSipGetNewDialogDestinationFrom($connection_sip_get_new_dialog_destination_from)
    {
        if (is_null($connection_sip_get_new_dialog_destination_from)) {
            throw new \InvalidArgumentException('non-nullable connection_sip_get_new_dialog_destination_from cannot be null');
        }
        $this->container['connection_sip_get_new_dialog_destination_from'] = $connection_sip_get_new_dialog_destination_from;

        return $this;
    }

    /**
     * Gets connection_sip_get_response_destination_from
     *
     * @return string|null
     */
    public function getConnectionSipGetResponseDestinationFrom()
    {
        return $this->container['connection_sip_get_response_destination_from'];
    }

    /**
     * Sets connection_sip_get_response_destination_from
     *
     * @param string|null $connection_sip_get_response_destination_from This will set the response desination. Values available will be contact-header or via-header. Default will be default-ip
     *
     * @return self
     */
    public function setConnectionSipGetResponseDestinationFrom($connection_sip_get_response_destination_from)
    {
        if (is_null($connection_sip_get_response_destination_from)) {
            throw new \InvalidArgumentException('non-nullable connection_sip_get_response_destination_from cannot be null');
        }
        $this->container['connection_sip_get_response_destination_from'] = $connection_sip_get_response_destination_from;

        return $this;
    }

    /**
     * Gets connection_require_encrypted_audio_enabled
     *
     * @return string|null
     */
    public function getConnectionRequireEncryptedAudioEnabled()
    {
        return $this->container['connection_require_encrypted_audio_enabled'];
    }

    /**
     * Sets connection_require_encrypted_audio_enabled
     *
     * @param string|null $connection_require_encrypted_audio_enabled This will set whether audio encryption is required. Options availabe are \"optional\" and \"yes\". Defaults to no
     *
     * @return self
     */
    public function setConnectionRequireEncryptedAudioEnabled($connection_require_encrypted_audio_enabled)
    {
        if (is_null($connection_require_encrypted_audio_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_require_encrypted_audio_enabled cannot be null');
        }
        $this->container['connection_require_encrypted_audio_enabled'] = $connection_require_encrypted_audio_enabled;

        return $this;
    }

    /**
     * Gets connection_sip_transport_protocol
     *
     * @return string|null
     */
    public function getConnectionSipTransportProtocol()
    {
        return $this->container['connection_sip_transport_protocol'];
    }

    /**
     * Sets connection_sip_transport_protocol
     *
     * @param string|null $connection_sip_transport_protocol This will set the SIP transport protocol. Options are \"TCP and \"TLS\". Default will be UDP
     *
     * @return self
     */
    public function setConnectionSipTransportProtocol($connection_sip_transport_protocol)
    {
        if (is_null($connection_sip_transport_protocol)) {
            throw new \InvalidArgumentException('non-nullable connection_sip_transport_protocol cannot be null');
        }
        $this->container['connection_sip_transport_protocol'] = $connection_sip_transport_protocol;

        return $this;
    }

    /**
     * Gets connection_check_orig_matching_sip_header
     *
     * @return string|null
     */
    public function getConnectionCheckOrigMatchingSipHeader()
    {
        return $this->container['connection_check_orig_matching_sip_header'];
    }

    /**
     * Sets connection_check_orig_matching_sip_header
     *
     * @param string|null $connection_check_orig_matching_sip_header This will set whether to check whether the origination matches the SIP header. Options are \"to\", \"request\", or \"contact\". Default will default to \"from\"
     *
     * @return self
     */
    public function setConnectionCheckOrigMatchingSipHeader($connection_check_orig_matching_sip_header)
    {
        if (is_null($connection_check_orig_matching_sip_header)) {
            throw new \InvalidArgumentException('non-nullable connection_check_orig_matching_sip_header cannot be null');
        }
        $this->container['connection_check_orig_matching_sip_header'] = $connection_check_orig_matching_sip_header;

        return $this;
    }

    /**
     * Gets connection_sip_session_timer_enabled
     *
     * @return string|null
     */
    public function getConnectionSipSessionTimerEnabled()
    {
        return $this->container['connection_sip_session_timer_enabled'];
    }

    /**
     * Sets connection_sip_session_timer_enabled
     *
     * @param string|null $connection_sip_session_timer_enabled This will set the SIP session timer. Options are setting to \"no\" or not setting at all, which will default to the system-default
     *
     * @return self
     */
    public function setConnectionSipSessionTimerEnabled($connection_sip_session_timer_enabled)
    {
        if (is_null($connection_sip_session_timer_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_sip_session_timer_enabled cannot be null');
        }
        $this->container['connection_sip_session_timer_enabled'] = $connection_sip_session_timer_enabled;

        return $this;
    }

    /**
     * Gets connection_prevent_rtp_port_change_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionPreventRtpPortChangeEnabled()
    {
        return $this->container['connection_prevent_rtp_port_change_enabled'];
    }

    /**
     * Sets connection_prevent_rtp_port_change_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_prevent_rtp_port_change_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionPreventRtpPortChangeEnabled($connection_prevent_rtp_port_change_enabled)
    {
        if (is_null($connection_prevent_rtp_port_change_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_prevent_rtp_port_change_enabled cannot be null');
        }
        $this->container['connection_prevent_rtp_port_change_enabled'] = $connection_prevent_rtp_port_change_enabled;

        return $this;
    }

    /**
     * Gets connection_hide_post_dial_delay_with_ringback_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionHidePostDialDelayWithRingbackEnabled()
    {
        return $this->container['connection_hide_post_dial_delay_with_ringback_enabled'];
    }

    /**
     * Sets connection_hide_post_dial_delay_with_ringback_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_hide_post_dial_delay_with_ringback_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionHidePostDialDelayWithRingbackEnabled($connection_hide_post_dial_delay_with_ringback_enabled)
    {
        if (is_null($connection_hide_post_dial_delay_with_ringback_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_hide_post_dial_delay_with_ringback_enabled cannot be null');
        }
        $this->container['connection_hide_post_dial_delay_with_ringback_enabled'] = $connection_hide_post_dial_delay_with_ringback_enabled;

        return $this;
    }

    /**
     * Gets connection_remote_ringback_handling
     *
     * @return string|null
     */
    public function getConnectionRemoteRingbackHandling()
    {
        return $this->container['connection_remote_ringback_handling'];
    }

    /**
     * Sets connection_remote_ringback_handling
     *
     * @param string|null $connection_remote_ringback_handling This will set the remote ringback handling. Options are \"no-ringback\" and \"local-only\". Default will be set to \"allowed\".
     *
     * @return self
     */
    public function setConnectionRemoteRingbackHandling($connection_remote_ringback_handling)
    {
        if (is_null($connection_remote_ringback_handling)) {
            throw new \InvalidArgumentException('non-nullable connection_remote_ringback_handling cannot be null');
        }
        $this->container['connection_remote_ringback_handling'] = $connection_remote_ringback_handling;

        return $this;
    }

    /**
     * Gets connection_block_media_in_sip_180_ringing
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionBlockMediaInSip180Ringing()
    {
        return $this->container['connection_block_media_in_sip_180_ringing'];
    }

    /**
     * Sets connection_block_media_in_sip_180_ringing
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_block_media_in_sip_180_ringing This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionBlockMediaInSip180Ringing($connection_block_media_in_sip_180_ringing)
    {
        if (is_null($connection_block_media_in_sip_180_ringing)) {
            throw new \InvalidArgumentException('non-nullable connection_block_media_in_sip_180_ringing cannot be null');
        }
        $this->container['connection_block_media_in_sip_180_ringing'] = $connection_block_media_in_sip_180_ringing;

        return $this;
    }

    /**
     * Gets connection_allow_mid_call_uri_updates_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionAllowMidCallUriUpdatesEnabled()
    {
        return $this->container['connection_allow_mid_call_uri_updates_enabled'];
    }

    /**
     * Sets connection_allow_mid_call_uri_updates_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_allow_mid_call_uri_updates_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionAllowMidCallUriUpdatesEnabled($connection_allow_mid_call_uri_updates_enabled)
    {
        if (is_null($connection_allow_mid_call_uri_updates_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_allow_mid_call_uri_updates_enabled cannot be null');
        }
        $this->container['connection_allow_mid_call_uri_updates_enabled'] = $connection_allow_mid_call_uri_updates_enabled;

        return $this;
    }

    /**
     * Gets connection_record_all_calls_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionRecordAllCallsEnabled()
    {
        return $this->container['connection_record_all_calls_enabled'];
    }

    /**
     * Sets connection_record_all_calls_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_record_all_calls_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionRecordAllCallsEnabled($connection_record_all_calls_enabled)
    {
        if (is_null($connection_record_all_calls_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_record_all_calls_enabled cannot be null');
        }
        $this->container['connection_record_all_calls_enabled'] = $connection_record_all_calls_enabled;

        return $this;
    }

    /**
     * Gets connection_custom_p_asserted_id_format
     *
     * @return string|null
     */
    public function getConnectionCustomPAssertedIdFormat()
    {
        return $this->container['connection_custom_p_asserted_id_format'];
    }

    /**
     * Sets connection_custom_p_asserted_id_format
     *
     * @param string|null $connection_custom_p_asserted_id_format This will set the PAId of the connection. Example input \"sample\" will translate to \"PAId=sample\" in call rules
     *
     * @return self
     */
    public function setConnectionCustomPAssertedIdFormat($connection_custom_p_asserted_id_format)
    {
        if (is_null($connection_custom_p_asserted_id_format)) {
            throw new \InvalidArgumentException('non-nullable connection_custom_p_asserted_id_format cannot be null');
        }
        $this->container['connection_custom_p_asserted_id_format'] = $connection_custom_p_asserted_id_format;

        return $this;
    }

    /**
     * Gets connection_require_sip_authentication_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionRequireSipAuthenticationEnabled()
    {
        return $this->container['connection_require_sip_authentication_enabled'];
    }

    /**
     * Sets connection_require_sip_authentication_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_require_sip_authentication_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionRequireSipAuthenticationEnabled($connection_require_sip_authentication_enabled)
    {
        if (is_null($connection_require_sip_authentication_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_require_sip_authentication_enabled cannot be null');
        }
        $this->container['connection_require_sip_authentication_enabled'] = $connection_require_sip_authentication_enabled;

        return $this;
    }

    /**
     * Gets connection_translation_source_host
     *
     * @return string|null
     */
    public function getConnectionTranslationSourceHost()
    {
        return $this->container['connection_translation_source_host'];
    }

    /**
     * Sets connection_translation_source_host
     *
     * @param string|null $connection_translation_source_host connection_translation_source_host
     *
     * @return self
     */
    public function setConnectionTranslationSourceHost($connection_translation_source_host)
    {
        if (is_null($connection_translation_source_host)) {
            throw new \InvalidArgumentException('non-nullable connection_translation_source_host cannot be null');
        }
        $this->container['connection_translation_source_host'] = $connection_translation_source_host;

        return $this;
    }

    /**
     * Gets utc_offset
     *
     * @return string|null
     */
    public function getUtcOffset()
    {
        return $this->container['utc_offset'];
    }

    /**
     * Sets utc_offset
     *
     * @param string|null $utc_offset This is the utc offset of the connection. Example \"-7\" for US/Pacific
     *
     * @return self
     */
    public function setUtcOffset($utc_offset)
    {
        if (is_null($utc_offset)) {
            throw new \InvalidArgumentException('non-nullable utc_offset cannot be null');
        }
        $this->container['utc_offset'] = $utc_offset;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string|null $time_zone This is the timezone of the connection
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            throw new \InvalidArgumentException('non-nullable time_zone cannot be null');
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets minimum_call_duration_seconds
     *
     * @return int|null
     */
    public function getMinimumCallDurationSeconds()
    {
        return $this->container['minimum_call_duration_seconds'];
    }

    /**
     * Sets minimum_call_duration_seconds
     *
     * @param int|null $minimum_call_duration_seconds minimum_call_duration_seconds
     *
     * @return self
     */
    public function setMinimumCallDurationSeconds($minimum_call_duration_seconds)
    {
        if (is_null($minimum_call_duration_seconds)) {
            throw new \InvalidArgumentException('non-nullable minimum_call_duration_seconds cannot be null');
        }
        $this->container['minimum_call_duration_seconds'] = $minimum_call_duration_seconds;

        return $this;
    }

    /**
     * Gets connection_sip_registration_expires_datetime
     *
     * @return string|null
     */
    public function getConnectionSipRegistrationExpiresDatetime()
    {
        return $this->container['connection_sip_registration_expires_datetime'];
    }

    /**
     * Sets connection_sip_registration_expires_datetime
     *
     * @param string|null $connection_sip_registration_expires_datetime connection_sip_registration_expires_datetime
     *
     * @return self
     */
    public function setConnectionSipRegistrationExpiresDatetime($connection_sip_registration_expires_datetime)
    {
        if (is_null($connection_sip_registration_expires_datetime)) {
            throw new \InvalidArgumentException('non-nullable connection_sip_registration_expires_datetime cannot be null');
        }
        $this->container['connection_sip_registration_expires_datetime'] = $connection_sip_registration_expires_datetime;

        return $this;
    }

    /**
     * Gets connection_sip_authenticate_as_client_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionSipAuthenticateAsClientEnabled()
    {
        return $this->container['connection_sip_authenticate_as_client_enabled'];
    }

    /**
     * Sets connection_sip_authenticate_as_client_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_sip_authenticate_as_client_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionSipAuthenticateAsClientEnabled($connection_sip_authenticate_as_client_enabled)
    {
        if (is_null($connection_sip_authenticate_as_client_enabled)) {
            throw new \InvalidArgumentException('non-nullable connection_sip_authenticate_as_client_enabled cannot be null');
        }
        $this->container['connection_sip_authenticate_as_client_enabled'] = $connection_sip_authenticate_as_client_enabled;

        return $this;
    }

    /**
     * Gets connection_is_carrier_trunk
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getConnectionIsCarrierTrunk()
    {
        return $this->container['connection_is_carrier_trunk'];
    }

    /**
     * Sets connection_is_carrier_trunk
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $connection_is_carrier_trunk This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setConnectionIsCarrierTrunk($connection_is_carrier_trunk)
    {
        if (is_null($connection_is_carrier_trunk)) {
            throw new \InvalidArgumentException('non-nullable connection_is_carrier_trunk cannot be null');
        }
        $this->container['connection_is_carrier_trunk'] = $connection_is_carrier_trunk;

        return $this;
    }

    /**
     * Gets call_routing
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\CreateConnectionRequestCallRouting|null
     */
    public function getCallRouting()
    {
        return $this->container['call_routing'];
    }

    /**
     * Sets call_routing
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\CreateConnectionRequestCallRouting|null $call_routing call_routing
     *
     * @return self
     */
    public function setCallRouting($call_routing)
    {
        if (is_null($call_routing)) {
            array_push($this->openAPINullablesSetToNull, 'call_routing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_routing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_routing'] = $call_routing;

        return $this;
    }

    /**
     * Gets active_calls_max_last_month
     *
     * @return int|null
     */
    public function getActiveCallsMaxLastMonth()
    {
        return $this->container['active_calls_max_last_month'];
    }

    /**
     * Sets active_calls_max_last_month
     *
     * @param int|null $active_calls_max_last_month active_calls_max_last_month
     *
     * @return self
     */
    public function setActiveCallsMaxLastMonth($active_calls_max_last_month)
    {
        if (is_null($active_calls_max_last_month)) {
            throw new \InvalidArgumentException('non-nullable active_calls_max_last_month cannot be null');
        }
        $this->container['active_calls_max_last_month'] = $active_calls_max_last_month;

        return $this;
    }

    /**
     * Gets active_calls_max_this_month
     *
     * @return int|null
     */
    public function getActiveCallsMaxThisMonth()
    {
        return $this->container['active_calls_max_this_month'];
    }

    /**
     * Sets active_calls_max_this_month
     *
     * @param int|null $active_calls_max_this_month active_calls_max_this_month
     *
     * @return self
     */
    public function setActiveCallsMaxThisMonth($active_calls_max_this_month)
    {
        if (is_null($active_calls_max_this_month)) {
            throw new \InvalidArgumentException('non-nullable active_calls_max_this_month cannot be null');
        }
        $this->container['active_calls_max_this_month'] = $active_calls_max_this_month;

        return $this;
    }

    /**
     * Gets active_calls_orig_current
     *
     * @return int|null
     */
    public function getActiveCallsOrigCurrent()
    {
        return $this->container['active_calls_orig_current'];
    }

    /**
     * Sets active_calls_orig_current
     *
     * @param int|null $active_calls_orig_current active_calls_orig_current
     *
     * @return self
     */
    public function setActiveCallsOrigCurrent($active_calls_orig_current)
    {
        if (is_null($active_calls_orig_current)) {
            throw new \InvalidArgumentException('non-nullable active_calls_orig_current cannot be null');
        }
        $this->container['active_calls_orig_current'] = $active_calls_orig_current;

        return $this;
    }

    /**
     * Gets active_calls_orig_since_startup
     *
     * @return int|null
     */
    public function getActiveCallsOrigSinceStartup()
    {
        return $this->container['active_calls_orig_since_startup'];
    }

    /**
     * Sets active_calls_orig_since_startup
     *
     * @param int|null $active_calls_orig_since_startup active_calls_orig_since_startup
     *
     * @return self
     */
    public function setActiveCallsOrigSinceStartup($active_calls_orig_since_startup)
    {
        if (is_null($active_calls_orig_since_startup)) {
            throw new \InvalidArgumentException('non-nullable active_calls_orig_since_startup cannot be null');
        }
        $this->container['active_calls_orig_since_startup'] = $active_calls_orig_since_startup;

        return $this;
    }

    /**
     * Gets active_calls_term_current
     *
     * @return int|null
     */
    public function getActiveCallsTermCurrent()
    {
        return $this->container['active_calls_term_current'];
    }

    /**
     * Sets active_calls_term_current
     *
     * @param int|null $active_calls_term_current active_calls_term_current
     *
     * @return self
     */
    public function setActiveCallsTermCurrent($active_calls_term_current)
    {
        if (is_null($active_calls_term_current)) {
            throw new \InvalidArgumentException('non-nullable active_calls_term_current cannot be null');
        }
        $this->container['active_calls_term_current'] = $active_calls_term_current;

        return $this;
    }

    /**
     * Gets active_calls_term_since_startup
     *
     * @return int|null
     */
    public function getActiveCallsTermSinceStartup()
    {
        return $this->container['active_calls_term_since_startup'];
    }

    /**
     * Sets active_calls_term_since_startup
     *
     * @param int|null $active_calls_term_since_startup active_calls_term_since_startup
     *
     * @return self
     */
    public function setActiveCallsTermSinceStartup($active_calls_term_since_startup)
    {
        if (is_null($active_calls_term_since_startup)) {
            throw new \InvalidArgumentException('non-nullable active_calls_term_since_startup cannot be null');
        }
        $this->container['active_calls_term_since_startup'] = $active_calls_term_since_startup;

        return $this;
    }

    /**
     * Gets connection_sip_registration_datetime
     *
     * @return string|null
     */
    public function getConnectionSipRegistrationDatetime()
    {
        return $this->container['connection_sip_registration_datetime'];
    }

    /**
     * Sets connection_sip_registration_datetime
     *
     * @param string|null $connection_sip_registration_datetime connection_sip_registration_datetime
     *
     * @return self
     */
    public function setConnectionSipRegistrationDatetime($connection_sip_registration_datetime)
    {
        if (is_null($connection_sip_registration_datetime)) {
            throw new \InvalidArgumentException('non-nullable connection_sip_registration_datetime cannot be null');
        }
        $this->container['connection_sip_registration_datetime'] = $connection_sip_registration_datetime;

        return $this;
    }

    /**
     * Gets last_modified_datetime
     *
     * @return string|null
     */
    public function getLastModifiedDatetime()
    {
        return $this->container['last_modified_datetime'];
    }

    /**
     * Sets last_modified_datetime
     *
     * @param string|null $last_modified_datetime last_modified_datetime
     *
     * @return self
     */
    public function setLastModifiedDatetime($last_modified_datetime)
    {
        if (is_null($last_modified_datetime)) {
            throw new \InvalidArgumentException('non-nullable last_modified_datetime cannot be null');
        }
        $this->container['last_modified_datetime'] = $last_modified_datetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


