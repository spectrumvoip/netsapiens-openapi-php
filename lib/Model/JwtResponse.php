<?php
/**
 * JwtResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * JwtResponse Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class JwtResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'JwtResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aud' => 'string',
        'exp' => 'int',
        'iat' => 'int',
        'iss' => 'string',
        'jti' => 'string',
        'sub' => 'string',
        'time_out' => 'int',
        'domain' => 'string',
        'territory' => 'string',
        'user' => 'string',
        'user_email' => 'string',
        'user_scope' => 'string',
        'display_name' => 'string',
        'apiversion' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aud' => null,
        'exp' => null,
        'iat' => null,
        'iss' => null,
        'jti' => null,
        'sub' => null,
        'time_out' => null,
        'domain' => null,
        'territory' => null,
        'user' => null,
        'user_email' => null,
        'user_scope' => null,
        'display_name' => null,
        'apiversion' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'aud' => false,
        'exp' => false,
        'iat' => false,
        'iss' => false,
        'jti' => false,
        'sub' => false,
        'time_out' => false,
        'domain' => false,
        'territory' => false,
        'user' => false,
        'user_email' => true,
        'user_scope' => false,
        'display_name' => false,
        'apiversion' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aud' => 'aud',
        'exp' => 'exp',
        'iat' => 'iat',
        'iss' => 'iss',
        'jti' => 'jti',
        'sub' => 'sub',
        'time_out' => 'time_out',
        'domain' => 'domain',
        'territory' => 'territory',
        'user' => 'user',
        'user_email' => 'user_email',
        'user_scope' => 'user_scope',
        'display_name' => 'displayName',
        'apiversion' => 'apiversion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aud' => 'setAud',
        'exp' => 'setExp',
        'iat' => 'setIat',
        'iss' => 'setIss',
        'jti' => 'setJti',
        'sub' => 'setSub',
        'time_out' => 'setTimeOut',
        'domain' => 'setDomain',
        'territory' => 'setTerritory',
        'user' => 'setUser',
        'user_email' => 'setUserEmail',
        'user_scope' => 'setUserScope',
        'display_name' => 'setDisplayName',
        'apiversion' => 'setApiversion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aud' => 'getAud',
        'exp' => 'getExp',
        'iat' => 'getIat',
        'iss' => 'getIss',
        'jti' => 'getJti',
        'sub' => 'getSub',
        'time_out' => 'getTimeOut',
        'domain' => 'getDomain',
        'territory' => 'getTerritory',
        'user' => 'getUser',
        'user_email' => 'getUserEmail',
        'user_scope' => 'getUserScope',
        'display_name' => 'getDisplayName',
        'apiversion' => 'getApiversion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('aud', $data ?? [], null);
        $this->setIfExists('exp', $data ?? [], null);
        $this->setIfExists('iat', $data ?? [], null);
        $this->setIfExists('iss', $data ?? [], null);
        $this->setIfExists('jti', $data ?? [], null);
        $this->setIfExists('sub', $data ?? [], null);
        $this->setIfExists('time_out', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('territory', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('user_email', $data ?? [], null);
        $this->setIfExists('user_scope', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('apiversion', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['domain']) && (mb_strlen($this->container['domain']) > 64)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['domain']) && !preg_match("/^[A-Za-z0-9._-]+|\\*/", $this->container['domain'])) {
            $invalidProperties[] = "invalid value for 'domain', must be conform to the pattern /^[A-Za-z0-9._-]+|\\*/.";
        }

        if ($this->container['user_email'] === null) {
            $invalidProperties[] = "'user_email' can't be null";
        }
        if ($this->container['user_scope'] === null) {
            $invalidProperties[] = "'user_scope' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aud
     *
     * @return string|null
     */
    public function getAud()
    {
        return $this->container['aud'];
    }

    /**
     * Sets aud
     *
     * @param string|null $aud The \"aud\" (audience) claim identifies the recipients that the JWT is    intended for.  Each principal intended to process the JWT MUST    identify itself with a value in the audience claim.  If the principal    processing the claim does not identify itself with a value in the    \"aud\" claim when this claim is present, then the JWT MUST be    rejected.  In the general case, the \"aud\" value is an array of case-    sensitive strings, each containing a StringOrURI value.  In the    special case when the JWT has one audience, the \"aud\" value MAY be a    single case-sensitive string containing a StringOrURI value.  The    interpretation of audience values is generally application specific.    Use of this claim is OPTIONAL.
     *
     * @return self
     */
    public function setAud($aud)
    {
        if (is_null($aud)) {
            throw new \InvalidArgumentException('non-nullable aud cannot be null');
        }
        $this->container['aud'] = $aud;

        return $this;
    }

    /**
     * Gets exp
     *
     * @return int|null
     */
    public function getExp()
    {
        return $this->container['exp'];
    }

    /**
     * Sets exp
     *
     * @param int|null $exp The \"exp\" (expiration time) claim identifies the expiration time on    or after which the JWT MUST NOT be accepted for processing.  The    processing of the \"exp\" claim requires that the current date/time    MUST be before the expiration date/time listed in the \"exp\" claim.  Implementers MAY provide for some small leeway, usually no more than    a few minutes, to account for clock skew.  Its value MUST be a number    containing a NumericDate value.  Use of this claim is OPTIONAL.
     *
     * @return self
     */
    public function setExp($exp)
    {
        if (is_null($exp)) {
            throw new \InvalidArgumentException('non-nullable exp cannot be null');
        }
        $this->container['exp'] = $exp;

        return $this;
    }

    /**
     * Gets iat
     *
     * @return int|null
     */
    public function getIat()
    {
        return $this->container['iat'];
    }

    /**
     * Sets iat
     *
     * @param int|null $iat The \"iat\" (issued at) claim identifies the time at which the JWT was    issued.  This claim can be used to determine the age of the JWT.  Its    value MUST be a number containing a NumericDate value.  Use of this    claim is OPTIONAL.
     *
     * @return self
     */
    public function setIat($iat)
    {
        if (is_null($iat)) {
            throw new \InvalidArgumentException('non-nullable iat cannot be null');
        }
        $this->container['iat'] = $iat;

        return $this;
    }

    /**
     * Gets iss
     *
     * @return string|null
     */
    public function getIss()
    {
        return $this->container['iss'];
    }

    /**
     * Sets iss
     *
     * @param string|null $iss The \"iss\" (issuer) claim identifies the principal that issued the    JWT.  The processing of this claim is generally application specific.    The \"iss\" value is a case-sensitive string containing a StringOrURI    value.  Use of this claim is OPTIONAL.
     *
     * @return self
     */
    public function setIss($iss)
    {
        if (is_null($iss)) {
            throw new \InvalidArgumentException('non-nullable iss cannot be null');
        }
        $this->container['iss'] = $iss;

        return $this;
    }

    /**
     * Gets jti
     *
     * @return string|null
     */
    public function getJti()
    {
        return $this->container['jti'];
    }

    /**
     * Sets jti
     *
     * @param string|null $jti The \"jti\" (JWT ID) claim provides a unique identifier for the JWT.    The identifier value MUST be assigned in a manner that ensures that    there is a negligible probability that the same value will be    accidentally assigned to a different data object; if the application    uses multiple issuers, collisions MUST be prevented among values    produced by different issuers as well.  The \"jti\" claim can be used    to prevent the JWT from being replayed.  The \"jti\" value is a case-    sensitive string.  Use of this claim is OPTIONAL.
     *
     * @return self
     */
    public function setJti($jti)
    {
        if (is_null($jti)) {
            throw new \InvalidArgumentException('non-nullable jti cannot be null');
        }
        $this->container['jti'] = $jti;

        return $this;
    }

    /**
     * Gets sub
     *
     * @return string|null
     */
    public function getSub()
    {
        return $this->container['sub'];
    }

    /**
     * Sets sub
     *
     * @param string|null $sub The \"sub\" (subject) claim identifies the principal that is the    subject of the JWT.  The claims in a JWT are normally statements    about the subject.  The subject value MUST either be scoped to be    locally unique in the context of the issuer or be globally unique.    The processing of this claim is generally application specific.  The    \"sub\" value is a case-sensitive string containing a StringOrURI    value.  Use of this claim is OPTIONAL.
     *
     * @return self
     */
    public function setSub($sub)
    {
        if (is_null($sub)) {
            throw new \InvalidArgumentException('non-nullable sub cannot be null');
        }
        $this->container['sub'] = $sub;

        return $this;
    }

    /**
     * Gets time_out
     *
     * @return int|null
     */
    public function getTimeOut()
    {
        return $this->container['time_out'];
    }

    /**
     * Sets time_out
     *
     * @param int|null $time_out The time is the number of miliseconds the JWT will be valid for.
     *
     * @return self
     */
    public function setTimeOut($time_out)
    {
        if (is_null($time_out)) {
            throw new \InvalidArgumentException('non-nullable time_out cannot be null');
        }
        $this->container['time_out'] = $time_out;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain This is the main organization name. This is used to link resource to its group/tenant/organization/enterprise. ~ and * can be used alone in special cases to mean My Domain (~) and All Domains (\\*).
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        if ((mb_strlen($domain) > 64)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling JwtResponse., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[A-Za-z0-9._-]+|\\*/", ObjectSerializer::toString($domain)))) {
            throw new \InvalidArgumentException("invalid value for \$domain when calling JwtResponse., must conform to the pattern /^[A-Za-z0-9._-]+|\\*/.");
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets territory
     *
     * @return string|null
     */
    public function getTerritory()
    {
        return $this->container['territory'];
    }

    /**
     * Sets territory
     *
     * @param string|null $territory This is the reseller that the token will be limited to.
     *
     * @return self
     */
    public function setTerritory($territory)
    {
        if (is_null($territory)) {
            throw new \InvalidArgumentException('non-nullable territory cannot be null');
        }
        $this->container['territory'] = $territory;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user This is the user that the token will be limited to.
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets user_email
     *
     * @return string
     */
    public function getUserEmail()
    {
        return $this->container['user_email'];
    }

    /**
     * Sets user_email
     *
     * @param string $user_email The user's email address if defined.
     *
     * @return self
     */
    public function setUserEmail($user_email)
    {
        if (is_null($user_email)) {
            array_push($this->openAPINullablesSetToNull, 'user_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_email'] = $user_email;

        return $this;
    }

    /**
     * Gets user_scope
     *
     * @return string
     */
    public function getUserScope()
    {
        return $this->container['user_scope'];
    }

    /**
     * Sets user_scope
     *
     * @param string $user_scope The user's scope if defined.
     *
     * @return self
     */
    public function setUserScope($user_scope)
    {
        if (is_null($user_scope)) {
            throw new \InvalidArgumentException('non-nullable user_scope cannot be null');
        }
        $this->container['user_scope'] = $user_scope;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name The user's display name (first + last) if defined.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets apiversion
     *
     * @return string|null
     */
    public function getApiversion()
    {
        return $this->container['apiversion'];
    }

    /**
     * Sets apiversion
     *
     * @param string|null $apiversion The version of the netsapiens API used in token generation
     *
     * @return self
     */
    public function setApiversion($apiversion)
    {
        if (is_null($apiversion)) {
            throw new \InvalidArgumentException('non-nullable apiversion cannot be null');
        }
        $this->container['apiversion'] = $apiversion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


