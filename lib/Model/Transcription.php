<?php
/**
 * Transcription
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * Transcription Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Transcription implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transcription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'call_intelligence_job_id' => 'int',
        'call_intelligence_processing_status' => 'string',
        'created_datetime' => 'string',
        'call_id' => 'string',
        'call_intelligence_features_enabled' => 'string',
        'call_intelligence_summary' => 'string',
        'call_intelligence_topics_top' => 'string[]',
        'call_intelligence_duration_seconds' => 'float',
        'call_intelligence_duration_seconds_negative' => 'int',
        'call_intelligence_duration_seconds_neutral' => 'float',
        'call_intelligence_duration_seconds_positive' => 'float',
        'call_intelligence_ending_duration_seconds' => 'float',
        'call_intelligence_ending_duration_seconds_negative' => 'int',
        'call_intelligence_ending_duration_seconds_neutral' => 'float',
        'call_intelligence_ending_duration_seconds_positive' => 'float',
        'call_intelligence_ending_percent_negative' => 'int',
        'call_intelligence_ending_percent_neutral' => 'int',
        'call_intelligence_ending_percent_positive' => 'int',
        'call_intelligence_ending_sentiment_scale' => 'int',
        'call_intelligence_percent_negative' => 'int',
        'call_intelligence_percent_neutral' => 'int',
        'call_intelligence_percent_positive' => 'int',
        'call_intelligence_segments' => '\SpectrumVoip\\\\NetSapiens\Model\TranscriptionCallIntelligenceSegmentsInner[]',
        'call_intelligence_summary_status' => 'string',
        'call_intelligence_topics_all' => 'string[]',
        'errors' => 'string',
        'last_modified_datetime' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'call_intelligence_job_id' => 'int',
        'call_intelligence_processing_status' => null,
        'created_datetime' => 'da',
        'call_id' => null,
        'call_intelligence_features_enabled' => null,
        'call_intelligence_summary' => null,
        'call_intelligence_topics_top' => null,
        'call_intelligence_duration_seconds' => null,
        'call_intelligence_duration_seconds_negative' => null,
        'call_intelligence_duration_seconds_neutral' => null,
        'call_intelligence_duration_seconds_positive' => null,
        'call_intelligence_ending_duration_seconds' => null,
        'call_intelligence_ending_duration_seconds_negative' => null,
        'call_intelligence_ending_duration_seconds_neutral' => null,
        'call_intelligence_ending_duration_seconds_positive' => null,
        'call_intelligence_ending_percent_negative' => null,
        'call_intelligence_ending_percent_neutral' => null,
        'call_intelligence_ending_percent_positive' => null,
        'call_intelligence_ending_sentiment_scale' => null,
        'call_intelligence_percent_negative' => null,
        'call_intelligence_percent_neutral' => null,
        'call_intelligence_percent_positive' => null,
        'call_intelligence_segments' => null,
        'call_intelligence_summary_status' => null,
        'call_intelligence_topics_all' => null,
        'errors' => null,
        'last_modified_datetime' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'call_intelligence_job_id' => false,
        'call_intelligence_processing_status' => false,
        'created_datetime' => false,
        'call_id' => false,
        'call_intelligence_features_enabled' => false,
        'call_intelligence_summary' => false,
        'call_intelligence_topics_top' => false,
        'call_intelligence_duration_seconds' => false,
        'call_intelligence_duration_seconds_negative' => false,
        'call_intelligence_duration_seconds_neutral' => false,
        'call_intelligence_duration_seconds_positive' => false,
        'call_intelligence_ending_duration_seconds' => false,
        'call_intelligence_ending_duration_seconds_negative' => false,
        'call_intelligence_ending_duration_seconds_neutral' => false,
        'call_intelligence_ending_duration_seconds_positive' => false,
        'call_intelligence_ending_percent_negative' => false,
        'call_intelligence_ending_percent_neutral' => false,
        'call_intelligence_ending_percent_positive' => false,
        'call_intelligence_ending_sentiment_scale' => false,
        'call_intelligence_percent_negative' => false,
        'call_intelligence_percent_neutral' => false,
        'call_intelligence_percent_positive' => false,
        'call_intelligence_segments' => false,
        'call_intelligence_summary_status' => false,
        'call_intelligence_topics_all' => false,
        'errors' => false,
        'last_modified_datetime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'call_intelligence_job_id' => 'call-intelligence-job-id',
        'call_intelligence_processing_status' => 'call-intelligence-processing-status',
        'created_datetime' => 'created-datetime',
        'call_id' => 'call-id',
        'call_intelligence_features_enabled' => 'call-intelligence-features-enabled',
        'call_intelligence_summary' => 'call-intelligence-summary',
        'call_intelligence_topics_top' => 'call-intelligence-topics-top',
        'call_intelligence_duration_seconds' => 'call-intelligence-duration-seconds',
        'call_intelligence_duration_seconds_negative' => 'call-intelligence-duration-seconds-negative',
        'call_intelligence_duration_seconds_neutral' => 'call-intelligence-duration-seconds-neutral',
        'call_intelligence_duration_seconds_positive' => 'call-intelligence-duration-seconds-positive',
        'call_intelligence_ending_duration_seconds' => 'call-intelligence-ending-duration-seconds',
        'call_intelligence_ending_duration_seconds_negative' => 'call-intelligence-ending-duration-seconds-negative',
        'call_intelligence_ending_duration_seconds_neutral' => 'call-intelligence-ending-duration-seconds-neutral',
        'call_intelligence_ending_duration_seconds_positive' => 'call-intelligence-ending-duration-seconds-positive',
        'call_intelligence_ending_percent_negative' => 'call-intelligence-ending-percent-negative',
        'call_intelligence_ending_percent_neutral' => 'call-intelligence-ending-percent-neutral',
        'call_intelligence_ending_percent_positive' => 'call-intelligence-ending-percent-positive',
        'call_intelligence_ending_sentiment_scale' => 'call-intelligence-ending-sentiment-scale',
        'call_intelligence_percent_negative' => 'call-intelligence-percent-negative',
        'call_intelligence_percent_neutral' => 'call-intelligence-percent-neutral',
        'call_intelligence_percent_positive' => 'call-intelligence-percent-positive',
        'call_intelligence_segments' => 'call-intelligence-segments',
        'call_intelligence_summary_status' => 'call-intelligence-summary-status',
        'call_intelligence_topics_all' => 'call-intelligence-topics-all',
        'errors' => 'errors',
        'last_modified_datetime' => 'last-modified-datetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'call_intelligence_job_id' => 'setCallIntelligenceJobId',
        'call_intelligence_processing_status' => 'setCallIntelligenceProcessingStatus',
        'created_datetime' => 'setCreatedDatetime',
        'call_id' => 'setCallId',
        'call_intelligence_features_enabled' => 'setCallIntelligenceFeaturesEnabled',
        'call_intelligence_summary' => 'setCallIntelligenceSummary',
        'call_intelligence_topics_top' => 'setCallIntelligenceTopicsTop',
        'call_intelligence_duration_seconds' => 'setCallIntelligenceDurationSeconds',
        'call_intelligence_duration_seconds_negative' => 'setCallIntelligenceDurationSecondsNegative',
        'call_intelligence_duration_seconds_neutral' => 'setCallIntelligenceDurationSecondsNeutral',
        'call_intelligence_duration_seconds_positive' => 'setCallIntelligenceDurationSecondsPositive',
        'call_intelligence_ending_duration_seconds' => 'setCallIntelligenceEndingDurationSeconds',
        'call_intelligence_ending_duration_seconds_negative' => 'setCallIntelligenceEndingDurationSecondsNegative',
        'call_intelligence_ending_duration_seconds_neutral' => 'setCallIntelligenceEndingDurationSecondsNeutral',
        'call_intelligence_ending_duration_seconds_positive' => 'setCallIntelligenceEndingDurationSecondsPositive',
        'call_intelligence_ending_percent_negative' => 'setCallIntelligenceEndingPercentNegative',
        'call_intelligence_ending_percent_neutral' => 'setCallIntelligenceEndingPercentNeutral',
        'call_intelligence_ending_percent_positive' => 'setCallIntelligenceEndingPercentPositive',
        'call_intelligence_ending_sentiment_scale' => 'setCallIntelligenceEndingSentimentScale',
        'call_intelligence_percent_negative' => 'setCallIntelligencePercentNegative',
        'call_intelligence_percent_neutral' => 'setCallIntelligencePercentNeutral',
        'call_intelligence_percent_positive' => 'setCallIntelligencePercentPositive',
        'call_intelligence_segments' => 'setCallIntelligenceSegments',
        'call_intelligence_summary_status' => 'setCallIntelligenceSummaryStatus',
        'call_intelligence_topics_all' => 'setCallIntelligenceTopicsAll',
        'errors' => 'setErrors',
        'last_modified_datetime' => 'setLastModifiedDatetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'call_intelligence_job_id' => 'getCallIntelligenceJobId',
        'call_intelligence_processing_status' => 'getCallIntelligenceProcessingStatus',
        'created_datetime' => 'getCreatedDatetime',
        'call_id' => 'getCallId',
        'call_intelligence_features_enabled' => 'getCallIntelligenceFeaturesEnabled',
        'call_intelligence_summary' => 'getCallIntelligenceSummary',
        'call_intelligence_topics_top' => 'getCallIntelligenceTopicsTop',
        'call_intelligence_duration_seconds' => 'getCallIntelligenceDurationSeconds',
        'call_intelligence_duration_seconds_negative' => 'getCallIntelligenceDurationSecondsNegative',
        'call_intelligence_duration_seconds_neutral' => 'getCallIntelligenceDurationSecondsNeutral',
        'call_intelligence_duration_seconds_positive' => 'getCallIntelligenceDurationSecondsPositive',
        'call_intelligence_ending_duration_seconds' => 'getCallIntelligenceEndingDurationSeconds',
        'call_intelligence_ending_duration_seconds_negative' => 'getCallIntelligenceEndingDurationSecondsNegative',
        'call_intelligence_ending_duration_seconds_neutral' => 'getCallIntelligenceEndingDurationSecondsNeutral',
        'call_intelligence_ending_duration_seconds_positive' => 'getCallIntelligenceEndingDurationSecondsPositive',
        'call_intelligence_ending_percent_negative' => 'getCallIntelligenceEndingPercentNegative',
        'call_intelligence_ending_percent_neutral' => 'getCallIntelligenceEndingPercentNeutral',
        'call_intelligence_ending_percent_positive' => 'getCallIntelligenceEndingPercentPositive',
        'call_intelligence_ending_sentiment_scale' => 'getCallIntelligenceEndingSentimentScale',
        'call_intelligence_percent_negative' => 'getCallIntelligencePercentNegative',
        'call_intelligence_percent_neutral' => 'getCallIntelligencePercentNeutral',
        'call_intelligence_percent_positive' => 'getCallIntelligencePercentPositive',
        'call_intelligence_segments' => 'getCallIntelligenceSegments',
        'call_intelligence_summary_status' => 'getCallIntelligenceSummaryStatus',
        'call_intelligence_topics_all' => 'getCallIntelligenceTopicsAll',
        'errors' => 'getErrors',
        'last_modified_datetime' => 'getLastModifiedDatetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('call_intelligence_job_id', $data ?? [], null);
        $this->setIfExists('call_intelligence_processing_status', $data ?? [], null);
        $this->setIfExists('created_datetime', $data ?? [], null);
        $this->setIfExists('call_id', $data ?? [], null);
        $this->setIfExists('call_intelligence_features_enabled', $data ?? [], null);
        $this->setIfExists('call_intelligence_summary', $data ?? [], null);
        $this->setIfExists('call_intelligence_topics_top', $data ?? [], null);
        $this->setIfExists('call_intelligence_duration_seconds', $data ?? [], null);
        $this->setIfExists('call_intelligence_duration_seconds_negative', $data ?? [], null);
        $this->setIfExists('call_intelligence_duration_seconds_neutral', $data ?? [], null);
        $this->setIfExists('call_intelligence_duration_seconds_positive', $data ?? [], null);
        $this->setIfExists('call_intelligence_ending_duration_seconds', $data ?? [], null);
        $this->setIfExists('call_intelligence_ending_duration_seconds_negative', $data ?? [], null);
        $this->setIfExists('call_intelligence_ending_duration_seconds_neutral', $data ?? [], null);
        $this->setIfExists('call_intelligence_ending_duration_seconds_positive', $data ?? [], null);
        $this->setIfExists('call_intelligence_ending_percent_negative', $data ?? [], null);
        $this->setIfExists('call_intelligence_ending_percent_neutral', $data ?? [], null);
        $this->setIfExists('call_intelligence_ending_percent_positive', $data ?? [], null);
        $this->setIfExists('call_intelligence_ending_sentiment_scale', $data ?? [], null);
        $this->setIfExists('call_intelligence_percent_negative', $data ?? [], null);
        $this->setIfExists('call_intelligence_percent_neutral', $data ?? [], null);
        $this->setIfExists('call_intelligence_percent_positive', $data ?? [], null);
        $this->setIfExists('call_intelligence_segments', $data ?? [], null);
        $this->setIfExists('call_intelligence_summary_status', $data ?? [], null);
        $this->setIfExists('call_intelligence_topics_all', $data ?? [], null);
        $this->setIfExists('errors', $data ?? [], null);
        $this->setIfExists('last_modified_datetime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets call_intelligence_job_id
     *
     * @return int|null
     */
    public function getCallIntelligenceJobId()
    {
        return $this->container['call_intelligence_job_id'];
    }

    /**
     * Sets call_intelligence_job_id
     *
     * @param int|null $call_intelligence_job_id This is the main ID identifying the transcription job and will link all intelligence features.
     *
     * @return self
     */
    public function setCallIntelligenceJobId($call_intelligence_job_id)
    {
        if (is_null($call_intelligence_job_id)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_job_id cannot be null');
        }
        $this->container['call_intelligence_job_id'] = $call_intelligence_job_id;

        return $this;
    }

    /**
     * Gets call_intelligence_processing_status
     *
     * @return string|null
     */
    public function getCallIntelligenceProcessingStatus()
    {
        return $this->container['call_intelligence_processing_status'];
    }

    /**
     * Sets call_intelligence_processing_status
     *
     * @param string|null $call_intelligence_processing_status This is the status of the transcription and intelegence work. The data will be enter as soon as the request is made to remote vendor, but might not be availabel fully untill status is \"finished\"
     *
     * @return self
     */
    public function setCallIntelligenceProcessingStatus($call_intelligence_processing_status)
    {
        if (is_null($call_intelligence_processing_status)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_processing_status cannot be null');
        }
        $this->container['call_intelligence_processing_status'] = $call_intelligence_processing_status;

        return $this;
    }

    /**
     * Gets created_datetime
     *
     * @return string|null
     */
    public function getCreatedDatetime()
    {
        return $this->container['created_datetime'];
    }

    /**
     * Sets created_datetime
     *
     * @param string|null $created_datetime The date-time of the request for transcription.
     *
     * @return self
     */
    public function setCreatedDatetime($created_datetime)
    {
        if (is_null($created_datetime)) {
            throw new \InvalidArgumentException('non-nullable created_datetime cannot be null');
        }
        $this->container['created_datetime'] = $created_datetime;

        return $this;
    }

    /**
     * Gets call_id
     *
     * @return string|null
     */
    public function getCallId()
    {
        return $this->container['call_id'];
    }

    /**
     * Sets call_id
     *
     * @param string|null $call_id The linked call-id for the SIP call being recorded. Could be an orig_callid or term_callid depending on who requested recording and type of call.
     *
     * @return self
     */
    public function setCallId($call_id)
    {
        if (is_null($call_id)) {
            throw new \InvalidArgumentException('non-nullable call_id cannot be null');
        }
        $this->container['call_id'] = $call_id;

        return $this;
    }

    /**
     * Gets call_intelligence_features_enabled
     *
     * @return string|null
     */
    public function getCallIntelligenceFeaturesEnabled()
    {
        return $this->container['call_intelligence_features_enabled'];
    }

    /**
     * Sets call_intelligence_features_enabled
     *
     * @param string|null $call_intelligence_features_enabled List of features enabled for request.
     *
     * @return self
     */
    public function setCallIntelligenceFeaturesEnabled($call_intelligence_features_enabled)
    {
        if (is_null($call_intelligence_features_enabled)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_features_enabled cannot be null');
        }
        $this->container['call_intelligence_features_enabled'] = $call_intelligence_features_enabled;

        return $this;
    }

    /**
     * Gets call_intelligence_summary
     *
     * @return string|null
     */
    public function getCallIntelligenceSummary()
    {
        return $this->container['call_intelligence_summary'];
    }

    /**
     * Sets call_intelligence_summary
     *
     * @param string|null $call_intelligence_summary The main summary of the call when available.
     *
     * @return self
     */
    public function setCallIntelligenceSummary($call_intelligence_summary)
    {
        if (is_null($call_intelligence_summary)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_summary cannot be null');
        }
        $this->container['call_intelligence_summary'] = $call_intelligence_summary;

        return $this;
    }

    /**
     * Gets call_intelligence_topics_top
     *
     * @return string[]|null
     */
    public function getCallIntelligenceTopicsTop()
    {
        return $this->container['call_intelligence_topics_top'];
    }

    /**
     * Sets call_intelligence_topics_top
     *
     * @param string[]|null $call_intelligence_topics_top The list of top topics detected on the call based on frequency.
     *
     * @return self
     */
    public function setCallIntelligenceTopicsTop($call_intelligence_topics_top)
    {
        if (is_null($call_intelligence_topics_top)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_topics_top cannot be null');
        }
        $this->container['call_intelligence_topics_top'] = $call_intelligence_topics_top;

        return $this;
    }

    /**
     * Gets call_intelligence_duration_seconds
     *
     * @return float|null
     */
    public function getCallIntelligenceDurationSeconds()
    {
        return $this->container['call_intelligence_duration_seconds'];
    }

    /**
     * Sets call_intelligence_duration_seconds
     *
     * @param float|null $call_intelligence_duration_seconds The duration in seconds for the length of time where detected voice was seen.
     *
     * @return self
     */
    public function setCallIntelligenceDurationSeconds($call_intelligence_duration_seconds)
    {
        if (is_null($call_intelligence_duration_seconds)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_duration_seconds cannot be null');
        }
        $this->container['call_intelligence_duration_seconds'] = $call_intelligence_duration_seconds;

        return $this;
    }

    /**
     * Gets call_intelligence_duration_seconds_negative
     *
     * @return int|null
     */
    public function getCallIntelligenceDurationSecondsNegative()
    {
        return $this->container['call_intelligence_duration_seconds_negative'];
    }

    /**
     * Sets call_intelligence_duration_seconds_negative
     *
     * @param int|null $call_intelligence_duration_seconds_negative The duration in seconds for the length of time where detected voice was seen with a Negative sentiment
     *
     * @return self
     */
    public function setCallIntelligenceDurationSecondsNegative($call_intelligence_duration_seconds_negative)
    {
        if (is_null($call_intelligence_duration_seconds_negative)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_duration_seconds_negative cannot be null');
        }
        $this->container['call_intelligence_duration_seconds_negative'] = $call_intelligence_duration_seconds_negative;

        return $this;
    }

    /**
     * Gets call_intelligence_duration_seconds_neutral
     *
     * @return float|null
     */
    public function getCallIntelligenceDurationSecondsNeutral()
    {
        return $this->container['call_intelligence_duration_seconds_neutral'];
    }

    /**
     * Sets call_intelligence_duration_seconds_neutral
     *
     * @param float|null $call_intelligence_duration_seconds_neutral The duration in seconds for the length of time where detected voice was seen.
     *
     * @return self
     */
    public function setCallIntelligenceDurationSecondsNeutral($call_intelligence_duration_seconds_neutral)
    {
        if (is_null($call_intelligence_duration_seconds_neutral)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_duration_seconds_neutral cannot be null');
        }
        $this->container['call_intelligence_duration_seconds_neutral'] = $call_intelligence_duration_seconds_neutral;

        return $this;
    }

    /**
     * Gets call_intelligence_duration_seconds_positive
     *
     * @return float|null
     */
    public function getCallIntelligenceDurationSecondsPositive()
    {
        return $this->container['call_intelligence_duration_seconds_positive'];
    }

    /**
     * Sets call_intelligence_duration_seconds_positive
     *
     * @param float|null $call_intelligence_duration_seconds_positive The duration in seconds for the length of time where detected voice was seen with a Positve sentiment
     *
     * @return self
     */
    public function setCallIntelligenceDurationSecondsPositive($call_intelligence_duration_seconds_positive)
    {
        if (is_null($call_intelligence_duration_seconds_positive)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_duration_seconds_positive cannot be null');
        }
        $this->container['call_intelligence_duration_seconds_positive'] = $call_intelligence_duration_seconds_positive;

        return $this;
    }

    /**
     * Gets call_intelligence_ending_duration_seconds
     *
     * @return float|null
     */
    public function getCallIntelligenceEndingDurationSeconds()
    {
        return $this->container['call_intelligence_ending_duration_seconds'];
    }

    /**
     * Sets call_intelligence_ending_duration_seconds
     *
     * @param float|null $call_intelligence_ending_duration_seconds call_intelligence_ending_duration_seconds
     *
     * @return self
     */
    public function setCallIntelligenceEndingDurationSeconds($call_intelligence_ending_duration_seconds)
    {
        if (is_null($call_intelligence_ending_duration_seconds)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_ending_duration_seconds cannot be null');
        }
        $this->container['call_intelligence_ending_duration_seconds'] = $call_intelligence_ending_duration_seconds;

        return $this;
    }

    /**
     * Gets call_intelligence_ending_duration_seconds_negative
     *
     * @return int|null
     */
    public function getCallIntelligenceEndingDurationSecondsNegative()
    {
        return $this->container['call_intelligence_ending_duration_seconds_negative'];
    }

    /**
     * Sets call_intelligence_ending_duration_seconds_negative
     *
     * @param int|null $call_intelligence_ending_duration_seconds_negative call_intelligence_ending_duration_seconds_negative
     *
     * @return self
     */
    public function setCallIntelligenceEndingDurationSecondsNegative($call_intelligence_ending_duration_seconds_negative)
    {
        if (is_null($call_intelligence_ending_duration_seconds_negative)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_ending_duration_seconds_negative cannot be null');
        }
        $this->container['call_intelligence_ending_duration_seconds_negative'] = $call_intelligence_ending_duration_seconds_negative;

        return $this;
    }

    /**
     * Gets call_intelligence_ending_duration_seconds_neutral
     *
     * @return float|null
     */
    public function getCallIntelligenceEndingDurationSecondsNeutral()
    {
        return $this->container['call_intelligence_ending_duration_seconds_neutral'];
    }

    /**
     * Sets call_intelligence_ending_duration_seconds_neutral
     *
     * @param float|null $call_intelligence_ending_duration_seconds_neutral call_intelligence_ending_duration_seconds_neutral
     *
     * @return self
     */
    public function setCallIntelligenceEndingDurationSecondsNeutral($call_intelligence_ending_duration_seconds_neutral)
    {
        if (is_null($call_intelligence_ending_duration_seconds_neutral)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_ending_duration_seconds_neutral cannot be null');
        }
        $this->container['call_intelligence_ending_duration_seconds_neutral'] = $call_intelligence_ending_duration_seconds_neutral;

        return $this;
    }

    /**
     * Gets call_intelligence_ending_duration_seconds_positive
     *
     * @return float|null
     */
    public function getCallIntelligenceEndingDurationSecondsPositive()
    {
        return $this->container['call_intelligence_ending_duration_seconds_positive'];
    }

    /**
     * Sets call_intelligence_ending_duration_seconds_positive
     *
     * @param float|null $call_intelligence_ending_duration_seconds_positive call_intelligence_ending_duration_seconds_positive
     *
     * @return self
     */
    public function setCallIntelligenceEndingDurationSecondsPositive($call_intelligence_ending_duration_seconds_positive)
    {
        if (is_null($call_intelligence_ending_duration_seconds_positive)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_ending_duration_seconds_positive cannot be null');
        }
        $this->container['call_intelligence_ending_duration_seconds_positive'] = $call_intelligence_ending_duration_seconds_positive;

        return $this;
    }

    /**
     * Gets call_intelligence_ending_percent_negative
     *
     * @return int|null
     */
    public function getCallIntelligenceEndingPercentNegative()
    {
        return $this->container['call_intelligence_ending_percent_negative'];
    }

    /**
     * Sets call_intelligence_ending_percent_negative
     *
     * @param int|null $call_intelligence_ending_percent_negative call_intelligence_ending_percent_negative
     *
     * @return self
     */
    public function setCallIntelligenceEndingPercentNegative($call_intelligence_ending_percent_negative)
    {
        if (is_null($call_intelligence_ending_percent_negative)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_ending_percent_negative cannot be null');
        }
        $this->container['call_intelligence_ending_percent_negative'] = $call_intelligence_ending_percent_negative;

        return $this;
    }

    /**
     * Gets call_intelligence_ending_percent_neutral
     *
     * @return int|null
     */
    public function getCallIntelligenceEndingPercentNeutral()
    {
        return $this->container['call_intelligence_ending_percent_neutral'];
    }

    /**
     * Sets call_intelligence_ending_percent_neutral
     *
     * @param int|null $call_intelligence_ending_percent_neutral call_intelligence_ending_percent_neutral
     *
     * @return self
     */
    public function setCallIntelligenceEndingPercentNeutral($call_intelligence_ending_percent_neutral)
    {
        if (is_null($call_intelligence_ending_percent_neutral)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_ending_percent_neutral cannot be null');
        }
        $this->container['call_intelligence_ending_percent_neutral'] = $call_intelligence_ending_percent_neutral;

        return $this;
    }

    /**
     * Gets call_intelligence_ending_percent_positive
     *
     * @return int|null
     */
    public function getCallIntelligenceEndingPercentPositive()
    {
        return $this->container['call_intelligence_ending_percent_positive'];
    }

    /**
     * Sets call_intelligence_ending_percent_positive
     *
     * @param int|null $call_intelligence_ending_percent_positive call_intelligence_ending_percent_positive
     *
     * @return self
     */
    public function setCallIntelligenceEndingPercentPositive($call_intelligence_ending_percent_positive)
    {
        if (is_null($call_intelligence_ending_percent_positive)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_ending_percent_positive cannot be null');
        }
        $this->container['call_intelligence_ending_percent_positive'] = $call_intelligence_ending_percent_positive;

        return $this;
    }

    /**
     * Gets call_intelligence_ending_sentiment_scale
     *
     * @return int|null
     */
    public function getCallIntelligenceEndingSentimentScale()
    {
        return $this->container['call_intelligence_ending_sentiment_scale'];
    }

    /**
     * Sets call_intelligence_ending_sentiment_scale
     *
     * @param int|null $call_intelligence_ending_sentiment_scale call_intelligence_ending_sentiment_scale
     *
     * @return self
     */
    public function setCallIntelligenceEndingSentimentScale($call_intelligence_ending_sentiment_scale)
    {
        if (is_null($call_intelligence_ending_sentiment_scale)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_ending_sentiment_scale cannot be null');
        }
        $this->container['call_intelligence_ending_sentiment_scale'] = $call_intelligence_ending_sentiment_scale;

        return $this;
    }

    /**
     * Gets call_intelligence_percent_negative
     *
     * @return int|null
     */
    public function getCallIntelligencePercentNegative()
    {
        return $this->container['call_intelligence_percent_negative'];
    }

    /**
     * Sets call_intelligence_percent_negative
     *
     * @param int|null $call_intelligence_percent_negative call_intelligence_percent_negative
     *
     * @return self
     */
    public function setCallIntelligencePercentNegative($call_intelligence_percent_negative)
    {
        if (is_null($call_intelligence_percent_negative)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_percent_negative cannot be null');
        }
        $this->container['call_intelligence_percent_negative'] = $call_intelligence_percent_negative;

        return $this;
    }

    /**
     * Gets call_intelligence_percent_neutral
     *
     * @return int|null
     */
    public function getCallIntelligencePercentNeutral()
    {
        return $this->container['call_intelligence_percent_neutral'];
    }

    /**
     * Sets call_intelligence_percent_neutral
     *
     * @param int|null $call_intelligence_percent_neutral call_intelligence_percent_neutral
     *
     * @return self
     */
    public function setCallIntelligencePercentNeutral($call_intelligence_percent_neutral)
    {
        if (is_null($call_intelligence_percent_neutral)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_percent_neutral cannot be null');
        }
        $this->container['call_intelligence_percent_neutral'] = $call_intelligence_percent_neutral;

        return $this;
    }

    /**
     * Gets call_intelligence_percent_positive
     *
     * @return int|null
     */
    public function getCallIntelligencePercentPositive()
    {
        return $this->container['call_intelligence_percent_positive'];
    }

    /**
     * Sets call_intelligence_percent_positive
     *
     * @param int|null $call_intelligence_percent_positive call_intelligence_percent_positive
     *
     * @return self
     */
    public function setCallIntelligencePercentPositive($call_intelligence_percent_positive)
    {
        if (is_null($call_intelligence_percent_positive)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_percent_positive cannot be null');
        }
        $this->container['call_intelligence_percent_positive'] = $call_intelligence_percent_positive;

        return $this;
    }

    /**
     * Gets call_intelligence_segments
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\TranscriptionCallIntelligenceSegmentsInner[]|null
     */
    public function getCallIntelligenceSegments()
    {
        return $this->container['call_intelligence_segments'];
    }

    /**
     * Sets call_intelligence_segments
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\TranscriptionCallIntelligenceSegmentsInner[]|null $call_intelligence_segments call_intelligence_segments
     *
     * @return self
     */
    public function setCallIntelligenceSegments($call_intelligence_segments)
    {
        if (is_null($call_intelligence_segments)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_segments cannot be null');
        }
        $this->container['call_intelligence_segments'] = $call_intelligence_segments;

        return $this;
    }

    /**
     * Gets call_intelligence_summary_status
     *
     * @return string|null
     */
    public function getCallIntelligenceSummaryStatus()
    {
        return $this->container['call_intelligence_summary_status'];
    }

    /**
     * Sets call_intelligence_summary_status
     *
     * @param string|null $call_intelligence_summary_status call_intelligence_summary_status
     *
     * @return self
     */
    public function setCallIntelligenceSummaryStatus($call_intelligence_summary_status)
    {
        if (is_null($call_intelligence_summary_status)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_summary_status cannot be null');
        }
        $this->container['call_intelligence_summary_status'] = $call_intelligence_summary_status;

        return $this;
    }

    /**
     * Gets call_intelligence_topics_all
     *
     * @return string[]|null
     */
    public function getCallIntelligenceTopicsAll()
    {
        return $this->container['call_intelligence_topics_all'];
    }

    /**
     * Sets call_intelligence_topics_all
     *
     * @param string[]|null $call_intelligence_topics_all The complete list of detected topics in the conversation
     *
     * @return self
     */
    public function setCallIntelligenceTopicsAll($call_intelligence_topics_all)
    {
        if (is_null($call_intelligence_topics_all)) {
            throw new \InvalidArgumentException('non-nullable call_intelligence_topics_all cannot be null');
        }
        $this->container['call_intelligence_topics_all'] = $call_intelligence_topics_all;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return string|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param string|null $errors If errors are present it will display here.
     *
     * @return self
     */
    public function setErrors($errors)
    {
        if (is_null($errors)) {
            throw new \InvalidArgumentException('non-nullable errors cannot be null');
        }
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets last_modified_datetime
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDatetime()
    {
        return $this->container['last_modified_datetime'];
    }

    /**
     * Sets last_modified_datetime
     *
     * @param \DateTime|null $last_modified_datetime The modified time of the transcription job. Difference between this and created-datetime will be the duration of the job in most cases.
     *
     * @return self
     */
    public function setLastModifiedDatetime($last_modified_datetime)
    {
        if (is_null($last_modified_datetime)) {
            throw new \InvalidArgumentException('non-nullable last_modified_datetime cannot be null');
        }
        $this->container['last_modified_datetime'] = $last_modified_datetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


