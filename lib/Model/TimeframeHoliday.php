<?php
/**
 * TimeframeHoliday
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * TimeframeHoliday Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeframeHoliday implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeframeHoliday';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'timeframe_id' => 'string',
        'timeframe_parent_id' => 'string',
        'ordinal_order' => 'float',
        'timeframe_holiday_uuid' => 'string',
        'timeframe_holiday_name' => 'string',
        'timeframe_holiday_begin_date' => 'string',
        'country_abbreviation' => 'string',
        'state_province_abbreviation' => 'string',
        'holiday_api_location_hint' => 'string',
        'timeframe_holiday_begin_time_1' => 'string',
        'timeframe_holiday_end_time_1' => 'string',
        'timeframe_holiday_begin_time_2' => 'string',
        'timeframe_holiday_end_time_2' => 'string',
        'timeframe_weekly_monday_observance_option' => 'string',
        'timeframe_weekly_tuesday_observance_option' => 'string',
        'timeframe_weekly_wednesday_observance_option' => 'string',
        'timeframe_weekly_thursday_observance_option' => 'string',
        'timeframe_weekly_friday_observance_option' => 'string',
        'timeframe_weekly_saturday_observance_option' => 'string',
        'timeframe_weekly_sunday_observance_option' => 'string',
        'timeframe_workweek_list' => 'string',
        'timeframe_recurrence_type' => 'string',
        'timeframe_recurrence_end_option' => 'string',
        'timeframe_recurrence_end_date' => 'string',
        'timeframe_expiry_datetime' => 'string',
        'domain' => 'string',
        'timeframe_next_observance_datetime' => 'float[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'timeframe_id' => null,
        'timeframe_parent_id' => null,
        'ordinal_order' => null,
        'timeframe_holiday_uuid' => null,
        'timeframe_holiday_name' => null,
        'timeframe_holiday_begin_date' => null,
        'country_abbreviation' => null,
        'state_province_abbreviation' => null,
        'holiday_api_location_hint' => null,
        'timeframe_holiday_begin_time_1' => null,
        'timeframe_holiday_end_time_1' => null,
        'timeframe_holiday_begin_time_2' => null,
        'timeframe_holiday_end_time_2' => null,
        'timeframe_weekly_monday_observance_option' => null,
        'timeframe_weekly_tuesday_observance_option' => null,
        'timeframe_weekly_wednesday_observance_option' => null,
        'timeframe_weekly_thursday_observance_option' => null,
        'timeframe_weekly_friday_observance_option' => null,
        'timeframe_weekly_saturday_observance_option' => null,
        'timeframe_weekly_sunday_observance_option' => null,
        'timeframe_workweek_list' => null,
        'timeframe_recurrence_type' => null,
        'timeframe_recurrence_end_option' => null,
        'timeframe_recurrence_end_date' => null,
        'timeframe_expiry_datetime' => null,
        'domain' => null,
        'timeframe_next_observance_datetime' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'timeframe_id' => false,
        'timeframe_parent_id' => false,
        'ordinal_order' => false,
        'timeframe_holiday_uuid' => false,
        'timeframe_holiday_name' => false,
        'timeframe_holiday_begin_date' => false,
        'country_abbreviation' => false,
        'state_province_abbreviation' => false,
        'holiday_api_location_hint' => false,
        'timeframe_holiday_begin_time_1' => false,
        'timeframe_holiday_end_time_1' => false,
        'timeframe_holiday_begin_time_2' => false,
        'timeframe_holiday_end_time_2' => false,
        'timeframe_weekly_monday_observance_option' => false,
        'timeframe_weekly_tuesday_observance_option' => false,
        'timeframe_weekly_wednesday_observance_option' => false,
        'timeframe_weekly_thursday_observance_option' => false,
        'timeframe_weekly_friday_observance_option' => false,
        'timeframe_weekly_saturday_observance_option' => false,
        'timeframe_weekly_sunday_observance_option' => false,
        'timeframe_workweek_list' => false,
        'timeframe_recurrence_type' => false,
        'timeframe_recurrence_end_option' => false,
        'timeframe_recurrence_end_date' => false,
        'timeframe_expiry_datetime' => false,
        'domain' => false,
        'timeframe_next_observance_datetime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timeframe_id' => 'timeframe-id',
        'timeframe_parent_id' => 'timeframe-parent-id',
        'ordinal_order' => 'ordinal-order',
        'timeframe_holiday_uuid' => 'timeframe-holiday-uuid',
        'timeframe_holiday_name' => 'timeframe-holiday-name',
        'timeframe_holiday_begin_date' => 'timeframe-holiday-begin-date',
        'country_abbreviation' => 'country-abbreviation',
        'state_province_abbreviation' => 'state-province-abbreviation',
        'holiday_api_location_hint' => 'holiday-api-location-hint',
        'timeframe_holiday_begin_time_1' => 'timeframe-holiday-begin-time-1',
        'timeframe_holiday_end_time_1' => 'timeframe-holiday-end-time-1',
        'timeframe_holiday_begin_time_2' => 'timeframe-holiday-begin-time-2',
        'timeframe_holiday_end_time_2' => 'timeframe-holiday-end-time-2',
        'timeframe_weekly_monday_observance_option' => 'timeframe-weekly-monday-observance-option',
        'timeframe_weekly_tuesday_observance_option' => 'timeframe-weekly-tuesday-observance-option',
        'timeframe_weekly_wednesday_observance_option' => 'timeframe-weekly-wednesday-observance-option',
        'timeframe_weekly_thursday_observance_option' => 'timeframe-weekly-thursday-observance-option',
        'timeframe_weekly_friday_observance_option' => 'timeframe-weekly-friday-observance-option',
        'timeframe_weekly_saturday_observance_option' => 'timeframe-weekly-saturday-observance-option',
        'timeframe_weekly_sunday_observance_option' => 'timeframe-weekly-sunday-observance-option',
        'timeframe_workweek_list' => 'timeframe-workweek-list',
        'timeframe_recurrence_type' => 'timeframe-recurrence-type',
        'timeframe_recurrence_end_option' => 'timeframe-recurrence-end-option',
        'timeframe_recurrence_end_date' => 'timeframe-recurrence-end-date',
        'timeframe_expiry_datetime' => 'timeframe-expiry-datetime',
        'domain' => 'domain',
        'timeframe_next_observance_datetime' => 'timeframe-next-observance-datetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timeframe_id' => 'setTimeframeId',
        'timeframe_parent_id' => 'setTimeframeParentId',
        'ordinal_order' => 'setOrdinalOrder',
        'timeframe_holiday_uuid' => 'setTimeframeHolidayUuid',
        'timeframe_holiday_name' => 'setTimeframeHolidayName',
        'timeframe_holiday_begin_date' => 'setTimeframeHolidayBeginDate',
        'country_abbreviation' => 'setCountryAbbreviation',
        'state_province_abbreviation' => 'setStateProvinceAbbreviation',
        'holiday_api_location_hint' => 'setHolidayApiLocationHint',
        'timeframe_holiday_begin_time_1' => 'setTimeframeHolidayBeginTime1',
        'timeframe_holiday_end_time_1' => 'setTimeframeHolidayEndTime1',
        'timeframe_holiday_begin_time_2' => 'setTimeframeHolidayBeginTime2',
        'timeframe_holiday_end_time_2' => 'setTimeframeHolidayEndTime2',
        'timeframe_weekly_monday_observance_option' => 'setTimeframeWeeklyMondayObservanceOption',
        'timeframe_weekly_tuesday_observance_option' => 'setTimeframeWeeklyTuesdayObservanceOption',
        'timeframe_weekly_wednesday_observance_option' => 'setTimeframeWeeklyWednesdayObservanceOption',
        'timeframe_weekly_thursday_observance_option' => 'setTimeframeWeeklyThursdayObservanceOption',
        'timeframe_weekly_friday_observance_option' => 'setTimeframeWeeklyFridayObservanceOption',
        'timeframe_weekly_saturday_observance_option' => 'setTimeframeWeeklySaturdayObservanceOption',
        'timeframe_weekly_sunday_observance_option' => 'setTimeframeWeeklySundayObservanceOption',
        'timeframe_workweek_list' => 'setTimeframeWorkweekList',
        'timeframe_recurrence_type' => 'setTimeframeRecurrenceType',
        'timeframe_recurrence_end_option' => 'setTimeframeRecurrenceEndOption',
        'timeframe_recurrence_end_date' => 'setTimeframeRecurrenceEndDate',
        'timeframe_expiry_datetime' => 'setTimeframeExpiryDatetime',
        'domain' => 'setDomain',
        'timeframe_next_observance_datetime' => 'setTimeframeNextObservanceDatetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timeframe_id' => 'getTimeframeId',
        'timeframe_parent_id' => 'getTimeframeParentId',
        'ordinal_order' => 'getOrdinalOrder',
        'timeframe_holiday_uuid' => 'getTimeframeHolidayUuid',
        'timeframe_holiday_name' => 'getTimeframeHolidayName',
        'timeframe_holiday_begin_date' => 'getTimeframeHolidayBeginDate',
        'country_abbreviation' => 'getCountryAbbreviation',
        'state_province_abbreviation' => 'getStateProvinceAbbreviation',
        'holiday_api_location_hint' => 'getHolidayApiLocationHint',
        'timeframe_holiday_begin_time_1' => 'getTimeframeHolidayBeginTime1',
        'timeframe_holiday_end_time_1' => 'getTimeframeHolidayEndTime1',
        'timeframe_holiday_begin_time_2' => 'getTimeframeHolidayBeginTime2',
        'timeframe_holiday_end_time_2' => 'getTimeframeHolidayEndTime2',
        'timeframe_weekly_monday_observance_option' => 'getTimeframeWeeklyMondayObservanceOption',
        'timeframe_weekly_tuesday_observance_option' => 'getTimeframeWeeklyTuesdayObservanceOption',
        'timeframe_weekly_wednesday_observance_option' => 'getTimeframeWeeklyWednesdayObservanceOption',
        'timeframe_weekly_thursday_observance_option' => 'getTimeframeWeeklyThursdayObservanceOption',
        'timeframe_weekly_friday_observance_option' => 'getTimeframeWeeklyFridayObservanceOption',
        'timeframe_weekly_saturday_observance_option' => 'getTimeframeWeeklySaturdayObservanceOption',
        'timeframe_weekly_sunday_observance_option' => 'getTimeframeWeeklySundayObservanceOption',
        'timeframe_workweek_list' => 'getTimeframeWorkweekList',
        'timeframe_recurrence_type' => 'getTimeframeRecurrenceType',
        'timeframe_recurrence_end_option' => 'getTimeframeRecurrenceEndOption',
        'timeframe_recurrence_end_date' => 'getTimeframeRecurrenceEndDate',
        'timeframe_expiry_datetime' => 'getTimeframeExpiryDatetime',
        'domain' => 'getDomain',
        'timeframe_next_observance_datetime' => 'getTimeframeNextObservanceDatetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('timeframe_id', $data ?? [], null);
        $this->setIfExists('timeframe_parent_id', $data ?? [], null);
        $this->setIfExists('ordinal_order', $data ?? [], null);
        $this->setIfExists('timeframe_holiday_uuid', $data ?? [], null);
        $this->setIfExists('timeframe_holiday_name', $data ?? [], null);
        $this->setIfExists('timeframe_holiday_begin_date', $data ?? [], null);
        $this->setIfExists('country_abbreviation', $data ?? [], null);
        $this->setIfExists('state_province_abbreviation', $data ?? [], null);
        $this->setIfExists('holiday_api_location_hint', $data ?? [], null);
        $this->setIfExists('timeframe_holiday_begin_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_holiday_end_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_holiday_begin_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_holiday_end_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_monday_observance_option', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_tuesday_observance_option', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_wednesday_observance_option', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_thursday_observance_option', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_friday_observance_option', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_saturday_observance_option', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_sunday_observance_option', $data ?? [], null);
        $this->setIfExists('timeframe_workweek_list', $data ?? [], null);
        $this->setIfExists('timeframe_recurrence_type', $data ?? [], null);
        $this->setIfExists('timeframe_recurrence_end_option', $data ?? [], null);
        $this->setIfExists('timeframe_recurrence_end_date', $data ?? [], null);
        $this->setIfExists('timeframe_expiry_datetime', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('timeframe_next_observance_datetime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timeframe_holiday_uuid'] === null) {
            $invalidProperties[] = "'timeframe_holiday_uuid' can't be null";
        }
        if ($this->container['timeframe_holiday_name'] === null) {
            $invalidProperties[] = "'timeframe_holiday_name' can't be null";
        }
        if ($this->container['timeframe_holiday_begin_date'] === null) {
            $invalidProperties[] = "'timeframe_holiday_begin_date' can't be null";
        }
        if ($this->container['country_abbreviation'] === null) {
            $invalidProperties[] = "'country_abbreviation' can't be null";
        }
        if ($this->container['state_province_abbreviation'] === null) {
            $invalidProperties[] = "'state_province_abbreviation' can't be null";
        }
        if ($this->container['holiday_api_location_hint'] === null) {
            $invalidProperties[] = "'holiday_api_location_hint' can't be null";
        }
        if ($this->container['timeframe_holiday_begin_time_1'] === null) {
            $invalidProperties[] = "'timeframe_holiday_begin_time_1' can't be null";
        }
        if ($this->container['timeframe_holiday_end_time_1'] === null) {
            $invalidProperties[] = "'timeframe_holiday_end_time_1' can't be null";
        }
        if ($this->container['timeframe_holiday_begin_time_2'] === null) {
            $invalidProperties[] = "'timeframe_holiday_begin_time_2' can't be null";
        }
        if ($this->container['timeframe_holiday_end_time_2'] === null) {
            $invalidProperties[] = "'timeframe_holiday_end_time_2' can't be null";
        }
        if ($this->container['timeframe_weekly_monday_observance_option'] === null) {
            $invalidProperties[] = "'timeframe_weekly_monday_observance_option' can't be null";
        }
        if ($this->container['timeframe_weekly_tuesday_observance_option'] === null) {
            $invalidProperties[] = "'timeframe_weekly_tuesday_observance_option' can't be null";
        }
        if ($this->container['timeframe_weekly_wednesday_observance_option'] === null) {
            $invalidProperties[] = "'timeframe_weekly_wednesday_observance_option' can't be null";
        }
        if ($this->container['timeframe_weekly_thursday_observance_option'] === null) {
            $invalidProperties[] = "'timeframe_weekly_thursday_observance_option' can't be null";
        }
        if ($this->container['timeframe_weekly_friday_observance_option'] === null) {
            $invalidProperties[] = "'timeframe_weekly_friday_observance_option' can't be null";
        }
        if ($this->container['timeframe_weekly_saturday_observance_option'] === null) {
            $invalidProperties[] = "'timeframe_weekly_saturday_observance_option' can't be null";
        }
        if ($this->container['timeframe_weekly_sunday_observance_option'] === null) {
            $invalidProperties[] = "'timeframe_weekly_sunday_observance_option' can't be null";
        }
        if ($this->container['timeframe_workweek_list'] === null) {
            $invalidProperties[] = "'timeframe_workweek_list' can't be null";
        }
        if ($this->container['timeframe_recurrence_type'] === null) {
            $invalidProperties[] = "'timeframe_recurrence_type' can't be null";
        }
        if ($this->container['timeframe_recurrence_end_option'] === null) {
            $invalidProperties[] = "'timeframe_recurrence_end_option' can't be null";
        }
        if ($this->container['timeframe_recurrence_end_date'] === null) {
            $invalidProperties[] = "'timeframe_recurrence_end_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timeframe_id
     *
     * @return string|null
     */
    public function getTimeframeId()
    {
        return $this->container['timeframe_id'];
    }

    /**
     * Sets timeframe_id
     *
     * @param string|null $timeframe_id timeframe_id
     *
     * @return self
     */
    public function setTimeframeId($timeframe_id)
    {
        if (is_null($timeframe_id)) {
            throw new \InvalidArgumentException('non-nullable timeframe_id cannot be null');
        }
        $this->container['timeframe_id'] = $timeframe_id;

        return $this;
    }

    /**
     * Gets timeframe_parent_id
     *
     * @return string|null
     */
    public function getTimeframeParentId()
    {
        return $this->container['timeframe_parent_id'];
    }

    /**
     * Sets timeframe_parent_id
     *
     * @param string|null $timeframe_parent_id timeframe_parent_id
     *
     * @return self
     */
    public function setTimeframeParentId($timeframe_parent_id)
    {
        if (is_null($timeframe_parent_id)) {
            throw new \InvalidArgumentException('non-nullable timeframe_parent_id cannot be null');
        }
        $this->container['timeframe_parent_id'] = $timeframe_parent_id;

        return $this;
    }

    /**
     * Gets ordinal_order
     *
     * @return float|null
     */
    public function getOrdinalOrder()
    {
        return $this->container['ordinal_order'];
    }

    /**
     * Sets ordinal_order
     *
     * @param float|null $ordinal_order ordinal_order
     *
     * @return self
     */
    public function setOrdinalOrder($ordinal_order)
    {
        if (is_null($ordinal_order)) {
            throw new \InvalidArgumentException('non-nullable ordinal_order cannot be null');
        }
        $this->container['ordinal_order'] = $ordinal_order;

        return $this;
    }

    /**
     * Gets timeframe_holiday_uuid
     *
     * @return string
     */
    public function getTimeframeHolidayUuid()
    {
        return $this->container['timeframe_holiday_uuid'];
    }

    /**
     * Sets timeframe_holiday_uuid
     *
     * @param string $timeframe_holiday_uuid UUID of the holiday as provided by the Holiday API
     *
     * @return self
     */
    public function setTimeframeHolidayUuid($timeframe_holiday_uuid)
    {
        if (is_null($timeframe_holiday_uuid)) {
            throw new \InvalidArgumentException('non-nullable timeframe_holiday_uuid cannot be null');
        }
        $this->container['timeframe_holiday_uuid'] = $timeframe_holiday_uuid;

        return $this;
    }

    /**
     * Gets timeframe_holiday_name
     *
     * @return string
     */
    public function getTimeframeHolidayName()
    {
        return $this->container['timeframe_holiday_name'];
    }

    /**
     * Sets timeframe_holiday_name
     *
     * @param string $timeframe_holiday_name Name of holiday as provided by the Holiday API
     *
     * @return self
     */
    public function setTimeframeHolidayName($timeframe_holiday_name)
    {
        if (is_null($timeframe_holiday_name)) {
            throw new \InvalidArgumentException('non-nullable timeframe_holiday_name cannot be null');
        }
        $this->container['timeframe_holiday_name'] = $timeframe_holiday_name;

        return $this;
    }

    /**
     * Gets timeframe_holiday_begin_date
     *
     * @return string
     */
    public function getTimeframeHolidayBeginDate()
    {
        return $this->container['timeframe_holiday_begin_date'];
    }

    /**
     * Sets timeframe_holiday_begin_date
     *
     * @param string $timeframe_holiday_begin_date First desired occurrence of the holiday - format: YYYYMMDD
     *
     * @return self
     */
    public function setTimeframeHolidayBeginDate($timeframe_holiday_begin_date)
    {
        if (is_null($timeframe_holiday_begin_date)) {
            throw new \InvalidArgumentException('non-nullable timeframe_holiday_begin_date cannot be null');
        }
        $this->container['timeframe_holiday_begin_date'] = $timeframe_holiday_begin_date;

        return $this;
    }

    /**
     * Gets country_abbreviation
     *
     * @return string
     */
    public function getCountryAbbreviation()
    {
        return $this->container['country_abbreviation'];
    }

    /**
     * Sets country_abbreviation
     *
     * @param string $country_abbreviation Country of the holiday as provided by the Holiday API
     *
     * @return self
     */
    public function setCountryAbbreviation($country_abbreviation)
    {
        if (is_null($country_abbreviation)) {
            throw new \InvalidArgumentException('non-nullable country_abbreviation cannot be null');
        }
        $this->container['country_abbreviation'] = $country_abbreviation;

        return $this;
    }

    /**
     * Gets state_province_abbreviation
     *
     * @return string
     */
    public function getStateProvinceAbbreviation()
    {
        return $this->container['state_province_abbreviation'];
    }

    /**
     * Sets state_province_abbreviation
     *
     * @param string $state_province_abbreviation Region of the holiday as provided by the Holiday API, formatted according to ISO 3166-2 standard.e.g.:```US-CA``` for California, United States```MX-SIN``` for Sinaloa, Mexico
     *
     * @return self
     */
    public function setStateProvinceAbbreviation($state_province_abbreviation)
    {
        if (is_null($state_province_abbreviation)) {
            throw new \InvalidArgumentException('non-nullable state_province_abbreviation cannot be null');
        }
        $this->container['state_province_abbreviation'] = $state_province_abbreviation;

        return $this;
    }

    /**
     * Gets holiday_api_location_hint
     *
     * @return string
     */
    public function getHolidayApiLocationHint()
    {
        return $this->container['holiday_api_location_hint'];
    }

    /**
     * Sets holiday_api_location_hint
     *
     * @param string $holiday_api_location_hint Locations of the holiday exactly as provided by the Holiday API
     *
     * @return self
     */
    public function setHolidayApiLocationHint($holiday_api_location_hint)
    {
        if (is_null($holiday_api_location_hint)) {
            throw new \InvalidArgumentException('non-nullable holiday_api_location_hint cannot be null');
        }
        $this->container['holiday_api_location_hint'] = $holiday_api_location_hint;

        return $this;
    }

    /**
     * Gets timeframe_holiday_begin_time_1
     *
     * @return string
     */
    public function getTimeframeHolidayBeginTime1()
    {
        return $this->container['timeframe_holiday_begin_time_1'];
    }

    /**
     * Sets timeframe_holiday_begin_time_1
     *
     * @param string $timeframe_holiday_begin_time_1 Beginning of the first time period during which the time frame will take effect on the holiday - format: hhmm
     *
     * @return self
     */
    public function setTimeframeHolidayBeginTime1($timeframe_holiday_begin_time_1)
    {
        if (is_null($timeframe_holiday_begin_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_holiday_begin_time_1 cannot be null');
        }
        $this->container['timeframe_holiday_begin_time_1'] = $timeframe_holiday_begin_time_1;

        return $this;
    }

    /**
     * Gets timeframe_holiday_end_time_1
     *
     * @return string
     */
    public function getTimeframeHolidayEndTime1()
    {
        return $this->container['timeframe_holiday_end_time_1'];
    }

    /**
     * Sets timeframe_holiday_end_time_1
     *
     * @param string $timeframe_holiday_end_time_1 End of the first time period during which the time frame will take effect on the holiday - format: hhmm
     *
     * @return self
     */
    public function setTimeframeHolidayEndTime1($timeframe_holiday_end_time_1)
    {
        if (is_null($timeframe_holiday_end_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_holiday_end_time_1 cannot be null');
        }
        $this->container['timeframe_holiday_end_time_1'] = $timeframe_holiday_end_time_1;

        return $this;
    }

    /**
     * Gets timeframe_holiday_begin_time_2
     *
     * @return string
     */
    public function getTimeframeHolidayBeginTime2()
    {
        return $this->container['timeframe_holiday_begin_time_2'];
    }

    /**
     * Sets timeframe_holiday_begin_time_2
     *
     * @param string $timeframe_holiday_begin_time_2 Beginning of the second time period, if there is one, during which the time frame will take effect on the holiday - format: hhmm
     *
     * @return self
     */
    public function setTimeframeHolidayBeginTime2($timeframe_holiday_begin_time_2)
    {
        if (is_null($timeframe_holiday_begin_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_holiday_begin_time_2 cannot be null');
        }
        $this->container['timeframe_holiday_begin_time_2'] = $timeframe_holiday_begin_time_2;

        return $this;
    }

    /**
     * Gets timeframe_holiday_end_time_2
     *
     * @return string
     */
    public function getTimeframeHolidayEndTime2()
    {
        return $this->container['timeframe_holiday_end_time_2'];
    }

    /**
     * Sets timeframe_holiday_end_time_2
     *
     * @param string $timeframe_holiday_end_time_2 End of the second time period, if there is one, during which the time frame will take effect on the holiday - format: hhmm
     *
     * @return self
     */
    public function setTimeframeHolidayEndTime2($timeframe_holiday_end_time_2)
    {
        if (is_null($timeframe_holiday_end_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_holiday_end_time_2 cannot be null');
        }
        $this->container['timeframe_holiday_end_time_2'] = $timeframe_holiday_end_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_monday_observance_option
     *
     * @return string
     */
    public function getTimeframeWeeklyMondayObservanceOption()
    {
        return $this->container['timeframe_weekly_monday_observance_option'];
    }

    /**
     * Sets timeframe_weekly_monday_observance_option
     *
     * @param string $timeframe_weekly_monday_observance_option ```observe-on-holiday-only```: Observe only on the exact holiday ```observe-on-holiday-and-next-day```: Observe on the exact holiday and the next day ```observe-on-holiday-and-prior-day```: Observe on the exact holiday and the prior day ```observe-on-exact-date-and-next-workday```: Observe on the exact holiday and the next workday ```observe-on-holiday-and-prior-workday```: Observe on the exact holiday and the prior workday ```observe-on-next-workday```: Observe only on the next workday ```observe-on-prior-workday```: Observe only on the prior workday
     *
     * @return self
     */
    public function setTimeframeWeeklyMondayObservanceOption($timeframe_weekly_monday_observance_option)
    {
        if (is_null($timeframe_weekly_monday_observance_option)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_monday_observance_option cannot be null');
        }
        $this->container['timeframe_weekly_monday_observance_option'] = $timeframe_weekly_monday_observance_option;

        return $this;
    }

    /**
     * Gets timeframe_weekly_tuesday_observance_option
     *
     * @return string
     */
    public function getTimeframeWeeklyTuesdayObservanceOption()
    {
        return $this->container['timeframe_weekly_tuesday_observance_option'];
    }

    /**
     * Sets timeframe_weekly_tuesday_observance_option
     *
     * @param string $timeframe_weekly_tuesday_observance_option ```observe-on-holiday-only```: Observe only on the exact holiday ```observe-on-holiday-and-next-day```: Observe on the exact holiday and the next day ```observe-on-holiday-and-prior-day```: Observe on the exact holiday and the prior day ```observe-on-exact-date-and-next-workday```: Observe on the exact holiday and the next workday ```observe-on-holiday-and-prior-workday```: Observe on the exact holiday and the prior workday ```observe-on-next-workday```: Observe only on the next workday ```observe-on-prior-workday```: Observe only on the prior workday
     *
     * @return self
     */
    public function setTimeframeWeeklyTuesdayObservanceOption($timeframe_weekly_tuesday_observance_option)
    {
        if (is_null($timeframe_weekly_tuesday_observance_option)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_tuesday_observance_option cannot be null');
        }
        $this->container['timeframe_weekly_tuesday_observance_option'] = $timeframe_weekly_tuesday_observance_option;

        return $this;
    }

    /**
     * Gets timeframe_weekly_wednesday_observance_option
     *
     * @return string
     */
    public function getTimeframeWeeklyWednesdayObservanceOption()
    {
        return $this->container['timeframe_weekly_wednesday_observance_option'];
    }

    /**
     * Sets timeframe_weekly_wednesday_observance_option
     *
     * @param string $timeframe_weekly_wednesday_observance_option ```observe-on-holiday-only```: Observe only on the exact holiday ```observe-on-holiday-and-next-day```: Observe on the exact holiday and the next day ```observe-on-holiday-and-prior-day```: Observe on the exact holiday and the prior day ```observe-on-exact-date-and-next-workday```: Observe on the exact holiday and the next workday ```observe-on-holiday-and-prior-workday```: Observe on the exact holiday and the prior workday ```observe-on-next-workday```: Observe only on the next workday ```observe-on-prior-workday```: Observe only on the prior workday
     *
     * @return self
     */
    public function setTimeframeWeeklyWednesdayObservanceOption($timeframe_weekly_wednesday_observance_option)
    {
        if (is_null($timeframe_weekly_wednesday_observance_option)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_wednesday_observance_option cannot be null');
        }
        $this->container['timeframe_weekly_wednesday_observance_option'] = $timeframe_weekly_wednesday_observance_option;

        return $this;
    }

    /**
     * Gets timeframe_weekly_thursday_observance_option
     *
     * @return string
     */
    public function getTimeframeWeeklyThursdayObservanceOption()
    {
        return $this->container['timeframe_weekly_thursday_observance_option'];
    }

    /**
     * Sets timeframe_weekly_thursday_observance_option
     *
     * @param string $timeframe_weekly_thursday_observance_option ```observe-on-holiday-only```: Observe only on the exact holiday ```observe-on-holiday-and-next-day```: Observe on the exact holiday and the next day ```observe-on-holiday-and-prior-day```: Observe on the exact holiday and the prior day ```observe-on-exact-date-and-next-workday```: Observe on the exact holiday and the next workday ```observe-on-holiday-and-prior-workday```: Observe on the exact holiday and the prior workday ```observe-on-next-workday```: Observe only on the next workday ```observe-on-prior-workday```: Observe only on the prior workday
     *
     * @return self
     */
    public function setTimeframeWeeklyThursdayObservanceOption($timeframe_weekly_thursday_observance_option)
    {
        if (is_null($timeframe_weekly_thursday_observance_option)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_thursday_observance_option cannot be null');
        }
        $this->container['timeframe_weekly_thursday_observance_option'] = $timeframe_weekly_thursday_observance_option;

        return $this;
    }

    /**
     * Gets timeframe_weekly_friday_observance_option
     *
     * @return string
     */
    public function getTimeframeWeeklyFridayObservanceOption()
    {
        return $this->container['timeframe_weekly_friday_observance_option'];
    }

    /**
     * Sets timeframe_weekly_friday_observance_option
     *
     * @param string $timeframe_weekly_friday_observance_option ```observe-on-holiday-only```: Observe only on the exact holiday ```observe-on-holiday-and-next-day```: Observe on the exact holiday and the next day ```observe-on-holiday-and-prior-day```: Observe on the exact holiday and the prior day ```observe-on-exact-date-and-next-workday```: Observe on the exact holiday and the next workday ```observe-on-holiday-and-prior-workday```: Observe on the exact holiday and the prior workday ```observe-on-next-workday```: Observe only on the next workday ```observe-on-prior-workday```: Observe only on the prior workday
     *
     * @return self
     */
    public function setTimeframeWeeklyFridayObservanceOption($timeframe_weekly_friday_observance_option)
    {
        if (is_null($timeframe_weekly_friday_observance_option)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_friday_observance_option cannot be null');
        }
        $this->container['timeframe_weekly_friday_observance_option'] = $timeframe_weekly_friday_observance_option;

        return $this;
    }

    /**
     * Gets timeframe_weekly_saturday_observance_option
     *
     * @return string
     */
    public function getTimeframeWeeklySaturdayObservanceOption()
    {
        return $this->container['timeframe_weekly_saturday_observance_option'];
    }

    /**
     * Sets timeframe_weekly_saturday_observance_option
     *
     * @param string $timeframe_weekly_saturday_observance_option ```observe-on-holiday-only```: Observe only on the exact holiday ```observe-on-holiday-and-next-day```: Observe on the exact holiday and the next day ```observe-on-holiday-and-prior-day```: Observe on the exact holiday and the prior day ```observe-on-exact-date-and-next-workday```: Observe on the exact holiday and the next workday ```observe-on-holiday-and-prior-workday```: Observe on the exact holiday and the prior workday ```observe-on-next-workday```: Observe only on the next workday ```observe-on-prior-workday```: Observe only on the prior workday
     *
     * @return self
     */
    public function setTimeframeWeeklySaturdayObservanceOption($timeframe_weekly_saturday_observance_option)
    {
        if (is_null($timeframe_weekly_saturday_observance_option)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_saturday_observance_option cannot be null');
        }
        $this->container['timeframe_weekly_saturday_observance_option'] = $timeframe_weekly_saturday_observance_option;

        return $this;
    }

    /**
     * Gets timeframe_weekly_sunday_observance_option
     *
     * @return string
     */
    public function getTimeframeWeeklySundayObservanceOption()
    {
        return $this->container['timeframe_weekly_sunday_observance_option'];
    }

    /**
     * Sets timeframe_weekly_sunday_observance_option
     *
     * @param string $timeframe_weekly_sunday_observance_option ```observe-on-holiday-only```: Observe only on the exact holiday ```observe-on-holiday-and-next-day```: Observe on the exact holiday and the next day ```observe-on-holiday-and-prior-day```: Observe on the exact holiday and the prior day ```observe-on-exact-date-and-next-workday```: Observe on the exact holiday and the next workday ```observe-on-holiday-and-prior-workday```: Observe on the exact holiday and the prior workday ```observe-on-next-workday```: Observe only on the next workday ```observe-on-prior-workday```: Observe only on the prior workday
     *
     * @return self
     */
    public function setTimeframeWeeklySundayObservanceOption($timeframe_weekly_sunday_observance_option)
    {
        if (is_null($timeframe_weekly_sunday_observance_option)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_sunday_observance_option cannot be null');
        }
        $this->container['timeframe_weekly_sunday_observance_option'] = $timeframe_weekly_sunday_observance_option;

        return $this;
    }

    /**
     * Gets timeframe_workweek_list
     *
     * @return string
     */
    public function getTimeframeWorkweekList()
    {
        return $this->container['timeframe_workweek_list'];
    }

    /**
     * Sets timeframe_workweek_list
     *
     * @param string $timeframe_workweek_list Comma-separated list containing days of the week to be considered workdays (minimum of 4, maximum of 6). e.g.: ```M,T,Th,F,S,Su``` would produce a workweek of Monday, Tuesday, Thursday, Friday, Saturday, and Sunday
     *
     * @return self
     */
    public function setTimeframeWorkweekList($timeframe_workweek_list)
    {
        if (is_null($timeframe_workweek_list)) {
            throw new \InvalidArgumentException('non-nullable timeframe_workweek_list cannot be null');
        }
        $this->container['timeframe_workweek_list'] = $timeframe_workweek_list;

        return $this;
    }

    /**
     * Gets timeframe_recurrence_type
     *
     * @return string
     */
    public function getTimeframeRecurrenceType()
    {
        return $this->container['timeframe_recurrence_type'];
    }

    /**
     * Sets timeframe_recurrence_type
     *
     * @param string $timeframe_recurrence_type ```never```: No recurrence. ```yearlyOnHoliday```: Recurs every year on the holiday.
     *
     * @return self
     */
    public function setTimeframeRecurrenceType($timeframe_recurrence_type)
    {
        if (is_null($timeframe_recurrence_type)) {
            throw new \InvalidArgumentException('non-nullable timeframe_recurrence_type cannot be null');
        }
        $this->container['timeframe_recurrence_type'] = $timeframe_recurrence_type;

        return $this;
    }

    /**
     * Gets timeframe_recurrence_end_option
     *
     * @return string
     */
    public function getTimeframeRecurrenceEndOption()
    {
        return $this->container['timeframe_recurrence_end_option'];
    }

    /**
     * Sets timeframe_recurrence_end_option
     *
     * @param string $timeframe_recurrence_end_option ```never```: recurs indefinitely.  ```onDate```: ends on the date specified in ```recurrence_end_date``` - note: both fields must be set to produce the desired behavior
     *
     * @return self
     */
    public function setTimeframeRecurrenceEndOption($timeframe_recurrence_end_option)
    {
        if (is_null($timeframe_recurrence_end_option)) {
            throw new \InvalidArgumentException('non-nullable timeframe_recurrence_end_option cannot be null');
        }
        $this->container['timeframe_recurrence_end_option'] = $timeframe_recurrence_end_option;

        return $this;
    }

    /**
     * Gets timeframe_recurrence_end_date
     *
     * @return string
     */
    public function getTimeframeRecurrenceEndDate()
    {
        return $this->container['timeframe_recurrence_end_date'];
    }

    /**
     * Sets timeframe_recurrence_end_date
     *
     * @param string $timeframe_recurrence_end_date YYYYMMDD
     *
     * @return self
     */
    public function setTimeframeRecurrenceEndDate($timeframe_recurrence_end_date)
    {
        if (is_null($timeframe_recurrence_end_date)) {
            throw new \InvalidArgumentException('non-nullable timeframe_recurrence_end_date cannot be null');
        }
        $this->container['timeframe_recurrence_end_date'] = $timeframe_recurrence_end_date;

        return $this;
    }

    /**
     * Gets timeframe_expiry_datetime
     *
     * @return string|null
     */
    public function getTimeframeExpiryDatetime()
    {
        return $this->container['timeframe_expiry_datetime'];
    }

    /**
     * Sets timeframe_expiry_datetime
     *
     * @param string|null $timeframe_expiry_datetime End date of recurrence - format: YYYYMMDD
     *
     * @return self
     */
    public function setTimeframeExpiryDatetime($timeframe_expiry_datetime)
    {
        if (is_null($timeframe_expiry_datetime)) {
            throw new \InvalidArgumentException('non-nullable timeframe_expiry_datetime cannot be null');
        }
        $this->container['timeframe_expiry_datetime'] = $timeframe_expiry_datetime;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets timeframe_next_observance_datetime
     *
     * @return float[]|null
     */
    public function getTimeframeNextObservanceDatetime()
    {
        return $this->container['timeframe_next_observance_datetime'];
    }

    /**
     * Sets timeframe_next_observance_datetime
     *
     * @param float[]|null $timeframe_next_observance_datetime timeframe_next_observance_datetime
     *
     * @return self
     */
    public function setTimeframeNextObservanceDatetime($timeframe_next_observance_datetime)
    {
        if (is_null($timeframe_next_observance_datetime)) {
            throw new \InvalidArgumentException('non-nullable timeframe_next_observance_datetime cannot be null');
        }
        $this->container['timeframe_next_observance_datetime'] = $timeframe_next_observance_datetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


