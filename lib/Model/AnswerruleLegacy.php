<?php
/**
 * AnswerruleLegacy
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * AnswerruleLegacy Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AnswerruleLegacy implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnswerruleLegacy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'domain' => 'string',
        'user' => 'int',
        'time_frame' => 'string',
        'priority' => 'int',
        'enable' => 'string',
        'acp_control' => 'string',
        'acp_parameters' => 'string',
        'dnd_control' => 'string',
        'fbu_control' => 'string',
        'fbu_parameters' => 'string',
        'fna_control' => 'string',
        'fna_parameters' => 'string',
        'fnr_control' => 'string',
        'fnr_parameters' => 'string',
        'foa_control' => 'string',
        'foa_parameters' => 'string',
        'for_control' => 'string',
        'for_parameters' => 'string',
        'fsp_control' => 'string',
        'fsp_parameters' => 'string',
        'pna_control' => 'string',
        'pna_parameters' => 'string',
        'rej_control' => 'string',
        'rej_parameters' => 'string',
        'scr_control' => 'string',
        'sim_control' => 'string',
        'sim_parameters' => 'string',
        'active' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'domain' => null,
        'user' => null,
        'time_frame' => null,
        'priority' => null,
        'enable' => null,
        'acp_control' => null,
        'acp_parameters' => null,
        'dnd_control' => null,
        'fbu_control' => null,
        'fbu_parameters' => null,
        'fna_control' => null,
        'fna_parameters' => null,
        'fnr_control' => null,
        'fnr_parameters' => null,
        'foa_control' => null,
        'foa_parameters' => null,
        'for_control' => null,
        'for_parameters' => null,
        'fsp_control' => null,
        'fsp_parameters' => null,
        'pna_control' => null,
        'pna_parameters' => null,
        'rej_control' => null,
        'rej_parameters' => null,
        'scr_control' => null,
        'sim_control' => null,
        'sim_parameters' => null,
        'active' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'domain' => false,
        'user' => false,
        'time_frame' => false,
        'priority' => false,
        'enable' => false,
        'acp_control' => false,
        'acp_parameters' => false,
        'dnd_control' => false,
        'fbu_control' => false,
        'fbu_parameters' => false,
        'fna_control' => false,
        'fna_parameters' => false,
        'fnr_control' => false,
        'fnr_parameters' => false,
        'foa_control' => false,
        'foa_parameters' => false,
        'for_control' => false,
        'for_parameters' => false,
        'fsp_control' => false,
        'fsp_parameters' => false,
        'pna_control' => false,
        'pna_parameters' => false,
        'rej_control' => false,
        'rej_parameters' => false,
        'scr_control' => false,
        'sim_control' => false,
        'sim_parameters' => false,
        'active' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
        'user' => 'user',
        'time_frame' => 'time_frame',
        'priority' => 'priority',
        'enable' => 'enable',
        'acp_control' => 'acp_control',
        'acp_parameters' => 'acp_parameters',
        'dnd_control' => 'dnd_control',
        'fbu_control' => 'fbu_control',
        'fbu_parameters' => 'fbu_parameters',
        'fna_control' => 'fna_control',
        'fna_parameters' => 'fna_parameters',
        'fnr_control' => 'fnr_control',
        'fnr_parameters' => 'fnr_parameters',
        'foa_control' => 'foa_control',
        'foa_parameters' => 'foa_parameters',
        'for_control' => 'for_control',
        'for_parameters' => 'for_parameters',
        'fsp_control' => 'fsp_control',
        'fsp_parameters' => 'fsp_parameters',
        'pna_control' => 'pna_control',
        'pna_parameters' => 'pna_parameters',
        'rej_control' => 'rej_control',
        'rej_parameters' => 'rej_parameters',
        'scr_control' => 'scr_control',
        'sim_control' => 'sim_control',
        'sim_parameters' => 'sim_parameters',
        'active' => 'active'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'user' => 'setUser',
        'time_frame' => 'setTimeFrame',
        'priority' => 'setPriority',
        'enable' => 'setEnable',
        'acp_control' => 'setAcpControl',
        'acp_parameters' => 'setAcpParameters',
        'dnd_control' => 'setDndControl',
        'fbu_control' => 'setFbuControl',
        'fbu_parameters' => 'setFbuParameters',
        'fna_control' => 'setFnaControl',
        'fna_parameters' => 'setFnaParameters',
        'fnr_control' => 'setFnrControl',
        'fnr_parameters' => 'setFnrParameters',
        'foa_control' => 'setFoaControl',
        'foa_parameters' => 'setFoaParameters',
        'for_control' => 'setForControl',
        'for_parameters' => 'setForParameters',
        'fsp_control' => 'setFspControl',
        'fsp_parameters' => 'setFspParameters',
        'pna_control' => 'setPnaControl',
        'pna_parameters' => 'setPnaParameters',
        'rej_control' => 'setRejControl',
        'rej_parameters' => 'setRejParameters',
        'scr_control' => 'setScrControl',
        'sim_control' => 'setSimControl',
        'sim_parameters' => 'setSimParameters',
        'active' => 'setActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'user' => 'getUser',
        'time_frame' => 'getTimeFrame',
        'priority' => 'getPriority',
        'enable' => 'getEnable',
        'acp_control' => 'getAcpControl',
        'acp_parameters' => 'getAcpParameters',
        'dnd_control' => 'getDndControl',
        'fbu_control' => 'getFbuControl',
        'fbu_parameters' => 'getFbuParameters',
        'fna_control' => 'getFnaControl',
        'fna_parameters' => 'getFnaParameters',
        'fnr_control' => 'getFnrControl',
        'fnr_parameters' => 'getFnrParameters',
        'foa_control' => 'getFoaControl',
        'foa_parameters' => 'getFoaParameters',
        'for_control' => 'getForControl',
        'for_parameters' => 'getForParameters',
        'fsp_control' => 'getFspControl',
        'fsp_parameters' => 'getFspParameters',
        'pna_control' => 'getPnaControl',
        'pna_parameters' => 'getPnaParameters',
        'rej_control' => 'getRejControl',
        'rej_parameters' => 'getRejParameters',
        'scr_control' => 'getScrControl',
        'sim_control' => 'getSimControl',
        'sim_parameters' => 'getSimParameters',
        'active' => 'getActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('time_frame', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('enable', $data ?? [], null);
        $this->setIfExists('acp_control', $data ?? [], null);
        $this->setIfExists('acp_parameters', $data ?? [], null);
        $this->setIfExists('dnd_control', $data ?? [], null);
        $this->setIfExists('fbu_control', $data ?? [], null);
        $this->setIfExists('fbu_parameters', $data ?? [], null);
        $this->setIfExists('fna_control', $data ?? [], null);
        $this->setIfExists('fna_parameters', $data ?? [], null);
        $this->setIfExists('fnr_control', $data ?? [], null);
        $this->setIfExists('fnr_parameters', $data ?? [], null);
        $this->setIfExists('foa_control', $data ?? [], null);
        $this->setIfExists('foa_parameters', $data ?? [], null);
        $this->setIfExists('for_control', $data ?? [], null);
        $this->setIfExists('for_parameters', $data ?? [], null);
        $this->setIfExists('fsp_control', $data ?? [], null);
        $this->setIfExists('fsp_parameters', $data ?? [], null);
        $this->setIfExists('pna_control', $data ?? [], null);
        $this->setIfExists('pna_parameters', $data ?? [], null);
        $this->setIfExists('rej_control', $data ?? [], null);
        $this->setIfExists('rej_parameters', $data ?? [], null);
        $this->setIfExists('scr_control', $data ?? [], null);
        $this->setIfExists('sim_control', $data ?? [], null);
        $this->setIfExists('sim_parameters', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['time_frame'] === null) {
            $invalidProperties[] = "'time_frame' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if ($this->container['enable'] === null) {
            $invalidProperties[] = "'enable' can't be null";
        }
        if ($this->container['sim_parameters'] === null) {
            $invalidProperties[] = "'sim_parameters' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets user
     *
     * @return int
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param int $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets time_frame
     *
     * @return string
     */
    public function getTimeFrame()
    {
        return $this->container['time_frame'];
    }

    /**
     * Sets time_frame
     *
     * @param string $time_frame time_frame
     *
     * @return self
     */
    public function setTimeFrame($time_frame)
    {
        if (is_null($time_frame)) {
            throw new \InvalidArgumentException('non-nullable time_frame cannot be null');
        }
        $this->container['time_frame'] = $time_frame;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return string
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param string $enable enable
     *
     * @return self
     */
    public function setEnable($enable)
    {
        if (is_null($enable)) {
            throw new \InvalidArgumentException('non-nullable enable cannot be null');
        }
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets acp_control
     *
     * @return string|null
     */
    public function getAcpControl()
    {
        return $this->container['acp_control'];
    }

    /**
     * Sets acp_control
     *
     * @param string|null $acp_control acp_control
     *
     * @return self
     */
    public function setAcpControl($acp_control)
    {
        if (is_null($acp_control)) {
            throw new \InvalidArgumentException('non-nullable acp_control cannot be null');
        }
        $this->container['acp_control'] = $acp_control;

        return $this;
    }

    /**
     * Gets acp_parameters
     *
     * @return string|null
     */
    public function getAcpParameters()
    {
        return $this->container['acp_parameters'];
    }

    /**
     * Sets acp_parameters
     *
     * @param string|null $acp_parameters acp_parameters
     *
     * @return self
     */
    public function setAcpParameters($acp_parameters)
    {
        if (is_null($acp_parameters)) {
            throw new \InvalidArgumentException('non-nullable acp_parameters cannot be null');
        }
        $this->container['acp_parameters'] = $acp_parameters;

        return $this;
    }

    /**
     * Gets dnd_control
     *
     * @return string|null
     */
    public function getDndControl()
    {
        return $this->container['dnd_control'];
    }

    /**
     * Sets dnd_control
     *
     * @param string|null $dnd_control dnd_control
     *
     * @return self
     */
    public function setDndControl($dnd_control)
    {
        if (is_null($dnd_control)) {
            throw new \InvalidArgumentException('non-nullable dnd_control cannot be null');
        }
        $this->container['dnd_control'] = $dnd_control;

        return $this;
    }

    /**
     * Gets fbu_control
     *
     * @return string|null
     */
    public function getFbuControl()
    {
        return $this->container['fbu_control'];
    }

    /**
     * Sets fbu_control
     *
     * @param string|null $fbu_control fbu_control
     *
     * @return self
     */
    public function setFbuControl($fbu_control)
    {
        if (is_null($fbu_control)) {
            throw new \InvalidArgumentException('non-nullable fbu_control cannot be null');
        }
        $this->container['fbu_control'] = $fbu_control;

        return $this;
    }

    /**
     * Gets fbu_parameters
     *
     * @return string|null
     */
    public function getFbuParameters()
    {
        return $this->container['fbu_parameters'];
    }

    /**
     * Sets fbu_parameters
     *
     * @param string|null $fbu_parameters fbu_parameters
     *
     * @return self
     */
    public function setFbuParameters($fbu_parameters)
    {
        if (is_null($fbu_parameters)) {
            throw new \InvalidArgumentException('non-nullable fbu_parameters cannot be null');
        }
        $this->container['fbu_parameters'] = $fbu_parameters;

        return $this;
    }

    /**
     * Gets fna_control
     *
     * @return string|null
     */
    public function getFnaControl()
    {
        return $this->container['fna_control'];
    }

    /**
     * Sets fna_control
     *
     * @param string|null $fna_control fna_control
     *
     * @return self
     */
    public function setFnaControl($fna_control)
    {
        if (is_null($fna_control)) {
            throw new \InvalidArgumentException('non-nullable fna_control cannot be null');
        }
        $this->container['fna_control'] = $fna_control;

        return $this;
    }

    /**
     * Gets fna_parameters
     *
     * @return string|null
     */
    public function getFnaParameters()
    {
        return $this->container['fna_parameters'];
    }

    /**
     * Sets fna_parameters
     *
     * @param string|null $fna_parameters fna_parameters
     *
     * @return self
     */
    public function setFnaParameters($fna_parameters)
    {
        if (is_null($fna_parameters)) {
            throw new \InvalidArgumentException('non-nullable fna_parameters cannot be null');
        }
        $this->container['fna_parameters'] = $fna_parameters;

        return $this;
    }

    /**
     * Gets fnr_control
     *
     * @return string|null
     */
    public function getFnrControl()
    {
        return $this->container['fnr_control'];
    }

    /**
     * Sets fnr_control
     *
     * @param string|null $fnr_control fnr_control
     *
     * @return self
     */
    public function setFnrControl($fnr_control)
    {
        if (is_null($fnr_control)) {
            throw new \InvalidArgumentException('non-nullable fnr_control cannot be null');
        }
        $this->container['fnr_control'] = $fnr_control;

        return $this;
    }

    /**
     * Gets fnr_parameters
     *
     * @return string|null
     */
    public function getFnrParameters()
    {
        return $this->container['fnr_parameters'];
    }

    /**
     * Sets fnr_parameters
     *
     * @param string|null $fnr_parameters fnr_parameters
     *
     * @return self
     */
    public function setFnrParameters($fnr_parameters)
    {
        if (is_null($fnr_parameters)) {
            throw new \InvalidArgumentException('non-nullable fnr_parameters cannot be null');
        }
        $this->container['fnr_parameters'] = $fnr_parameters;

        return $this;
    }

    /**
     * Gets foa_control
     *
     * @return string|null
     */
    public function getFoaControl()
    {
        return $this->container['foa_control'];
    }

    /**
     * Sets foa_control
     *
     * @param string|null $foa_control foa_control
     *
     * @return self
     */
    public function setFoaControl($foa_control)
    {
        if (is_null($foa_control)) {
            throw new \InvalidArgumentException('non-nullable foa_control cannot be null');
        }
        $this->container['foa_control'] = $foa_control;

        return $this;
    }

    /**
     * Gets foa_parameters
     *
     * @return string|null
     */
    public function getFoaParameters()
    {
        return $this->container['foa_parameters'];
    }

    /**
     * Sets foa_parameters
     *
     * @param string|null $foa_parameters foa_parameters
     *
     * @return self
     */
    public function setFoaParameters($foa_parameters)
    {
        if (is_null($foa_parameters)) {
            throw new \InvalidArgumentException('non-nullable foa_parameters cannot be null');
        }
        $this->container['foa_parameters'] = $foa_parameters;

        return $this;
    }

    /**
     * Gets for_control
     *
     * @return string|null
     */
    public function getForControl()
    {
        return $this->container['for_control'];
    }

    /**
     * Sets for_control
     *
     * @param string|null $for_control for_control
     *
     * @return self
     */
    public function setForControl($for_control)
    {
        if (is_null($for_control)) {
            throw new \InvalidArgumentException('non-nullable for_control cannot be null');
        }
        $this->container['for_control'] = $for_control;

        return $this;
    }

    /**
     * Gets for_parameters
     *
     * @return string|null
     */
    public function getForParameters()
    {
        return $this->container['for_parameters'];
    }

    /**
     * Sets for_parameters
     *
     * @param string|null $for_parameters for_parameters
     *
     * @return self
     */
    public function setForParameters($for_parameters)
    {
        if (is_null($for_parameters)) {
            throw new \InvalidArgumentException('non-nullable for_parameters cannot be null');
        }
        $this->container['for_parameters'] = $for_parameters;

        return $this;
    }

    /**
     * Gets fsp_control
     *
     * @return string|null
     */
    public function getFspControl()
    {
        return $this->container['fsp_control'];
    }

    /**
     * Sets fsp_control
     *
     * @param string|null $fsp_control fsp_control
     *
     * @return self
     */
    public function setFspControl($fsp_control)
    {
        if (is_null($fsp_control)) {
            throw new \InvalidArgumentException('non-nullable fsp_control cannot be null');
        }
        $this->container['fsp_control'] = $fsp_control;

        return $this;
    }

    /**
     * Gets fsp_parameters
     *
     * @return string|null
     */
    public function getFspParameters()
    {
        return $this->container['fsp_parameters'];
    }

    /**
     * Sets fsp_parameters
     *
     * @param string|null $fsp_parameters fsp_parameters
     *
     * @return self
     */
    public function setFspParameters($fsp_parameters)
    {
        if (is_null($fsp_parameters)) {
            throw new \InvalidArgumentException('non-nullable fsp_parameters cannot be null');
        }
        $this->container['fsp_parameters'] = $fsp_parameters;

        return $this;
    }

    /**
     * Gets pna_control
     *
     * @return string|null
     */
    public function getPnaControl()
    {
        return $this->container['pna_control'];
    }

    /**
     * Sets pna_control
     *
     * @param string|null $pna_control pna_control
     *
     * @return self
     */
    public function setPnaControl($pna_control)
    {
        if (is_null($pna_control)) {
            throw new \InvalidArgumentException('non-nullable pna_control cannot be null');
        }
        $this->container['pna_control'] = $pna_control;

        return $this;
    }

    /**
     * Gets pna_parameters
     *
     * @return string|null
     */
    public function getPnaParameters()
    {
        return $this->container['pna_parameters'];
    }

    /**
     * Sets pna_parameters
     *
     * @param string|null $pna_parameters pna_parameters
     *
     * @return self
     */
    public function setPnaParameters($pna_parameters)
    {
        if (is_null($pna_parameters)) {
            throw new \InvalidArgumentException('non-nullable pna_parameters cannot be null');
        }
        $this->container['pna_parameters'] = $pna_parameters;

        return $this;
    }

    /**
     * Gets rej_control
     *
     * @return string|null
     */
    public function getRejControl()
    {
        return $this->container['rej_control'];
    }

    /**
     * Sets rej_control
     *
     * @param string|null $rej_control rej_control
     *
     * @return self
     */
    public function setRejControl($rej_control)
    {
        if (is_null($rej_control)) {
            throw new \InvalidArgumentException('non-nullable rej_control cannot be null');
        }
        $this->container['rej_control'] = $rej_control;

        return $this;
    }

    /**
     * Gets rej_parameters
     *
     * @return string|null
     */
    public function getRejParameters()
    {
        return $this->container['rej_parameters'];
    }

    /**
     * Sets rej_parameters
     *
     * @param string|null $rej_parameters rej_parameters
     *
     * @return self
     */
    public function setRejParameters($rej_parameters)
    {
        if (is_null($rej_parameters)) {
            throw new \InvalidArgumentException('non-nullable rej_parameters cannot be null');
        }
        $this->container['rej_parameters'] = $rej_parameters;

        return $this;
    }

    /**
     * Gets scr_control
     *
     * @return string|null
     */
    public function getScrControl()
    {
        return $this->container['scr_control'];
    }

    /**
     * Sets scr_control
     *
     * @param string|null $scr_control scr_control
     *
     * @return self
     */
    public function setScrControl($scr_control)
    {
        if (is_null($scr_control)) {
            throw new \InvalidArgumentException('non-nullable scr_control cannot be null');
        }
        $this->container['scr_control'] = $scr_control;

        return $this;
    }

    /**
     * Gets sim_control
     *
     * @return string|null
     */
    public function getSimControl()
    {
        return $this->container['sim_control'];
    }

    /**
     * Sets sim_control
     *
     * @param string|null $sim_control sim_control
     *
     * @return self
     */
    public function setSimControl($sim_control)
    {
        if (is_null($sim_control)) {
            throw new \InvalidArgumentException('non-nullable sim_control cannot be null');
        }
        $this->container['sim_control'] = $sim_control;

        return $this;
    }

    /**
     * Gets sim_parameters
     *
     * @return string
     */
    public function getSimParameters()
    {
        return $this->container['sim_parameters'];
    }

    /**
     * Sets sim_parameters
     *
     * @param string $sim_parameters sim_parameters
     *
     * @return self
     */
    public function setSimParameters($sim_parameters)
    {
        if (is_null($sim_parameters)) {
            throw new \InvalidArgumentException('non-nullable sim_parameters cannot be null');
        }
        $this->container['sim_parameters'] = $sim_parameters;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


