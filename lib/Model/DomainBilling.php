<?php
/**
 * DomainBilling
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * DomainBilling Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomainBilling implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DomainBilling';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'domain' => 'string',
        'description' => 'string',
        'reseller' => 'string',
        'limits_max_active_calls_total' => 'int',
        'limits_max_call_queues' => 'int',
        'limits_max_auto_attendants' => 'int',
        'limits_max_conferences' => 'int',
        'limits_max_departments' => 'int',
        'limits_max_users_toal' => 'int',
        'count_users_total' => 'int',
        'count_departments' => 'int',
        'count_call_queues' => 'int',
        'count_call_center_agents' => 'int',
        'count_call_parks' => 'int',
        'count_auto_attendants' => 'int',
        'count_conferences' => 'int',
        'count_phone_numbers' => 'int',
        'count_phone_numbers_toll_free' => 'int',
        'count_user_scopes_basic_users' => 'int',
        'count_devices_registered' => 'int',
        'count_devices_total' => 'int',
        'stats_calculation_duration_milliseconds' => 'int',
        'active_calls_onnet_last_month' => 'int',
        'active_calls_offnet_last_month' => 'int',
        'active_calls_onnet_this_month' => 'int',
        'active_calls_offnet_this_month' => 'int',
        'sms_received_last_month' => 'int',
        'sms_received_this_month' => 'int',
        'sms_received_today' => 'int',
        'sms_sent_today' => 'int',
        'sms_sent_this_month' => 'int',
        'sms_sent_last_month' => 'int',
        'allow_video_conference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'domain' => null,
        'description' => null,
        'reseller' => null,
        'limits_max_active_calls_total' => null,
        'limits_max_call_queues' => null,
        'limits_max_auto_attendants' => null,
        'limits_max_conferences' => null,
        'limits_max_departments' => null,
        'limits_max_users_toal' => null,
        'count_users_total' => null,
        'count_departments' => null,
        'count_call_queues' => null,
        'count_call_center_agents' => null,
        'count_call_parks' => null,
        'count_auto_attendants' => null,
        'count_conferences' => null,
        'count_phone_numbers' => null,
        'count_phone_numbers_toll_free' => null,
        'count_user_scopes_basic_users' => null,
        'count_devices_registered' => null,
        'count_devices_total' => null,
        'stats_calculation_duration_milliseconds' => null,
        'active_calls_onnet_last_month' => null,
        'active_calls_offnet_last_month' => null,
        'active_calls_onnet_this_month' => null,
        'active_calls_offnet_this_month' => null,
        'sms_received_last_month' => null,
        'sms_received_this_month' => null,
        'sms_received_today' => null,
        'sms_sent_today' => null,
        'sms_sent_this_month' => null,
        'sms_sent_last_month' => null,
        'allow_video_conference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'domain' => false,
        'description' => false,
        'reseller' => false,
        'limits_max_active_calls_total' => false,
        'limits_max_call_queues' => false,
        'limits_max_auto_attendants' => false,
        'limits_max_conferences' => false,
        'limits_max_departments' => false,
        'limits_max_users_toal' => false,
        'count_users_total' => false,
        'count_departments' => false,
        'count_call_queues' => false,
        'count_call_center_agents' => false,
        'count_call_parks' => false,
        'count_auto_attendants' => false,
        'count_conferences' => false,
        'count_phone_numbers' => false,
        'count_phone_numbers_toll_free' => false,
        'count_user_scopes_basic_users' => false,
        'count_devices_registered' => false,
        'count_devices_total' => false,
        'stats_calculation_duration_milliseconds' => false,
        'active_calls_onnet_last_month' => false,
        'active_calls_offnet_last_month' => false,
        'active_calls_onnet_this_month' => false,
        'active_calls_offnet_this_month' => false,
        'sms_received_last_month' => false,
        'sms_received_this_month' => false,
        'sms_received_today' => false,
        'sms_sent_today' => false,
        'sms_sent_this_month' => false,
        'sms_sent_last_month' => false,
        'allow_video_conference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
        'description' => 'description',
        'reseller' => 'reseller',
        'limits_max_active_calls_total' => 'limits-max-active-calls-total',
        'limits_max_call_queues' => 'limits-max-call-queues',
        'limits_max_auto_attendants' => 'limits-max-auto-attendants',
        'limits_max_conferences' => 'limits-max-conferences',
        'limits_max_departments' => 'limits-max-departments',
        'limits_max_users_toal' => 'limits-max-users-toal',
        'count_users_total' => 'count-users-total',
        'count_departments' => 'count-departments',
        'count_call_queues' => 'count-call-queues',
        'count_call_center_agents' => 'count-call-center-agents',
        'count_call_parks' => 'count-call-parks',
        'count_auto_attendants' => 'count-auto-attendants',
        'count_conferences' => 'count-conferences',
        'count_phone_numbers' => 'count-phone-numbers',
        'count_phone_numbers_toll_free' => 'count-phone-numbers-toll-free',
        'count_user_scopes_basic_users' => 'count-user-scopes-basic-users',
        'count_devices_registered' => 'count-devices-registered',
        'count_devices_total' => 'count-devices-total',
        'stats_calculation_duration_milliseconds' => 'stats-calculation-duration-milliseconds',
        'active_calls_onnet_last_month' => 'active-calls-onnet-last-month',
        'active_calls_offnet_last_month' => 'active-calls-offnet-last-month',
        'active_calls_onnet_this_month' => 'active-calls-onnet-this-month',
        'active_calls_offnet_this_month' => 'active-calls-offnet-this-month',
        'sms_received_last_month' => 'sms-received-last-month',
        'sms_received_this_month' => 'sms-received-this-month',
        'sms_received_today' => 'sms-received-today',
        'sms_sent_today' => 'sms-sent-today',
        'sms_sent_this_month' => 'sms-sent-this-month',
        'sms_sent_last_month' => 'sms-sent-last-month',
        'allow_video_conference' => 'allow-video-conference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'description' => 'setDescription',
        'reseller' => 'setReseller',
        'limits_max_active_calls_total' => 'setLimitsMaxActiveCallsTotal',
        'limits_max_call_queues' => 'setLimitsMaxCallQueues',
        'limits_max_auto_attendants' => 'setLimitsMaxAutoAttendants',
        'limits_max_conferences' => 'setLimitsMaxConferences',
        'limits_max_departments' => 'setLimitsMaxDepartments',
        'limits_max_users_toal' => 'setLimitsMaxUsersToal',
        'count_users_total' => 'setCountUsersTotal',
        'count_departments' => 'setCountDepartments',
        'count_call_queues' => 'setCountCallQueues',
        'count_call_center_agents' => 'setCountCallCenterAgents',
        'count_call_parks' => 'setCountCallParks',
        'count_auto_attendants' => 'setCountAutoAttendants',
        'count_conferences' => 'setCountConferences',
        'count_phone_numbers' => 'setCountPhoneNumbers',
        'count_phone_numbers_toll_free' => 'setCountPhoneNumbersTollFree',
        'count_user_scopes_basic_users' => 'setCountUserScopesBasicUsers',
        'count_devices_registered' => 'setCountDevicesRegistered',
        'count_devices_total' => 'setCountDevicesTotal',
        'stats_calculation_duration_milliseconds' => 'setStatsCalculationDurationMilliseconds',
        'active_calls_onnet_last_month' => 'setActiveCallsOnnetLastMonth',
        'active_calls_offnet_last_month' => 'setActiveCallsOffnetLastMonth',
        'active_calls_onnet_this_month' => 'setActiveCallsOnnetThisMonth',
        'active_calls_offnet_this_month' => 'setActiveCallsOffnetThisMonth',
        'sms_received_last_month' => 'setSmsReceivedLastMonth',
        'sms_received_this_month' => 'setSmsReceivedThisMonth',
        'sms_received_today' => 'setSmsReceivedToday',
        'sms_sent_today' => 'setSmsSentToday',
        'sms_sent_this_month' => 'setSmsSentThisMonth',
        'sms_sent_last_month' => 'setSmsSentLastMonth',
        'allow_video_conference' => 'setAllowVideoConference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'description' => 'getDescription',
        'reseller' => 'getReseller',
        'limits_max_active_calls_total' => 'getLimitsMaxActiveCallsTotal',
        'limits_max_call_queues' => 'getLimitsMaxCallQueues',
        'limits_max_auto_attendants' => 'getLimitsMaxAutoAttendants',
        'limits_max_conferences' => 'getLimitsMaxConferences',
        'limits_max_departments' => 'getLimitsMaxDepartments',
        'limits_max_users_toal' => 'getLimitsMaxUsersToal',
        'count_users_total' => 'getCountUsersTotal',
        'count_departments' => 'getCountDepartments',
        'count_call_queues' => 'getCountCallQueues',
        'count_call_center_agents' => 'getCountCallCenterAgents',
        'count_call_parks' => 'getCountCallParks',
        'count_auto_attendants' => 'getCountAutoAttendants',
        'count_conferences' => 'getCountConferences',
        'count_phone_numbers' => 'getCountPhoneNumbers',
        'count_phone_numbers_toll_free' => 'getCountPhoneNumbersTollFree',
        'count_user_scopes_basic_users' => 'getCountUserScopesBasicUsers',
        'count_devices_registered' => 'getCountDevicesRegistered',
        'count_devices_total' => 'getCountDevicesTotal',
        'stats_calculation_duration_milliseconds' => 'getStatsCalculationDurationMilliseconds',
        'active_calls_onnet_last_month' => 'getActiveCallsOnnetLastMonth',
        'active_calls_offnet_last_month' => 'getActiveCallsOffnetLastMonth',
        'active_calls_onnet_this_month' => 'getActiveCallsOnnetThisMonth',
        'active_calls_offnet_this_month' => 'getActiveCallsOffnetThisMonth',
        'sms_received_last_month' => 'getSmsReceivedLastMonth',
        'sms_received_this_month' => 'getSmsReceivedThisMonth',
        'sms_received_today' => 'getSmsReceivedToday',
        'sms_sent_today' => 'getSmsSentToday',
        'sms_sent_this_month' => 'getSmsSentThisMonth',
        'sms_sent_last_month' => 'getSmsSentLastMonth',
        'allow_video_conference' => 'getAllowVideoConference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('reseller', $data ?? [], null);
        $this->setIfExists('limits_max_active_calls_total', $data ?? [], null);
        $this->setIfExists('limits_max_call_queues', $data ?? [], null);
        $this->setIfExists('limits_max_auto_attendants', $data ?? [], null);
        $this->setIfExists('limits_max_conferences', $data ?? [], null);
        $this->setIfExists('limits_max_departments', $data ?? [], null);
        $this->setIfExists('limits_max_users_toal', $data ?? [], null);
        $this->setIfExists('count_users_total', $data ?? [], null);
        $this->setIfExists('count_departments', $data ?? [], null);
        $this->setIfExists('count_call_queues', $data ?? [], null);
        $this->setIfExists('count_call_center_agents', $data ?? [], null);
        $this->setIfExists('count_call_parks', $data ?? [], null);
        $this->setIfExists('count_auto_attendants', $data ?? [], null);
        $this->setIfExists('count_conferences', $data ?? [], null);
        $this->setIfExists('count_phone_numbers', $data ?? [], null);
        $this->setIfExists('count_phone_numbers_toll_free', $data ?? [], null);
        $this->setIfExists('count_user_scopes_basic_users', $data ?? [], null);
        $this->setIfExists('count_devices_registered', $data ?? [], null);
        $this->setIfExists('count_devices_total', $data ?? [], null);
        $this->setIfExists('stats_calculation_duration_milliseconds', $data ?? [], null);
        $this->setIfExists('active_calls_onnet_last_month', $data ?? [], null);
        $this->setIfExists('active_calls_offnet_last_month', $data ?? [], null);
        $this->setIfExists('active_calls_onnet_this_month', $data ?? [], null);
        $this->setIfExists('active_calls_offnet_this_month', $data ?? [], null);
        $this->setIfExists('sms_received_last_month', $data ?? [], null);
        $this->setIfExists('sms_received_this_month', $data ?? [], null);
        $this->setIfExists('sms_received_today', $data ?? [], null);
        $this->setIfExists('sms_sent_today', $data ?? [], null);
        $this->setIfExists('sms_sent_this_month', $data ?? [], null);
        $this->setIfExists('sms_sent_last_month', $data ?? [], null);
        $this->setIfExists('allow_video_conference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['reseller'] === null) {
            $invalidProperties[] = "'reseller' can't be null";
        }
        if ($this->container['limits_max_active_calls_total'] === null) {
            $invalidProperties[] = "'limits_max_active_calls_total' can't be null";
        }
        if ($this->container['limits_max_call_queues'] === null) {
            $invalidProperties[] = "'limits_max_call_queues' can't be null";
        }
        if ($this->container['limits_max_auto_attendants'] === null) {
            $invalidProperties[] = "'limits_max_auto_attendants' can't be null";
        }
        if ($this->container['limits_max_conferences'] === null) {
            $invalidProperties[] = "'limits_max_conferences' can't be null";
        }
        if ($this->container['limits_max_departments'] === null) {
            $invalidProperties[] = "'limits_max_departments' can't be null";
        }
        if ($this->container['limits_max_users_toal'] === null) {
            $invalidProperties[] = "'limits_max_users_toal' can't be null";
        }
        if ($this->container['count_users_total'] === null) {
            $invalidProperties[] = "'count_users_total' can't be null";
        }
        if ($this->container['count_departments'] === null) {
            $invalidProperties[] = "'count_departments' can't be null";
        }
        if ($this->container['count_call_queues'] === null) {
            $invalidProperties[] = "'count_call_queues' can't be null";
        }
        if ($this->container['count_call_center_agents'] === null) {
            $invalidProperties[] = "'count_call_center_agents' can't be null";
        }
        if ($this->container['count_call_parks'] === null) {
            $invalidProperties[] = "'count_call_parks' can't be null";
        }
        if ($this->container['count_auto_attendants'] === null) {
            $invalidProperties[] = "'count_auto_attendants' can't be null";
        }
        if ($this->container['count_conferences'] === null) {
            $invalidProperties[] = "'count_conferences' can't be null";
        }
        if ($this->container['count_phone_numbers'] === null) {
            $invalidProperties[] = "'count_phone_numbers' can't be null";
        }
        if ($this->container['count_phone_numbers_toll_free'] === null) {
            $invalidProperties[] = "'count_phone_numbers_toll_free' can't be null";
        }
        if ($this->container['count_user_scopes_basic_users'] === null) {
            $invalidProperties[] = "'count_user_scopes_basic_users' can't be null";
        }
        if ($this->container['count_devices_registered'] === null) {
            $invalidProperties[] = "'count_devices_registered' can't be null";
        }
        if ($this->container['count_devices_total'] === null) {
            $invalidProperties[] = "'count_devices_total' can't be null";
        }
        if ($this->container['stats_calculation_duration_milliseconds'] === null) {
            $invalidProperties[] = "'stats_calculation_duration_milliseconds' can't be null";
        }
        if ($this->container['active_calls_onnet_last_month'] === null) {
            $invalidProperties[] = "'active_calls_onnet_last_month' can't be null";
        }
        if ($this->container['active_calls_offnet_last_month'] === null) {
            $invalidProperties[] = "'active_calls_offnet_last_month' can't be null";
        }
        if ($this->container['active_calls_onnet_this_month'] === null) {
            $invalidProperties[] = "'active_calls_onnet_this_month' can't be null";
        }
        if ($this->container['active_calls_offnet_this_month'] === null) {
            $invalidProperties[] = "'active_calls_offnet_this_month' can't be null";
        }
        if ($this->container['sms_received_last_month'] === null) {
            $invalidProperties[] = "'sms_received_last_month' can't be null";
        }
        if ($this->container['sms_received_this_month'] === null) {
            $invalidProperties[] = "'sms_received_this_month' can't be null";
        }
        if ($this->container['sms_received_today'] === null) {
            $invalidProperties[] = "'sms_received_today' can't be null";
        }
        if ($this->container['sms_sent_today'] === null) {
            $invalidProperties[] = "'sms_sent_today' can't be null";
        }
        if ($this->container['sms_sent_this_month'] === null) {
            $invalidProperties[] = "'sms_sent_this_month' can't be null";
        }
        if ($this->container['sms_sent_last_month'] === null) {
            $invalidProperties[] = "'sms_sent_last_month' can't be null";
        }
        if ($this->container['allow_video_conference'] === null) {
            $invalidProperties[] = "'allow_video_conference' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets reseller
     *
     * @return string
     */
    public function getReseller()
    {
        return $this->container['reseller'];
    }

    /**
     * Sets reseller
     *
     * @param string $reseller reseller
     *
     * @return self
     */
    public function setReseller($reseller)
    {
        if (is_null($reseller)) {
            throw new \InvalidArgumentException('non-nullable reseller cannot be null');
        }
        $this->container['reseller'] = $reseller;

        return $this;
    }

    /**
     * Gets limits_max_active_calls_total
     *
     * @return int
     */
    public function getLimitsMaxActiveCallsTotal()
    {
        return $this->container['limits_max_active_calls_total'];
    }

    /**
     * Sets limits_max_active_calls_total
     *
     * @param int $limits_max_active_calls_total limits_max_active_calls_total
     *
     * @return self
     */
    public function setLimitsMaxActiveCallsTotal($limits_max_active_calls_total)
    {
        if (is_null($limits_max_active_calls_total)) {
            throw new \InvalidArgumentException('non-nullable limits_max_active_calls_total cannot be null');
        }
        $this->container['limits_max_active_calls_total'] = $limits_max_active_calls_total;

        return $this;
    }

    /**
     * Gets limits_max_call_queues
     *
     * @return int
     */
    public function getLimitsMaxCallQueues()
    {
        return $this->container['limits_max_call_queues'];
    }

    /**
     * Sets limits_max_call_queues
     *
     * @param int $limits_max_call_queues limits_max_call_queues
     *
     * @return self
     */
    public function setLimitsMaxCallQueues($limits_max_call_queues)
    {
        if (is_null($limits_max_call_queues)) {
            throw new \InvalidArgumentException('non-nullable limits_max_call_queues cannot be null');
        }
        $this->container['limits_max_call_queues'] = $limits_max_call_queues;

        return $this;
    }

    /**
     * Gets limits_max_auto_attendants
     *
     * @return int
     */
    public function getLimitsMaxAutoAttendants()
    {
        return $this->container['limits_max_auto_attendants'];
    }

    /**
     * Sets limits_max_auto_attendants
     *
     * @param int $limits_max_auto_attendants limits_max_auto_attendants
     *
     * @return self
     */
    public function setLimitsMaxAutoAttendants($limits_max_auto_attendants)
    {
        if (is_null($limits_max_auto_attendants)) {
            throw new \InvalidArgumentException('non-nullable limits_max_auto_attendants cannot be null');
        }
        $this->container['limits_max_auto_attendants'] = $limits_max_auto_attendants;

        return $this;
    }

    /**
     * Gets limits_max_conferences
     *
     * @return int
     */
    public function getLimitsMaxConferences()
    {
        return $this->container['limits_max_conferences'];
    }

    /**
     * Sets limits_max_conferences
     *
     * @param int $limits_max_conferences limits_max_conferences
     *
     * @return self
     */
    public function setLimitsMaxConferences($limits_max_conferences)
    {
        if (is_null($limits_max_conferences)) {
            throw new \InvalidArgumentException('non-nullable limits_max_conferences cannot be null');
        }
        $this->container['limits_max_conferences'] = $limits_max_conferences;

        return $this;
    }

    /**
     * Gets limits_max_departments
     *
     * @return int
     */
    public function getLimitsMaxDepartments()
    {
        return $this->container['limits_max_departments'];
    }

    /**
     * Sets limits_max_departments
     *
     * @param int $limits_max_departments limits_max_departments
     *
     * @return self
     */
    public function setLimitsMaxDepartments($limits_max_departments)
    {
        if (is_null($limits_max_departments)) {
            throw new \InvalidArgumentException('non-nullable limits_max_departments cannot be null');
        }
        $this->container['limits_max_departments'] = $limits_max_departments;

        return $this;
    }

    /**
     * Gets limits_max_users_toal
     *
     * @return int
     */
    public function getLimitsMaxUsersToal()
    {
        return $this->container['limits_max_users_toal'];
    }

    /**
     * Sets limits_max_users_toal
     *
     * @param int $limits_max_users_toal limits_max_users_toal
     *
     * @return self
     */
    public function setLimitsMaxUsersToal($limits_max_users_toal)
    {
        if (is_null($limits_max_users_toal)) {
            throw new \InvalidArgumentException('non-nullable limits_max_users_toal cannot be null');
        }
        $this->container['limits_max_users_toal'] = $limits_max_users_toal;

        return $this;
    }

    /**
     * Gets count_users_total
     *
     * @return int
     */
    public function getCountUsersTotal()
    {
        return $this->container['count_users_total'];
    }

    /**
     * Sets count_users_total
     *
     * @param int $count_users_total count_users_total
     *
     * @return self
     */
    public function setCountUsersTotal($count_users_total)
    {
        if (is_null($count_users_total)) {
            throw new \InvalidArgumentException('non-nullable count_users_total cannot be null');
        }
        $this->container['count_users_total'] = $count_users_total;

        return $this;
    }

    /**
     * Gets count_departments
     *
     * @return int
     */
    public function getCountDepartments()
    {
        return $this->container['count_departments'];
    }

    /**
     * Sets count_departments
     *
     * @param int $count_departments count_departments
     *
     * @return self
     */
    public function setCountDepartments($count_departments)
    {
        if (is_null($count_departments)) {
            throw new \InvalidArgumentException('non-nullable count_departments cannot be null');
        }
        $this->container['count_departments'] = $count_departments;

        return $this;
    }

    /**
     * Gets count_call_queues
     *
     * @return int
     */
    public function getCountCallQueues()
    {
        return $this->container['count_call_queues'];
    }

    /**
     * Sets count_call_queues
     *
     * @param int $count_call_queues count_call_queues
     *
     * @return self
     */
    public function setCountCallQueues($count_call_queues)
    {
        if (is_null($count_call_queues)) {
            throw new \InvalidArgumentException('non-nullable count_call_queues cannot be null');
        }
        $this->container['count_call_queues'] = $count_call_queues;

        return $this;
    }

    /**
     * Gets count_call_center_agents
     *
     * @return int
     */
    public function getCountCallCenterAgents()
    {
        return $this->container['count_call_center_agents'];
    }

    /**
     * Sets count_call_center_agents
     *
     * @param int $count_call_center_agents count_call_center_agents
     *
     * @return self
     */
    public function setCountCallCenterAgents($count_call_center_agents)
    {
        if (is_null($count_call_center_agents)) {
            throw new \InvalidArgumentException('non-nullable count_call_center_agents cannot be null');
        }
        $this->container['count_call_center_agents'] = $count_call_center_agents;

        return $this;
    }

    /**
     * Gets count_call_parks
     *
     * @return int
     */
    public function getCountCallParks()
    {
        return $this->container['count_call_parks'];
    }

    /**
     * Sets count_call_parks
     *
     * @param int $count_call_parks count_call_parks
     *
     * @return self
     */
    public function setCountCallParks($count_call_parks)
    {
        if (is_null($count_call_parks)) {
            throw new \InvalidArgumentException('non-nullable count_call_parks cannot be null');
        }
        $this->container['count_call_parks'] = $count_call_parks;

        return $this;
    }

    /**
     * Gets count_auto_attendants
     *
     * @return int
     */
    public function getCountAutoAttendants()
    {
        return $this->container['count_auto_attendants'];
    }

    /**
     * Sets count_auto_attendants
     *
     * @param int $count_auto_attendants count_auto_attendants
     *
     * @return self
     */
    public function setCountAutoAttendants($count_auto_attendants)
    {
        if (is_null($count_auto_attendants)) {
            throw new \InvalidArgumentException('non-nullable count_auto_attendants cannot be null');
        }
        $this->container['count_auto_attendants'] = $count_auto_attendants;

        return $this;
    }

    /**
     * Gets count_conferences
     *
     * @return int
     */
    public function getCountConferences()
    {
        return $this->container['count_conferences'];
    }

    /**
     * Sets count_conferences
     *
     * @param int $count_conferences count_conferences
     *
     * @return self
     */
    public function setCountConferences($count_conferences)
    {
        if (is_null($count_conferences)) {
            throw new \InvalidArgumentException('non-nullable count_conferences cannot be null');
        }
        $this->container['count_conferences'] = $count_conferences;

        return $this;
    }

    /**
     * Gets count_phone_numbers
     *
     * @return int
     */
    public function getCountPhoneNumbers()
    {
        return $this->container['count_phone_numbers'];
    }

    /**
     * Sets count_phone_numbers
     *
     * @param int $count_phone_numbers count_phone_numbers
     *
     * @return self
     */
    public function setCountPhoneNumbers($count_phone_numbers)
    {
        if (is_null($count_phone_numbers)) {
            throw new \InvalidArgumentException('non-nullable count_phone_numbers cannot be null');
        }
        $this->container['count_phone_numbers'] = $count_phone_numbers;

        return $this;
    }

    /**
     * Gets count_phone_numbers_toll_free
     *
     * @return int
     */
    public function getCountPhoneNumbersTollFree()
    {
        return $this->container['count_phone_numbers_toll_free'];
    }

    /**
     * Sets count_phone_numbers_toll_free
     *
     * @param int $count_phone_numbers_toll_free count_phone_numbers_toll_free
     *
     * @return self
     */
    public function setCountPhoneNumbersTollFree($count_phone_numbers_toll_free)
    {
        if (is_null($count_phone_numbers_toll_free)) {
            throw new \InvalidArgumentException('non-nullable count_phone_numbers_toll_free cannot be null');
        }
        $this->container['count_phone_numbers_toll_free'] = $count_phone_numbers_toll_free;

        return $this;
    }

    /**
     * Gets count_user_scopes_basic_users
     *
     * @return int
     */
    public function getCountUserScopesBasicUsers()
    {
        return $this->container['count_user_scopes_basic_users'];
    }

    /**
     * Sets count_user_scopes_basic_users
     *
     * @param int $count_user_scopes_basic_users count_user_scopes_basic_users
     *
     * @return self
     */
    public function setCountUserScopesBasicUsers($count_user_scopes_basic_users)
    {
        if (is_null($count_user_scopes_basic_users)) {
            throw new \InvalidArgumentException('non-nullable count_user_scopes_basic_users cannot be null');
        }
        $this->container['count_user_scopes_basic_users'] = $count_user_scopes_basic_users;

        return $this;
    }

    /**
     * Gets count_devices_registered
     *
     * @return int
     */
    public function getCountDevicesRegistered()
    {
        return $this->container['count_devices_registered'];
    }

    /**
     * Sets count_devices_registered
     *
     * @param int $count_devices_registered count_devices_registered
     *
     * @return self
     */
    public function setCountDevicesRegistered($count_devices_registered)
    {
        if (is_null($count_devices_registered)) {
            throw new \InvalidArgumentException('non-nullable count_devices_registered cannot be null');
        }
        $this->container['count_devices_registered'] = $count_devices_registered;

        return $this;
    }

    /**
     * Gets count_devices_total
     *
     * @return int
     */
    public function getCountDevicesTotal()
    {
        return $this->container['count_devices_total'];
    }

    /**
     * Sets count_devices_total
     *
     * @param int $count_devices_total count_devices_total
     *
     * @return self
     */
    public function setCountDevicesTotal($count_devices_total)
    {
        if (is_null($count_devices_total)) {
            throw new \InvalidArgumentException('non-nullable count_devices_total cannot be null');
        }
        $this->container['count_devices_total'] = $count_devices_total;

        return $this;
    }

    /**
     * Gets stats_calculation_duration_milliseconds
     *
     * @return int
     */
    public function getStatsCalculationDurationMilliseconds()
    {
        return $this->container['stats_calculation_duration_milliseconds'];
    }

    /**
     * Sets stats_calculation_duration_milliseconds
     *
     * @param int $stats_calculation_duration_milliseconds stats_calculation_duration_milliseconds
     *
     * @return self
     */
    public function setStatsCalculationDurationMilliseconds($stats_calculation_duration_milliseconds)
    {
        if (is_null($stats_calculation_duration_milliseconds)) {
            throw new \InvalidArgumentException('non-nullable stats_calculation_duration_milliseconds cannot be null');
        }
        $this->container['stats_calculation_duration_milliseconds'] = $stats_calculation_duration_milliseconds;

        return $this;
    }

    /**
     * Gets active_calls_onnet_last_month
     *
     * @return int
     */
    public function getActiveCallsOnnetLastMonth()
    {
        return $this->container['active_calls_onnet_last_month'];
    }

    /**
     * Sets active_calls_onnet_last_month
     *
     * @param int $active_calls_onnet_last_month active_calls_onnet_last_month
     *
     * @return self
     */
    public function setActiveCallsOnnetLastMonth($active_calls_onnet_last_month)
    {
        if (is_null($active_calls_onnet_last_month)) {
            throw new \InvalidArgumentException('non-nullable active_calls_onnet_last_month cannot be null');
        }
        $this->container['active_calls_onnet_last_month'] = $active_calls_onnet_last_month;

        return $this;
    }

    /**
     * Gets active_calls_offnet_last_month
     *
     * @return int
     */
    public function getActiveCallsOffnetLastMonth()
    {
        return $this->container['active_calls_offnet_last_month'];
    }

    /**
     * Sets active_calls_offnet_last_month
     *
     * @param int $active_calls_offnet_last_month active_calls_offnet_last_month
     *
     * @return self
     */
    public function setActiveCallsOffnetLastMonth($active_calls_offnet_last_month)
    {
        if (is_null($active_calls_offnet_last_month)) {
            throw new \InvalidArgumentException('non-nullable active_calls_offnet_last_month cannot be null');
        }
        $this->container['active_calls_offnet_last_month'] = $active_calls_offnet_last_month;

        return $this;
    }

    /**
     * Gets active_calls_onnet_this_month
     *
     * @return int
     */
    public function getActiveCallsOnnetThisMonth()
    {
        return $this->container['active_calls_onnet_this_month'];
    }

    /**
     * Sets active_calls_onnet_this_month
     *
     * @param int $active_calls_onnet_this_month active_calls_onnet_this_month
     *
     * @return self
     */
    public function setActiveCallsOnnetThisMonth($active_calls_onnet_this_month)
    {
        if (is_null($active_calls_onnet_this_month)) {
            throw new \InvalidArgumentException('non-nullable active_calls_onnet_this_month cannot be null');
        }
        $this->container['active_calls_onnet_this_month'] = $active_calls_onnet_this_month;

        return $this;
    }

    /**
     * Gets active_calls_offnet_this_month
     *
     * @return int
     */
    public function getActiveCallsOffnetThisMonth()
    {
        return $this->container['active_calls_offnet_this_month'];
    }

    /**
     * Sets active_calls_offnet_this_month
     *
     * @param int $active_calls_offnet_this_month active_calls_offnet_this_month
     *
     * @return self
     */
    public function setActiveCallsOffnetThisMonth($active_calls_offnet_this_month)
    {
        if (is_null($active_calls_offnet_this_month)) {
            throw new \InvalidArgumentException('non-nullable active_calls_offnet_this_month cannot be null');
        }
        $this->container['active_calls_offnet_this_month'] = $active_calls_offnet_this_month;

        return $this;
    }

    /**
     * Gets sms_received_last_month
     *
     * @return int
     */
    public function getSmsReceivedLastMonth()
    {
        return $this->container['sms_received_last_month'];
    }

    /**
     * Sets sms_received_last_month
     *
     * @param int $sms_received_last_month sms_received_last_month
     *
     * @return self
     */
    public function setSmsReceivedLastMonth($sms_received_last_month)
    {
        if (is_null($sms_received_last_month)) {
            throw new \InvalidArgumentException('non-nullable sms_received_last_month cannot be null');
        }
        $this->container['sms_received_last_month'] = $sms_received_last_month;

        return $this;
    }

    /**
     * Gets sms_received_this_month
     *
     * @return int
     */
    public function getSmsReceivedThisMonth()
    {
        return $this->container['sms_received_this_month'];
    }

    /**
     * Sets sms_received_this_month
     *
     * @param int $sms_received_this_month sms_received_this_month
     *
     * @return self
     */
    public function setSmsReceivedThisMonth($sms_received_this_month)
    {
        if (is_null($sms_received_this_month)) {
            throw new \InvalidArgumentException('non-nullable sms_received_this_month cannot be null');
        }
        $this->container['sms_received_this_month'] = $sms_received_this_month;

        return $this;
    }

    /**
     * Gets sms_received_today
     *
     * @return int
     */
    public function getSmsReceivedToday()
    {
        return $this->container['sms_received_today'];
    }

    /**
     * Sets sms_received_today
     *
     * @param int $sms_received_today sms_received_today
     *
     * @return self
     */
    public function setSmsReceivedToday($sms_received_today)
    {
        if (is_null($sms_received_today)) {
            throw new \InvalidArgumentException('non-nullable sms_received_today cannot be null');
        }
        $this->container['sms_received_today'] = $sms_received_today;

        return $this;
    }

    /**
     * Gets sms_sent_today
     *
     * @return int
     */
    public function getSmsSentToday()
    {
        return $this->container['sms_sent_today'];
    }

    /**
     * Sets sms_sent_today
     *
     * @param int $sms_sent_today sms_sent_today
     *
     * @return self
     */
    public function setSmsSentToday($sms_sent_today)
    {
        if (is_null($sms_sent_today)) {
            throw new \InvalidArgumentException('non-nullable sms_sent_today cannot be null');
        }
        $this->container['sms_sent_today'] = $sms_sent_today;

        return $this;
    }

    /**
     * Gets sms_sent_this_month
     *
     * @return int
     */
    public function getSmsSentThisMonth()
    {
        return $this->container['sms_sent_this_month'];
    }

    /**
     * Sets sms_sent_this_month
     *
     * @param int $sms_sent_this_month sms_sent_this_month
     *
     * @return self
     */
    public function setSmsSentThisMonth($sms_sent_this_month)
    {
        if (is_null($sms_sent_this_month)) {
            throw new \InvalidArgumentException('non-nullable sms_sent_this_month cannot be null');
        }
        $this->container['sms_sent_this_month'] = $sms_sent_this_month;

        return $this;
    }

    /**
     * Gets sms_sent_last_month
     *
     * @return int
     */
    public function getSmsSentLastMonth()
    {
        return $this->container['sms_sent_last_month'];
    }

    /**
     * Sets sms_sent_last_month
     *
     * @param int $sms_sent_last_month sms_sent_last_month
     *
     * @return self
     */
    public function setSmsSentLastMonth($sms_sent_last_month)
    {
        if (is_null($sms_sent_last_month)) {
            throw new \InvalidArgumentException('non-nullable sms_sent_last_month cannot be null');
        }
        $this->container['sms_sent_last_month'] = $sms_sent_last_month;

        return $this;
    }

    /**
     * Gets allow_video_conference
     *
     * @return string
     */
    public function getAllowVideoConference()
    {
        return $this->container['allow_video_conference'];
    }

    /**
     * Sets allow_video_conference
     *
     * @param string $allow_video_conference allow_video_conference
     *
     * @return self
     */
    public function setAllowVideoConference($allow_video_conference)
    {
        if (is_null($allow_video_conference)) {
            throw new \InvalidArgumentException('non-nullable allow_video_conference cannot be null');
        }
        $this->container['allow_video_conference'] = $allow_video_conference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


