<?php
/**
 * Site
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * Site Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Site implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Site';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'synchronous' => '\SpectrumVoip\\\\NetSapiens\Model\Synchronous',
        'site' => 'string',
        'login_username' => 'string',
        'time_zone' => '\SpectrumVoip\\\\NetSapiens\Model\TimeZone',
        'dial_plan' => 'string',
        'dial_policy' => 'string',
        'voicemail_user_control_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault',
        'phone_numbers_to_allow_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault',
        'phone_numbers_to_reject_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault',
        'call_screening_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault',
        'language_token' => 'string',
        'limits_max_data_storage_kilobytes' => 'int',
        'limits_max_active_calls_total' => 'int',
        'directory_annouce_in_dial_by_name_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault',
        'voicemail_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault',
        'voicemail_receive_broadcast_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault',
        'reject_anonymous_calls_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'voicemail_playback_announce_datetime_received' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'voicemail_playback_announce_caller_id' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'voicemail_playback_sort_newest_to_oldest' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault',
        'caller_id_number' => 'int',
        'caller_id_name' => 'string',
        'caller_id_number_emergency' => 'int',
        'area_code' => 'int',
        'directory_name_visible_in_list_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault',
        'emergency_address_id' => 'string',
        'music_on_hold_randomized_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'active_calls_total_current' => 'int',
        'recording_configuration' => '\SpectrumVoip\\\\NetSapiens\Model\RecordingConfiguration',
        'created_datetime' => '\DateTime',
        'last_modified_datetime' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'synchronous' => null,
        'site' => null,
        'login_username' => null,
        'time_zone' => null,
        'dial_plan' => null,
        'dial_policy' => null,
        'voicemail_user_control_enabled' => null,
        'phone_numbers_to_allow_enabled' => null,
        'phone_numbers_to_reject_enabled' => null,
        'call_screening_enabled' => null,
        'language_token' => null,
        'limits_max_data_storage_kilobytes' => null,
        'limits_max_active_calls_total' => null,
        'directory_annouce_in_dial_by_name_enabled' => null,
        'voicemail_enabled' => null,
        'voicemail_receive_broadcast_enabled' => null,
        'reject_anonymous_calls_enabled' => null,
        'voicemail_playback_announce_datetime_received' => null,
        'voicemail_playback_announce_caller_id' => null,
        'voicemail_playback_sort_newest_to_oldest' => null,
        'caller_id_number' => null,
        'caller_id_name' => null,
        'caller_id_number_emergency' => null,
        'area_code' => null,
        'directory_name_visible_in_list_enabled' => null,
        'emergency_address_id' => null,
        'music_on_hold_randomized_enabled' => null,
        'active_calls_total_current' => null,
        'recording_configuration' => null,
        'created_datetime' => 'date-time',
        'last_modified_datetime' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'synchronous' => false,
        'site' => false,
        'login_username' => false,
        'time_zone' => false,
        'dial_plan' => false,
        'dial_policy' => false,
        'voicemail_user_control_enabled' => false,
        'phone_numbers_to_allow_enabled' => false,
        'phone_numbers_to_reject_enabled' => false,
        'call_screening_enabled' => false,
        'language_token' => false,
        'limits_max_data_storage_kilobytes' => false,
        'limits_max_active_calls_total' => false,
        'directory_annouce_in_dial_by_name_enabled' => false,
        'voicemail_enabled' => false,
        'voicemail_receive_broadcast_enabled' => false,
        'reject_anonymous_calls_enabled' => false,
        'voicemail_playback_announce_datetime_received' => false,
        'voicemail_playback_announce_caller_id' => false,
        'voicemail_playback_sort_newest_to_oldest' => false,
        'caller_id_number' => false,
        'caller_id_name' => false,
        'caller_id_number_emergency' => false,
        'area_code' => false,
        'directory_name_visible_in_list_enabled' => false,
        'emergency_address_id' => false,
        'music_on_hold_randomized_enabled' => false,
        'active_calls_total_current' => false,
        'recording_configuration' => false,
        'created_datetime' => false,
        'last_modified_datetime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'synchronous' => 'synchronous',
        'site' => 'site',
        'login_username' => 'login-username',
        'time_zone' => 'time-zone',
        'dial_plan' => 'dial-plan',
        'dial_policy' => 'dial-policy',
        'voicemail_user_control_enabled' => 'voicemail-user-control-enabled',
        'phone_numbers_to_allow_enabled' => 'phone-numbers-to-allow-enabled',
        'phone_numbers_to_reject_enabled' => 'phone-numbers-to-reject-enabled',
        'call_screening_enabled' => 'call-screening-enabled',
        'language_token' => 'language-token',
        'limits_max_data_storage_kilobytes' => 'limits-max-data-storage-kilobytes',
        'limits_max_active_calls_total' => 'limits-max-active-calls-total',
        'directory_annouce_in_dial_by_name_enabled' => 'directory-annouce-in-dial-by-name-enabled',
        'voicemail_enabled' => 'voicemail-enabled',
        'voicemail_receive_broadcast_enabled' => 'voicemail-receive-broadcast-enabled',
        'reject_anonymous_calls_enabled' => 'reject-anonymous-calls-enabled',
        'voicemail_playback_announce_datetime_received' => 'voicemail-playback-announce-datetime-received',
        'voicemail_playback_announce_caller_id' => 'voicemail-playback-announce-caller-id',
        'voicemail_playback_sort_newest_to_oldest' => 'voicemail-playback-sort-newest-to-oldest',
        'caller_id_number' => 'caller-id-number',
        'caller_id_name' => 'caller-id-name',
        'caller_id_number_emergency' => 'caller-id-number-emergency',
        'area_code' => 'area-code',
        'directory_name_visible_in_list_enabled' => 'directory-name-visible-in-list-enabled',
        'emergency_address_id' => 'emergency-address-id',
        'music_on_hold_randomized_enabled' => 'music-on-hold-randomized-enabled',
        'active_calls_total_current' => 'active-calls-total-current',
        'recording_configuration' => 'recording-configuration',
        'created_datetime' => 'created-datetime',
        'last_modified_datetime' => 'last-modified-datetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'synchronous' => 'setSynchronous',
        'site' => 'setSite',
        'login_username' => 'setLoginUsername',
        'time_zone' => 'setTimeZone',
        'dial_plan' => 'setDialPlan',
        'dial_policy' => 'setDialPolicy',
        'voicemail_user_control_enabled' => 'setVoicemailUserControlEnabled',
        'phone_numbers_to_allow_enabled' => 'setPhoneNumbersToAllowEnabled',
        'phone_numbers_to_reject_enabled' => 'setPhoneNumbersToRejectEnabled',
        'call_screening_enabled' => 'setCallScreeningEnabled',
        'language_token' => 'setLanguageToken',
        'limits_max_data_storage_kilobytes' => 'setLimitsMaxDataStorageKilobytes',
        'limits_max_active_calls_total' => 'setLimitsMaxActiveCallsTotal',
        'directory_annouce_in_dial_by_name_enabled' => 'setDirectoryAnnouceInDialByNameEnabled',
        'voicemail_enabled' => 'setVoicemailEnabled',
        'voicemail_receive_broadcast_enabled' => 'setVoicemailReceiveBroadcastEnabled',
        'reject_anonymous_calls_enabled' => 'setRejectAnonymousCallsEnabled',
        'voicemail_playback_announce_datetime_received' => 'setVoicemailPlaybackAnnounceDatetimeReceived',
        'voicemail_playback_announce_caller_id' => 'setVoicemailPlaybackAnnounceCallerId',
        'voicemail_playback_sort_newest_to_oldest' => 'setVoicemailPlaybackSortNewestToOldest',
        'caller_id_number' => 'setCallerIdNumber',
        'caller_id_name' => 'setCallerIdName',
        'caller_id_number_emergency' => 'setCallerIdNumberEmergency',
        'area_code' => 'setAreaCode',
        'directory_name_visible_in_list_enabled' => 'setDirectoryNameVisibleInListEnabled',
        'emergency_address_id' => 'setEmergencyAddressId',
        'music_on_hold_randomized_enabled' => 'setMusicOnHoldRandomizedEnabled',
        'active_calls_total_current' => 'setActiveCallsTotalCurrent',
        'recording_configuration' => 'setRecordingConfiguration',
        'created_datetime' => 'setCreatedDatetime',
        'last_modified_datetime' => 'setLastModifiedDatetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'synchronous' => 'getSynchronous',
        'site' => 'getSite',
        'login_username' => 'getLoginUsername',
        'time_zone' => 'getTimeZone',
        'dial_plan' => 'getDialPlan',
        'dial_policy' => 'getDialPolicy',
        'voicemail_user_control_enabled' => 'getVoicemailUserControlEnabled',
        'phone_numbers_to_allow_enabled' => 'getPhoneNumbersToAllowEnabled',
        'phone_numbers_to_reject_enabled' => 'getPhoneNumbersToRejectEnabled',
        'call_screening_enabled' => 'getCallScreeningEnabled',
        'language_token' => 'getLanguageToken',
        'limits_max_data_storage_kilobytes' => 'getLimitsMaxDataStorageKilobytes',
        'limits_max_active_calls_total' => 'getLimitsMaxActiveCallsTotal',
        'directory_annouce_in_dial_by_name_enabled' => 'getDirectoryAnnouceInDialByNameEnabled',
        'voicemail_enabled' => 'getVoicemailEnabled',
        'voicemail_receive_broadcast_enabled' => 'getVoicemailReceiveBroadcastEnabled',
        'reject_anonymous_calls_enabled' => 'getRejectAnonymousCallsEnabled',
        'voicemail_playback_announce_datetime_received' => 'getVoicemailPlaybackAnnounceDatetimeReceived',
        'voicemail_playback_announce_caller_id' => 'getVoicemailPlaybackAnnounceCallerId',
        'voicemail_playback_sort_newest_to_oldest' => 'getVoicemailPlaybackSortNewestToOldest',
        'caller_id_number' => 'getCallerIdNumber',
        'caller_id_name' => 'getCallerIdName',
        'caller_id_number_emergency' => 'getCallerIdNumberEmergency',
        'area_code' => 'getAreaCode',
        'directory_name_visible_in_list_enabled' => 'getDirectoryNameVisibleInListEnabled',
        'emergency_address_id' => 'getEmergencyAddressId',
        'music_on_hold_randomized_enabled' => 'getMusicOnHoldRandomizedEnabled',
        'active_calls_total_current' => 'getActiveCallsTotalCurrent',
        'recording_configuration' => 'getRecordingConfiguration',
        'created_datetime' => 'getCreatedDatetime',
        'last_modified_datetime' => 'getLastModifiedDatetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('synchronous', $data ?? [], null);
        $this->setIfExists('site', $data ?? [], null);
        $this->setIfExists('login_username', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('dial_plan', $data ?? [], null);
        $this->setIfExists('dial_policy', $data ?? [], null);
        $this->setIfExists('voicemail_user_control_enabled', $data ?? [], null);
        $this->setIfExists('phone_numbers_to_allow_enabled', $data ?? [], null);
        $this->setIfExists('phone_numbers_to_reject_enabled', $data ?? [], null);
        $this->setIfExists('call_screening_enabled', $data ?? [], null);
        $this->setIfExists('language_token', $data ?? [], 'en_US');
        $this->setIfExists('limits_max_data_storage_kilobytes', $data ?? [], null);
        $this->setIfExists('limits_max_active_calls_total', $data ?? [], null);
        $this->setIfExists('directory_annouce_in_dial_by_name_enabled', $data ?? [], null);
        $this->setIfExists('voicemail_enabled', $data ?? [], null);
        $this->setIfExists('voicemail_receive_broadcast_enabled', $data ?? [], null);
        $this->setIfExists('reject_anonymous_calls_enabled', $data ?? [], null);
        $this->setIfExists('voicemail_playback_announce_datetime_received', $data ?? [], null);
        $this->setIfExists('voicemail_playback_announce_caller_id', $data ?? [], null);
        $this->setIfExists('voicemail_playback_sort_newest_to_oldest', $data ?? [], null);
        $this->setIfExists('caller_id_number', $data ?? [], null);
        $this->setIfExists('caller_id_name', $data ?? [], null);
        $this->setIfExists('caller_id_number_emergency', $data ?? [], null);
        $this->setIfExists('area_code', $data ?? [], null);
        $this->setIfExists('directory_name_visible_in_list_enabled', $data ?? [], null);
        $this->setIfExists('emergency_address_id', $data ?? [], null);
        $this->setIfExists('music_on_hold_randomized_enabled', $data ?? [], null);
        $this->setIfExists('active_calls_total_current', $data ?? [], null);
        $this->setIfExists('recording_configuration', $data ?? [], null);
        $this->setIfExists('created_datetime', $data ?? [], null);
        $this->setIfExists('last_modified_datetime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['site'] === null) {
            $invalidProperties[] = "'site' can't be null";
        }
        if (!is_null($this->container['limits_max_data_storage_kilobytes']) && ($this->container['limits_max_data_storage_kilobytes'] < 0)) {
            $invalidProperties[] = "invalid value for 'limits_max_data_storage_kilobytes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['limits_max_active_calls_total']) && ($this->container['limits_max_active_calls_total'] > 3600)) {
            $invalidProperties[] = "invalid value for 'limits_max_active_calls_total', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['limits_max_active_calls_total']) && ($this->container['limits_max_active_calls_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'limits_max_active_calls_total', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['caller_id_number']) && ($this->container['caller_id_number'] < 10)) {
            $invalidProperties[] = "invalid value for 'caller_id_number', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['caller_id_number_emergency']) && ($this->container['caller_id_number_emergency'] < 10)) {
            $invalidProperties[] = "invalid value for 'caller_id_number_emergency', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['area_code']) && ($this->container['area_code'] > 999)) {
            $invalidProperties[] = "invalid value for 'area_code', must be smaller than or equal to 999.";
        }

        if (!is_null($this->container['area_code']) && ($this->container['area_code'] < 100)) {
            $invalidProperties[] = "invalid value for 'area_code', must be bigger than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets synchronous
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\Synchronous|null
     */
    public function getSynchronous()
    {
        return $this->container['synchronous'];
    }

    /**
     * Sets synchronous
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\Synchronous|null $synchronous synchronous
     *
     * @return self
     */
    public function setSynchronous($synchronous)
    {
        if (is_null($synchronous)) {
            throw new \InvalidArgumentException('non-nullable synchronous cannot be null');
        }
        $this->container['synchronous'] = $synchronous;

        return $this;
    }

    /**
     * Gets site
     *
     * @return string
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param string $site site
     *
     * @return self
     */
    public function setSite($site)
    {
        if (is_null($site)) {
            throw new \InvalidArgumentException('non-nullable site cannot be null');
        }
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets login_username
     *
     * @return string|null
     */
    public function getLoginUsername()
    {
        return $this->container['login_username'];
    }

    /**
     * Sets login_username
     *
     * @param string|null $login_username This is the login for the user used to access the portals and other applications. The default will be [user]@[domain] if not set otherwise.  This value is required to be unique across the entire system so 409 will be returned if not unique.
     *
     * @return self
     */
    public function setLoginUsername($login_username)
    {
        if (is_null($login_username)) {
            throw new \InvalidArgumentException('non-nullable login_username cannot be null');
        }
        $this->container['login_username'] = $login_username;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\TimeZone|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\TimeZone|null $time_zone The timezone which the meeting was created with
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            throw new \InvalidArgumentException('non-nullable time_zone cannot be null');
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets dial_plan
     *
     * @return string|null
     */
    public function getDialPlan()
    {
        return $this->container['dial_plan'];
    }

    /**
     * Sets dial_plan
     *
     * @param string|null $dial_plan This is the dial plan set for the user. Dial plans are used to control action and forward options that will be used when dialing out from the user.
     *
     * @return self
     */
    public function setDialPlan($dial_plan)
    {
        if (is_null($dial_plan)) {
            throw new \InvalidArgumentException('non-nullable dial_plan cannot be null');
        }
        $this->container['dial_plan'] = $dial_plan;

        return $this;
    }

    /**
     * Gets dial_policy
     *
     * @return string|null
     */
    public function getDialPolicy()
    {
        return $this->container['dial_policy'];
    }

    /**
     * Sets dial_policy
     *
     * @param string|null $dial_policy This value is the dial policy/permission for this user whch will control the destinations this user can dial. Generally dial policys are preconfigured at system level and selected at user level.
     *
     * @return self
     */
    public function setDialPolicy($dial_policy)
    {
        if (is_null($dial_policy)) {
            throw new \InvalidArgumentException('non-nullable dial_policy cannot be null');
        }
        $this->container['dial_policy'] = $dial_policy;

        return $this;
    }

    /**
     * Gets voicemail_user_control_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null
     */
    public function getVoicemailUserControlEnabled()
    {
        return $this->container['voicemail_user_control_enabled'];
    }

    /**
     * Sets voicemail_user_control_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null $voicemail_user_control_enabled When enabled this rule is available to be user though it may not be active as the timeframe might not match the current time or there could be other hihger priority timeframes.
     *
     * @return self
     */
    public function setVoicemailUserControlEnabled($voicemail_user_control_enabled)
    {
        if (is_null($voicemail_user_control_enabled)) {
            throw new \InvalidArgumentException('non-nullable voicemail_user_control_enabled cannot be null');
        }
        $this->container['voicemail_user_control_enabled'] = $voicemail_user_control_enabled;

        return $this;
    }

    /**
     * Gets phone_numbers_to_allow_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null
     */
    public function getPhoneNumbersToAllowEnabled()
    {
        return $this->container['phone_numbers_to_allow_enabled'];
    }

    /**
     * Sets phone_numbers_to_allow_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null $phone_numbers_to_allow_enabled When enabled this rule is available to be user though it may not be active as the timeframe might not match the current time or there could be other hihger priority timeframes.
     *
     * @return self
     */
    public function setPhoneNumbersToAllowEnabled($phone_numbers_to_allow_enabled)
    {
        if (is_null($phone_numbers_to_allow_enabled)) {
            throw new \InvalidArgumentException('non-nullable phone_numbers_to_allow_enabled cannot be null');
        }
        $this->container['phone_numbers_to_allow_enabled'] = $phone_numbers_to_allow_enabled;

        return $this;
    }

    /**
     * Gets phone_numbers_to_reject_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null
     */
    public function getPhoneNumbersToRejectEnabled()
    {
        return $this->container['phone_numbers_to_reject_enabled'];
    }

    /**
     * Sets phone_numbers_to_reject_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null $phone_numbers_to_reject_enabled When enabled this rule is available to be user though it may not be active as the timeframe might not match the current time or there could be other hihger priority timeframes.
     *
     * @return self
     */
    public function setPhoneNumbersToRejectEnabled($phone_numbers_to_reject_enabled)
    {
        if (is_null($phone_numbers_to_reject_enabled)) {
            throw new \InvalidArgumentException('non-nullable phone_numbers_to_reject_enabled cannot be null');
        }
        $this->container['phone_numbers_to_reject_enabled'] = $phone_numbers_to_reject_enabled;

        return $this;
    }

    /**
     * Gets call_screening_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null
     */
    public function getCallScreeningEnabled()
    {
        return $this->container['call_screening_enabled'];
    }

    /**
     * Sets call_screening_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null $call_screening_enabled When enabled this rule is available to be user though it may not be active as the timeframe might not match the current time or there could be other hihger priority timeframes.
     *
     * @return self
     */
    public function setCallScreeningEnabled($call_screening_enabled)
    {
        if (is_null($call_screening_enabled)) {
            throw new \InvalidArgumentException('non-nullable call_screening_enabled cannot be null');
        }
        $this->container['call_screening_enabled'] = $call_screening_enabled;

        return $this;
    }

    /**
     * Gets language_token
     *
     * @return string|null
     */
    public function getLanguageToken()
    {
        return $this->container['language_token'];
    }

    /**
     * Sets language_token
     *
     * @param string|null $language_token This is the language that is set for the user to be used for portal viewing.
     *
     * @return self
     */
    public function setLanguageToken($language_token)
    {
        if (is_null($language_token)) {
            throw new \InvalidArgumentException('non-nullable language_token cannot be null');
        }
        $this->container['language_token'] = $language_token;

        return $this;
    }

    /**
     * Gets limits_max_data_storage_kilobytes
     *
     * @return int|null
     */
    public function getLimitsMaxDataStorageKilobytes()
    {
        return $this->container['limits_max_data_storage_kilobytes'];
    }

    /**
     * Sets limits_max_data_storage_kilobytes
     *
     * @param int|null $limits_max_data_storage_kilobytes This is the maximum value in kilobytes that is allowed to be stored in the user's voicemail, audio greetings and fax storage.
     *
     * @return self
     */
    public function setLimitsMaxDataStorageKilobytes($limits_max_data_storage_kilobytes)
    {
        if (is_null($limits_max_data_storage_kilobytes)) {
            throw new \InvalidArgumentException('non-nullable limits_max_data_storage_kilobytes cannot be null');
        }

        if (($limits_max_data_storage_kilobytes < 0)) {
            throw new \InvalidArgumentException('invalid value for $limits_max_data_storage_kilobytes when calling Site., must be bigger than or equal to 0.');
        }

        $this->container['limits_max_data_storage_kilobytes'] = $limits_max_data_storage_kilobytes;

        return $this;
    }

    /**
     * Gets limits_max_active_calls_total
     *
     * @return int|null
     */
    public function getLimitsMaxActiveCallsTotal()
    {
        return $this->container['limits_max_active_calls_total'];
    }

    /**
     * Sets limits_max_active_calls_total
     *
     * @param int|null $limits_max_active_calls_total This is the maximum number of active calls allowed for the user.
     *
     * @return self
     */
    public function setLimitsMaxActiveCallsTotal($limits_max_active_calls_total)
    {
        if (is_null($limits_max_active_calls_total)) {
            throw new \InvalidArgumentException('non-nullable limits_max_active_calls_total cannot be null');
        }

        if (($limits_max_active_calls_total > 3600)) {
            throw new \InvalidArgumentException('invalid value for $limits_max_active_calls_total when calling Site., must be smaller than or equal to 3600.');
        }
        if (($limits_max_active_calls_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $limits_max_active_calls_total when calling Site., must be bigger than or equal to 0.');
        }

        $this->container['limits_max_active_calls_total'] = $limits_max_active_calls_total;

        return $this;
    }

    /**
     * Gets directory_annouce_in_dial_by_name_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null
     */
    public function getDirectoryAnnouceInDialByNameEnabled()
    {
        return $this->container['directory_annouce_in_dial_by_name_enabled'];
    }

    /**
     * Sets directory_annouce_in_dial_by_name_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null $directory_annouce_in_dial_by_name_enabled When enabled this rule is available to be user though it may not be active as the timeframe might not match the current time or there could be other hihger priority timeframes.
     *
     * @return self
     */
    public function setDirectoryAnnouceInDialByNameEnabled($directory_annouce_in_dial_by_name_enabled)
    {
        if (is_null($directory_annouce_in_dial_by_name_enabled)) {
            throw new \InvalidArgumentException('non-nullable directory_annouce_in_dial_by_name_enabled cannot be null');
        }
        $this->container['directory_annouce_in_dial_by_name_enabled'] = $directory_annouce_in_dial_by_name_enabled;

        return $this;
    }

    /**
     * Gets voicemail_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null
     */
    public function getVoicemailEnabled()
    {
        return $this->container['voicemail_enabled'];
    }

    /**
     * Sets voicemail_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null $voicemail_enabled When enabled this rule is available to be user though it may not be active as the timeframe might not match the current time or there could be other hihger priority timeframes.
     *
     * @return self
     */
    public function setVoicemailEnabled($voicemail_enabled)
    {
        if (is_null($voicemail_enabled)) {
            throw new \InvalidArgumentException('non-nullable voicemail_enabled cannot be null');
        }
        $this->container['voicemail_enabled'] = $voicemail_enabled;

        return $this;
    }

    /**
     * Gets voicemail_receive_broadcast_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null
     */
    public function getVoicemailReceiveBroadcastEnabled()
    {
        return $this->container['voicemail_receive_broadcast_enabled'];
    }

    /**
     * Sets voicemail_receive_broadcast_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null $voicemail_receive_broadcast_enabled When enabled this rule is available to be user though it may not be active as the timeframe might not match the current time or there could be other hihger priority timeframes.
     *
     * @return self
     */
    public function setVoicemailReceiveBroadcastEnabled($voicemail_receive_broadcast_enabled)
    {
        if (is_null($voicemail_receive_broadcast_enabled)) {
            throw new \InvalidArgumentException('non-nullable voicemail_receive_broadcast_enabled cannot be null');
        }
        $this->container['voicemail_receive_broadcast_enabled'] = $voicemail_receive_broadcast_enabled;

        return $this;
    }

    /**
     * Gets reject_anonymous_calls_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getRejectAnonymousCallsEnabled()
    {
        return $this->container['reject_anonymous_calls_enabled'];
    }

    /**
     * Sets reject_anonymous_calls_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $reject_anonymous_calls_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setRejectAnonymousCallsEnabled($reject_anonymous_calls_enabled)
    {
        if (is_null($reject_anonymous_calls_enabled)) {
            throw new \InvalidArgumentException('non-nullable reject_anonymous_calls_enabled cannot be null');
        }
        $this->container['reject_anonymous_calls_enabled'] = $reject_anonymous_calls_enabled;

        return $this;
    }

    /**
     * Gets voicemail_playback_announce_datetime_received
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getVoicemailPlaybackAnnounceDatetimeReceived()
    {
        return $this->container['voicemail_playback_announce_datetime_received'];
    }

    /**
     * Sets voicemail_playback_announce_datetime_received
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $voicemail_playback_announce_datetime_received This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setVoicemailPlaybackAnnounceDatetimeReceived($voicemail_playback_announce_datetime_received)
    {
        if (is_null($voicemail_playback_announce_datetime_received)) {
            throw new \InvalidArgumentException('non-nullable voicemail_playback_announce_datetime_received cannot be null');
        }
        $this->container['voicemail_playback_announce_datetime_received'] = $voicemail_playback_announce_datetime_received;

        return $this;
    }

    /**
     * Gets voicemail_playback_announce_caller_id
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getVoicemailPlaybackAnnounceCallerId()
    {
        return $this->container['voicemail_playback_announce_caller_id'];
    }

    /**
     * Sets voicemail_playback_announce_caller_id
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $voicemail_playback_announce_caller_id This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setVoicemailPlaybackAnnounceCallerId($voicemail_playback_announce_caller_id)
    {
        if (is_null($voicemail_playback_announce_caller_id)) {
            throw new \InvalidArgumentException('non-nullable voicemail_playback_announce_caller_id cannot be null');
        }
        $this->container['voicemail_playback_announce_caller_id'] = $voicemail_playback_announce_caller_id;

        return $this;
    }

    /**
     * Gets voicemail_playback_sort_newest_to_oldest
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null
     */
    public function getVoicemailPlaybackSortNewestToOldest()
    {
        return $this->container['voicemail_playback_sort_newest_to_oldest'];
    }

    /**
     * Sets voicemail_playback_sort_newest_to_oldest
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null $voicemail_playback_sort_newest_to_oldest When enabled this rule is available to be user though it may not be active as the timeframe might not match the current time or there could be other hihger priority timeframes.
     *
     * @return self
     */
    public function setVoicemailPlaybackSortNewestToOldest($voicemail_playback_sort_newest_to_oldest)
    {
        if (is_null($voicemail_playback_sort_newest_to_oldest)) {
            throw new \InvalidArgumentException('non-nullable voicemail_playback_sort_newest_to_oldest cannot be null');
        }
        $this->container['voicemail_playback_sort_newest_to_oldest'] = $voicemail_playback_sort_newest_to_oldest;

        return $this;
    }

    /**
     * Gets caller_id_number
     *
     * @return int|null
     */
    public function getCallerIdNumber()
    {
        return $this->container['caller_id_number'];
    }

    /**
     * Sets caller_id_number
     *
     * @param int|null $caller_id_number This is the main caller id number for the user to be used for outbound calls outside of the domain.
     *
     * @return self
     */
    public function setCallerIdNumber($caller_id_number)
    {
        if (is_null($caller_id_number)) {
            throw new \InvalidArgumentException('non-nullable caller_id_number cannot be null');
        }

        if (($caller_id_number < 10)) {
            throw new \InvalidArgumentException('invalid value for $caller_id_number when calling Site., must be bigger than or equal to 10.');
        }

        $this->container['caller_id_number'] = $caller_id_number;

        return $this;
    }

    /**
     * Gets caller_id_name
     *
     * @return string|null
     */
    public function getCallerIdName()
    {
        return $this->container['caller_id_name'];
    }

    /**
     * Sets caller_id_name
     *
     * @param string|null $caller_id_name This is the main caller id name for the user to be used for outbound calls outside of the domain.
     *
     * @return self
     */
    public function setCallerIdName($caller_id_name)
    {
        if (is_null($caller_id_name)) {
            throw new \InvalidArgumentException('non-nullable caller_id_name cannot be null');
        }
        $this->container['caller_id_name'] = $caller_id_name;

        return $this;
    }

    /**
     * Gets caller_id_number_emergency
     *
     * @return int|null
     */
    public function getCallerIdNumberEmergency()
    {
        return $this->container['caller_id_number_emergency'];
    }

    /**
     * Sets caller_id_number_emergency
     *
     * @param int|null $caller_id_number_emergency This is the main caller id that will be used for emergency calls when placed by the user.
     *
     * @return self
     */
    public function setCallerIdNumberEmergency($caller_id_number_emergency)
    {
        if (is_null($caller_id_number_emergency)) {
            throw new \InvalidArgumentException('non-nullable caller_id_number_emergency cannot be null');
        }

        if (($caller_id_number_emergency < 10)) {
            throw new \InvalidArgumentException('invalid value for $caller_id_number_emergency when calling Site., must be bigger than or equal to 10.');
        }

        $this->container['caller_id_number_emergency'] = $caller_id_number_emergency;

        return $this;
    }

    /**
     * Gets area_code
     *
     * @return int|null
     */
    public function getAreaCode()
    {
        return $this->container['area_code'];
    }

    /**
     * Sets area_code
     *
     * @param int|null $area_code This is a area code for the user. I will be used when user dial's 7 digits to translate it to full 10 or 11 digit number.
     *
     * @return self
     */
    public function setAreaCode($area_code)
    {
        if (is_null($area_code)) {
            throw new \InvalidArgumentException('non-nullable area_code cannot be null');
        }

        if (($area_code > 999)) {
            throw new \InvalidArgumentException('invalid value for $area_code when calling Site., must be smaller than or equal to 999.');
        }
        if (($area_code < 100)) {
            throw new \InvalidArgumentException('invalid value for $area_code when calling Site., must be bigger than or equal to 100.');
        }

        $this->container['area_code'] = $area_code;

        return $this;
    }

    /**
     * Gets directory_name_visible_in_list_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null
     */
    public function getDirectoryNameVisibleInListEnabled()
    {
        return $this->container['directory_name_visible_in_list_enabled'];
    }

    /**
     * Sets directory_name_visible_in_list_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null $directory_name_visible_in_list_enabled When enabled this rule is available to be user though it may not be active as the timeframe might not match the current time or there could be other hihger priority timeframes.
     *
     * @return self
     */
    public function setDirectoryNameVisibleInListEnabled($directory_name_visible_in_list_enabled)
    {
        if (is_null($directory_name_visible_in_list_enabled)) {
            throw new \InvalidArgumentException('non-nullable directory_name_visible_in_list_enabled cannot be null');
        }
        $this->container['directory_name_visible_in_list_enabled'] = $directory_name_visible_in_list_enabled;

        return $this;
    }

    /**
     * Gets emergency_address_id
     *
     * @return string|null
     */
    public function getEmergencyAddressId()
    {
        return $this->container['emergency_address_id'];
    }

    /**
     * Sets emergency_address_id
     *
     * @param string|null $emergency_address_id Value will need to be an exact match to an address-id which links to a address for DLR (dynamic location routing) for emergency calling
     *
     * @return self
     */
    public function setEmergencyAddressId($emergency_address_id)
    {
        if (is_null($emergency_address_id)) {
            throw new \InvalidArgumentException('non-nullable emergency_address_id cannot be null');
        }
        $this->container['emergency_address_id'] = $emergency_address_id;

        return $this;
    }

    /**
     * Gets music_on_hold_randomized_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getMusicOnHoldRandomizedEnabled()
    {
        return $this->container['music_on_hold_randomized_enabled'];
    }

    /**
     * Sets music_on_hold_randomized_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $music_on_hold_randomized_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setMusicOnHoldRandomizedEnabled($music_on_hold_randomized_enabled)
    {
        if (is_null($music_on_hold_randomized_enabled)) {
            throw new \InvalidArgumentException('non-nullable music_on_hold_randomized_enabled cannot be null');
        }
        $this->container['music_on_hold_randomized_enabled'] = $music_on_hold_randomized_enabled;

        return $this;
    }

    /**
     * Gets active_calls_total_current
     *
     * @return int|null
     */
    public function getActiveCallsTotalCurrent()
    {
        return $this->container['active_calls_total_current'];
    }

    /**
     * Sets active_calls_total_current
     *
     * @param int|null $active_calls_total_current This read only setting is the current active call count for this user.
     *
     * @return self
     */
    public function setActiveCallsTotalCurrent($active_calls_total_current)
    {
        if (is_null($active_calls_total_current)) {
            throw new \InvalidArgumentException('non-nullable active_calls_total_current cannot be null');
        }
        $this->container['active_calls_total_current'] = $active_calls_total_current;

        return $this;
    }

    /**
     * Gets recording_configuration
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\RecordingConfiguration|null
     */
    public function getRecordingConfiguration()
    {
        return $this->container['recording_configuration'];
    }

    /**
     * Sets recording_configuration
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\RecordingConfiguration|null $recording_configuration recording_configuration
     *
     * @return self
     */
    public function setRecordingConfiguration($recording_configuration)
    {
        if (is_null($recording_configuration)) {
            throw new \InvalidArgumentException('non-nullable recording_configuration cannot be null');
        }
        $this->container['recording_configuration'] = $recording_configuration;

        return $this;
    }

    /**
     * Gets created_datetime
     *
     * @return \DateTime|null
     */
    public function getCreatedDatetime()
    {
        return $this->container['created_datetime'];
    }

    /**
     * Sets created_datetime
     *
     * @param \DateTime|null $created_datetime This datetime is when the user was created.
     *
     * @return self
     */
    public function setCreatedDatetime($created_datetime)
    {
        if (is_null($created_datetime)) {
            throw new \InvalidArgumentException('non-nullable created_datetime cannot be null');
        }
        $this->container['created_datetime'] = $created_datetime;

        return $this;
    }

    /**
     * Gets last_modified_datetime
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDatetime()
    {
        return $this->container['last_modified_datetime'];
    }

    /**
     * Sets last_modified_datetime
     *
     * @param \DateTime|null $last_modified_datetime This datetime is when the user was last modified.
     *
     * @return self
     */
    public function setLastModifiedDatetime($last_modified_datetime)
    {
        if (is_null($last_modified_datetime)) {
            throw new \InvalidArgumentException('non-nullable last_modified_datetime cannot be null');
        }
        $this->container['last_modified_datetime'] = $last_modified_datetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


