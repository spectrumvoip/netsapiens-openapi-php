<?php
/**
 * ActiveCall
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * ActiveCall Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActiveCall implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ActiveCall';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'core_server' => 'string',
        'call_session_id' => 'string',
        'call_orig_call_id' => 'string',
        'call_orig_match_uri' => 'string',
        'call_orig_user' => 'string',
        'call_orig_domain' => 'string',
        'call_orig_uri' => 'string',
        'call_orig_name' => 'string',
        'caller_id_number' => 'string',
        'call_dialed_number' => 'string',
        'call_by_action' => 'string',
        'call_by_user' => 'string',
        'call_by_domain' => 'string',
        'call_by_call_id' => 'string',
        'call_term_call_id' => 'string',
        'call_term_user' => 'string',
        'call_term_domain' => 'string',
        'call_term_uri' => 'string',
        'call_start_datetime' => '\DateTime',
        'call_answer_datetime' => 'string',
        'call_orig_info' => 'string',
        'term_orig_info' => 'string',
        'call_audio_codec' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'core_server' => null,
        'call_session_id' => null,
        'call_orig_call_id' => null,
        'call_orig_match_uri' => null,
        'call_orig_user' => null,
        'call_orig_domain' => null,
        'call_orig_uri' => null,
        'call_orig_name' => null,
        'caller_id_number' => null,
        'call_dialed_number' => null,
        'call_by_action' => null,
        'call_by_user' => null,
        'call_by_domain' => null,
        'call_by_call_id' => null,
        'call_term_call_id' => null,
        'call_term_user' => null,
        'call_term_domain' => null,
        'call_term_uri' => null,
        'call_start_datetime' => 'date',
        'call_answer_datetime' => null,
        'call_orig_info' => null,
        'term_orig_info' => null,
        'call_audio_codec' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'core_server' => false,
        'call_session_id' => false,
        'call_orig_call_id' => false,
        'call_orig_match_uri' => false,
        'call_orig_user' => false,
        'call_orig_domain' => false,
        'call_orig_uri' => false,
        'call_orig_name' => false,
        'caller_id_number' => false,
        'call_dialed_number' => false,
        'call_by_action' => false,
        'call_by_user' => false,
        'call_by_domain' => false,
        'call_by_call_id' => false,
        'call_term_call_id' => false,
        'call_term_user' => false,
        'call_term_domain' => false,
        'call_term_uri' => false,
        'call_start_datetime' => false,
        'call_answer_datetime' => false,
        'call_orig_info' => false,
        'term_orig_info' => false,
        'call_audio_codec' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'core_server' => 'core-server',
        'call_session_id' => 'call-session-id',
        'call_orig_call_id' => 'call-orig-call-id',
        'call_orig_match_uri' => 'call-orig-match-uri',
        'call_orig_user' => 'call-orig-user',
        'call_orig_domain' => 'call-orig-domain',
        'call_orig_uri' => 'call-orig-uri',
        'call_orig_name' => 'call-orig-name',
        'caller_id_number' => 'caller-id-number',
        'call_dialed_number' => 'call-dialed-number',
        'call_by_action' => 'call-by-action',
        'call_by_user' => 'call-by-user',
        'call_by_domain' => 'call-by-domain',
        'call_by_call_id' => 'call-by-call-id',
        'call_term_call_id' => 'call-term-call-id',
        'call_term_user' => 'call-term-user',
        'call_term_domain' => 'call-term-domain',
        'call_term_uri' => 'call-term-uri',
        'call_start_datetime' => 'call-start-datetime',
        'call_answer_datetime' => 'call-answer-datetime',
        'call_orig_info' => 'call-orig-info',
        'term_orig_info' => 'term-orig-info',
        'call_audio_codec' => 'call-audio-codec'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'core_server' => 'setCoreServer',
        'call_session_id' => 'setCallSessionId',
        'call_orig_call_id' => 'setCallOrigCallId',
        'call_orig_match_uri' => 'setCallOrigMatchUri',
        'call_orig_user' => 'setCallOrigUser',
        'call_orig_domain' => 'setCallOrigDomain',
        'call_orig_uri' => 'setCallOrigUri',
        'call_orig_name' => 'setCallOrigName',
        'caller_id_number' => 'setCallerIdNumber',
        'call_dialed_number' => 'setCallDialedNumber',
        'call_by_action' => 'setCallByAction',
        'call_by_user' => 'setCallByUser',
        'call_by_domain' => 'setCallByDomain',
        'call_by_call_id' => 'setCallByCallId',
        'call_term_call_id' => 'setCallTermCallId',
        'call_term_user' => 'setCallTermUser',
        'call_term_domain' => 'setCallTermDomain',
        'call_term_uri' => 'setCallTermUri',
        'call_start_datetime' => 'setCallStartDatetime',
        'call_answer_datetime' => 'setCallAnswerDatetime',
        'call_orig_info' => 'setCallOrigInfo',
        'term_orig_info' => 'setTermOrigInfo',
        'call_audio_codec' => 'setCallAudioCodec'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'core_server' => 'getCoreServer',
        'call_session_id' => 'getCallSessionId',
        'call_orig_call_id' => 'getCallOrigCallId',
        'call_orig_match_uri' => 'getCallOrigMatchUri',
        'call_orig_user' => 'getCallOrigUser',
        'call_orig_domain' => 'getCallOrigDomain',
        'call_orig_uri' => 'getCallOrigUri',
        'call_orig_name' => 'getCallOrigName',
        'caller_id_number' => 'getCallerIdNumber',
        'call_dialed_number' => 'getCallDialedNumber',
        'call_by_action' => 'getCallByAction',
        'call_by_user' => 'getCallByUser',
        'call_by_domain' => 'getCallByDomain',
        'call_by_call_id' => 'getCallByCallId',
        'call_term_call_id' => 'getCallTermCallId',
        'call_term_user' => 'getCallTermUser',
        'call_term_domain' => 'getCallTermDomain',
        'call_term_uri' => 'getCallTermUri',
        'call_start_datetime' => 'getCallStartDatetime',
        'call_answer_datetime' => 'getCallAnswerDatetime',
        'call_orig_info' => 'getCallOrigInfo',
        'term_orig_info' => 'getTermOrigInfo',
        'call_audio_codec' => 'getCallAudioCodec'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('core_server', $data ?? [], null);
        $this->setIfExists('call_session_id', $data ?? [], null);
        $this->setIfExists('call_orig_call_id', $data ?? [], null);
        $this->setIfExists('call_orig_match_uri', $data ?? [], null);
        $this->setIfExists('call_orig_user', $data ?? [], null);
        $this->setIfExists('call_orig_domain', $data ?? [], null);
        $this->setIfExists('call_orig_uri', $data ?? [], null);
        $this->setIfExists('call_orig_name', $data ?? [], null);
        $this->setIfExists('caller_id_number', $data ?? [], null);
        $this->setIfExists('call_dialed_number', $data ?? [], null);
        $this->setIfExists('call_by_action', $data ?? [], null);
        $this->setIfExists('call_by_user', $data ?? [], null);
        $this->setIfExists('call_by_domain', $data ?? [], null);
        $this->setIfExists('call_by_call_id', $data ?? [], null);
        $this->setIfExists('call_term_call_id', $data ?? [], null);
        $this->setIfExists('call_term_user', $data ?? [], null);
        $this->setIfExists('call_term_domain', $data ?? [], null);
        $this->setIfExists('call_term_uri', $data ?? [], null);
        $this->setIfExists('call_start_datetime', $data ?? [], null);
        $this->setIfExists('call_answer_datetime', $data ?? [], null);
        $this->setIfExists('call_orig_info', $data ?? [], null);
        $this->setIfExists('term_orig_info', $data ?? [], null);
        $this->setIfExists('call_audio_codec', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['core_server'] === null) {
            $invalidProperties[] = "'core_server' can't be null";
        }
        if ($this->container['call_session_id'] === null) {
            $invalidProperties[] = "'call_session_id' can't be null";
        }
        if ($this->container['call_orig_call_id'] === null) {
            $invalidProperties[] = "'call_orig_call_id' can't be null";
        }
        if ($this->container['call_orig_match_uri'] === null) {
            $invalidProperties[] = "'call_orig_match_uri' can't be null";
        }
        if ($this->container['call_orig_user'] === null) {
            $invalidProperties[] = "'call_orig_user' can't be null";
        }
        if ($this->container['call_orig_domain'] === null) {
            $invalidProperties[] = "'call_orig_domain' can't be null";
        }
        if ($this->container['call_orig_uri'] === null) {
            $invalidProperties[] = "'call_orig_uri' can't be null";
        }
        if ($this->container['call_orig_name'] === null) {
            $invalidProperties[] = "'call_orig_name' can't be null";
        }
        if ($this->container['caller_id_number'] === null) {
            $invalidProperties[] = "'caller_id_number' can't be null";
        }
        if ($this->container['call_dialed_number'] === null) {
            $invalidProperties[] = "'call_dialed_number' can't be null";
        }
        if ($this->container['call_by_action'] === null) {
            $invalidProperties[] = "'call_by_action' can't be null";
        }
        if ($this->container['call_by_user'] === null) {
            $invalidProperties[] = "'call_by_user' can't be null";
        }
        if ($this->container['call_by_domain'] === null) {
            $invalidProperties[] = "'call_by_domain' can't be null";
        }
        if ($this->container['call_by_call_id'] === null) {
            $invalidProperties[] = "'call_by_call_id' can't be null";
        }
        if ($this->container['call_term_call_id'] === null) {
            $invalidProperties[] = "'call_term_call_id' can't be null";
        }
        if ($this->container['call_term_user'] === null) {
            $invalidProperties[] = "'call_term_user' can't be null";
        }
        if ($this->container['call_term_domain'] === null) {
            $invalidProperties[] = "'call_term_domain' can't be null";
        }
        if ($this->container['call_term_uri'] === null) {
            $invalidProperties[] = "'call_term_uri' can't be null";
        }
        if ($this->container['call_start_datetime'] === null) {
            $invalidProperties[] = "'call_start_datetime' can't be null";
        }
        if ($this->container['call_answer_datetime'] === null) {
            $invalidProperties[] = "'call_answer_datetime' can't be null";
        }
        if ($this->container['call_orig_info'] === null) {
            $invalidProperties[] = "'call_orig_info' can't be null";
        }
        if ($this->container['term_orig_info'] === null) {
            $invalidProperties[] = "'term_orig_info' can't be null";
        }
        if ($this->container['call_audio_codec'] === null) {
            $invalidProperties[] = "'call_audio_codec' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets core_server
     *
     * @return string
     */
    public function getCoreServer()
    {
        return $this->container['core_server'];
    }

    /**
     * Sets core_server
     *
     * @param string $core_server core_server
     *
     * @return self
     */
    public function setCoreServer($core_server)
    {
        if (is_null($core_server)) {
            throw new \InvalidArgumentException('non-nullable core_server cannot be null');
        }
        $this->container['core_server'] = $core_server;

        return $this;
    }

    /**
     * Gets call_session_id
     *
     * @return string
     */
    public function getCallSessionId()
    {
        return $this->container['call_session_id'];
    }

    /**
     * Sets call_session_id
     *
     * @param string $call_session_id call_session_id
     *
     * @return self
     */
    public function setCallSessionId($call_session_id)
    {
        if (is_null($call_session_id)) {
            throw new \InvalidArgumentException('non-nullable call_session_id cannot be null');
        }
        $this->container['call_session_id'] = $call_session_id;

        return $this;
    }

    /**
     * Gets call_orig_call_id
     *
     * @return string
     */
    public function getCallOrigCallId()
    {
        return $this->container['call_orig_call_id'];
    }

    /**
     * Sets call_orig_call_id
     *
     * @param string $call_orig_call_id call_orig_call_id
     *
     * @return self
     */
    public function setCallOrigCallId($call_orig_call_id)
    {
        if (is_null($call_orig_call_id)) {
            throw new \InvalidArgumentException('non-nullable call_orig_call_id cannot be null');
        }
        $this->container['call_orig_call_id'] = $call_orig_call_id;

        return $this;
    }

    /**
     * Gets call_orig_match_uri
     *
     * @return string
     */
    public function getCallOrigMatchUri()
    {
        return $this->container['call_orig_match_uri'];
    }

    /**
     * Sets call_orig_match_uri
     *
     * @param string $call_orig_match_uri call_orig_match_uri
     *
     * @return self
     */
    public function setCallOrigMatchUri($call_orig_match_uri)
    {
        if (is_null($call_orig_match_uri)) {
            throw new \InvalidArgumentException('non-nullable call_orig_match_uri cannot be null');
        }
        $this->container['call_orig_match_uri'] = $call_orig_match_uri;

        return $this;
    }

    /**
     * Gets call_orig_user
     *
     * @return string
     */
    public function getCallOrigUser()
    {
        return $this->container['call_orig_user'];
    }

    /**
     * Sets call_orig_user
     *
     * @param string $call_orig_user call_orig_user
     *
     * @return self
     */
    public function setCallOrigUser($call_orig_user)
    {
        if (is_null($call_orig_user)) {
            throw new \InvalidArgumentException('non-nullable call_orig_user cannot be null');
        }
        $this->container['call_orig_user'] = $call_orig_user;

        return $this;
    }

    /**
     * Gets call_orig_domain
     *
     * @return string
     */
    public function getCallOrigDomain()
    {
        return $this->container['call_orig_domain'];
    }

    /**
     * Sets call_orig_domain
     *
     * @param string $call_orig_domain call_orig_domain
     *
     * @return self
     */
    public function setCallOrigDomain($call_orig_domain)
    {
        if (is_null($call_orig_domain)) {
            throw new \InvalidArgumentException('non-nullable call_orig_domain cannot be null');
        }
        $this->container['call_orig_domain'] = $call_orig_domain;

        return $this;
    }

    /**
     * Gets call_orig_uri
     *
     * @return string
     */
    public function getCallOrigUri()
    {
        return $this->container['call_orig_uri'];
    }

    /**
     * Sets call_orig_uri
     *
     * @param string $call_orig_uri call_orig_uri
     *
     * @return self
     */
    public function setCallOrigUri($call_orig_uri)
    {
        if (is_null($call_orig_uri)) {
            throw new \InvalidArgumentException('non-nullable call_orig_uri cannot be null');
        }
        $this->container['call_orig_uri'] = $call_orig_uri;

        return $this;
    }

    /**
     * Gets call_orig_name
     *
     * @return string
     */
    public function getCallOrigName()
    {
        return $this->container['call_orig_name'];
    }

    /**
     * Sets call_orig_name
     *
     * @param string $call_orig_name call_orig_name
     *
     * @return self
     */
    public function setCallOrigName($call_orig_name)
    {
        if (is_null($call_orig_name)) {
            throw new \InvalidArgumentException('non-nullable call_orig_name cannot be null');
        }
        $this->container['call_orig_name'] = $call_orig_name;

        return $this;
    }

    /**
     * Gets caller_id_number
     *
     * @return string
     */
    public function getCallerIdNumber()
    {
        return $this->container['caller_id_number'];
    }

    /**
     * Sets caller_id_number
     *
     * @param string $caller_id_number caller_id_number
     *
     * @return self
     */
    public function setCallerIdNumber($caller_id_number)
    {
        if (is_null($caller_id_number)) {
            throw new \InvalidArgumentException('non-nullable caller_id_number cannot be null');
        }
        $this->container['caller_id_number'] = $caller_id_number;

        return $this;
    }

    /**
     * Gets call_dialed_number
     *
     * @return string
     */
    public function getCallDialedNumber()
    {
        return $this->container['call_dialed_number'];
    }

    /**
     * Sets call_dialed_number
     *
     * @param string $call_dialed_number call_dialed_number
     *
     * @return self
     */
    public function setCallDialedNumber($call_dialed_number)
    {
        if (is_null($call_dialed_number)) {
            throw new \InvalidArgumentException('non-nullable call_dialed_number cannot be null');
        }
        $this->container['call_dialed_number'] = $call_dialed_number;

        return $this;
    }

    /**
     * Gets call_by_action
     *
     * @return string
     */
    public function getCallByAction()
    {
        return $this->container['call_by_action'];
    }

    /**
     * Sets call_by_action
     *
     * @param string $call_by_action call_by_action
     *
     * @return self
     */
    public function setCallByAction($call_by_action)
    {
        if (is_null($call_by_action)) {
            throw new \InvalidArgumentException('non-nullable call_by_action cannot be null');
        }
        $this->container['call_by_action'] = $call_by_action;

        return $this;
    }

    /**
     * Gets call_by_user
     *
     * @return string
     */
    public function getCallByUser()
    {
        return $this->container['call_by_user'];
    }

    /**
     * Sets call_by_user
     *
     * @param string $call_by_user call_by_user
     *
     * @return self
     */
    public function setCallByUser($call_by_user)
    {
        if (is_null($call_by_user)) {
            throw new \InvalidArgumentException('non-nullable call_by_user cannot be null');
        }
        $this->container['call_by_user'] = $call_by_user;

        return $this;
    }

    /**
     * Gets call_by_domain
     *
     * @return string
     */
    public function getCallByDomain()
    {
        return $this->container['call_by_domain'];
    }

    /**
     * Sets call_by_domain
     *
     * @param string $call_by_domain call_by_domain
     *
     * @return self
     */
    public function setCallByDomain($call_by_domain)
    {
        if (is_null($call_by_domain)) {
            throw new \InvalidArgumentException('non-nullable call_by_domain cannot be null');
        }
        $this->container['call_by_domain'] = $call_by_domain;

        return $this;
    }

    /**
     * Gets call_by_call_id
     *
     * @return string
     */
    public function getCallByCallId()
    {
        return $this->container['call_by_call_id'];
    }

    /**
     * Sets call_by_call_id
     *
     * @param string $call_by_call_id call_by_call_id
     *
     * @return self
     */
    public function setCallByCallId($call_by_call_id)
    {
        if (is_null($call_by_call_id)) {
            throw new \InvalidArgumentException('non-nullable call_by_call_id cannot be null');
        }
        $this->container['call_by_call_id'] = $call_by_call_id;

        return $this;
    }

    /**
     * Gets call_term_call_id
     *
     * @return string
     */
    public function getCallTermCallId()
    {
        return $this->container['call_term_call_id'];
    }

    /**
     * Sets call_term_call_id
     *
     * @param string $call_term_call_id call_term_call_id
     *
     * @return self
     */
    public function setCallTermCallId($call_term_call_id)
    {
        if (is_null($call_term_call_id)) {
            throw new \InvalidArgumentException('non-nullable call_term_call_id cannot be null');
        }
        $this->container['call_term_call_id'] = $call_term_call_id;

        return $this;
    }

    /**
     * Gets call_term_user
     *
     * @return string
     */
    public function getCallTermUser()
    {
        return $this->container['call_term_user'];
    }

    /**
     * Sets call_term_user
     *
     * @param string $call_term_user call_term_user
     *
     * @return self
     */
    public function setCallTermUser($call_term_user)
    {
        if (is_null($call_term_user)) {
            throw new \InvalidArgumentException('non-nullable call_term_user cannot be null');
        }
        $this->container['call_term_user'] = $call_term_user;

        return $this;
    }

    /**
     * Gets call_term_domain
     *
     * @return string
     */
    public function getCallTermDomain()
    {
        return $this->container['call_term_domain'];
    }

    /**
     * Sets call_term_domain
     *
     * @param string $call_term_domain call_term_domain
     *
     * @return self
     */
    public function setCallTermDomain($call_term_domain)
    {
        if (is_null($call_term_domain)) {
            throw new \InvalidArgumentException('non-nullable call_term_domain cannot be null');
        }
        $this->container['call_term_domain'] = $call_term_domain;

        return $this;
    }

    /**
     * Gets call_term_uri
     *
     * @return string
     */
    public function getCallTermUri()
    {
        return $this->container['call_term_uri'];
    }

    /**
     * Sets call_term_uri
     *
     * @param string $call_term_uri call_term_uri
     *
     * @return self
     */
    public function setCallTermUri($call_term_uri)
    {
        if (is_null($call_term_uri)) {
            throw new \InvalidArgumentException('non-nullable call_term_uri cannot be null');
        }
        $this->container['call_term_uri'] = $call_term_uri;

        return $this;
    }

    /**
     * Gets call_start_datetime
     *
     * @return \DateTime
     */
    public function getCallStartDatetime()
    {
        return $this->container['call_start_datetime'];
    }

    /**
     * Sets call_start_datetime
     *
     * @param \DateTime $call_start_datetime call_start_datetime
     *
     * @return self
     */
    public function setCallStartDatetime($call_start_datetime)
    {
        if (is_null($call_start_datetime)) {
            throw new \InvalidArgumentException('non-nullable call_start_datetime cannot be null');
        }
        $this->container['call_start_datetime'] = $call_start_datetime;

        return $this;
    }

    /**
     * Gets call_answer_datetime
     *
     * @return string
     */
    public function getCallAnswerDatetime()
    {
        return $this->container['call_answer_datetime'];
    }

    /**
     * Sets call_answer_datetime
     *
     * @param string $call_answer_datetime call_answer_datetime
     *
     * @return self
     */
    public function setCallAnswerDatetime($call_answer_datetime)
    {
        if (is_null($call_answer_datetime)) {
            throw new \InvalidArgumentException('non-nullable call_answer_datetime cannot be null');
        }
        $this->container['call_answer_datetime'] = $call_answer_datetime;

        return $this;
    }

    /**
     * Gets call_orig_info
     *
     * @return string
     */
    public function getCallOrigInfo()
    {
        return $this->container['call_orig_info'];
    }

    /**
     * Sets call_orig_info
     *
     * @param string $call_orig_info call_orig_info
     *
     * @return self
     */
    public function setCallOrigInfo($call_orig_info)
    {
        if (is_null($call_orig_info)) {
            throw new \InvalidArgumentException('non-nullable call_orig_info cannot be null');
        }
        $this->container['call_orig_info'] = $call_orig_info;

        return $this;
    }

    /**
     * Gets term_orig_info
     *
     * @return string
     */
    public function getTermOrigInfo()
    {
        return $this->container['term_orig_info'];
    }

    /**
     * Sets term_orig_info
     *
     * @param string $term_orig_info term_orig_info
     *
     * @return self
     */
    public function setTermOrigInfo($term_orig_info)
    {
        if (is_null($term_orig_info)) {
            throw new \InvalidArgumentException('non-nullable term_orig_info cannot be null');
        }
        $this->container['term_orig_info'] = $term_orig_info;

        return $this;
    }

    /**
     * Gets call_audio_codec
     *
     * @return string
     */
    public function getCallAudioCodec()
    {
        return $this->container['call_audio_codec'];
    }

    /**
     * Sets call_audio_codec
     *
     * @param string $call_audio_codec call_audio_codec
     *
     * @return self
     */
    public function setCallAudioCodec($call_audio_codec)
    {
        if (is_null($call_audio_codec)) {
            throw new \InvalidArgumentException('non-nullable call_audio_codec cannot be null');
        }
        $this->container['call_audio_codec'] = $call_audio_codec;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


