<?php
/**
 * Contact
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * Contact Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Contact implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unique_id' => 'string',
        'name_first_name' => 'string',
        'name_middle_name' => 'string',
        'name_last_name' => 'string',
        'email' => 'string',
        'company' => 'string',
        'phonenumber_work' => 'string',
        'phonenumber_cell' => 'string',
        'phonenumber_fax' => 'string',
        'phonenumber_home' => 'string',
        'tags' => 'string',
        'created_datetime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'unique_id' => null,
        'name_first_name' => null,
        'name_middle_name' => null,
        'name_last_name' => null,
        'email' => null,
        'company' => null,
        'phonenumber_work' => null,
        'phonenumber_cell' => null,
        'phonenumber_fax' => null,
        'phonenumber_home' => null,
        'tags' => null,
        'created_datetime' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'unique_id' => false,
        'name_first_name' => false,
        'name_middle_name' => false,
        'name_last_name' => false,
        'email' => false,
        'company' => false,
        'phonenumber_work' => false,
        'phonenumber_cell' => false,
        'phonenumber_fax' => false,
        'phonenumber_home' => false,
        'tags' => false,
        'created_datetime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unique_id' => 'unique-id',
        'name_first_name' => 'name-first-name',
        'name_middle_name' => 'name-middle-name',
        'name_last_name' => 'name-last-name',
        'email' => 'email',
        'company' => 'company',
        'phonenumber_work' => 'phonenumber-work',
        'phonenumber_cell' => 'phonenumber-cell',
        'phonenumber_fax' => 'phonenumber-fax',
        'phonenumber_home' => 'phonenumber-home',
        'tags' => 'tags',
        'created_datetime' => 'created-datetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unique_id' => 'setUniqueId',
        'name_first_name' => 'setNameFirstName',
        'name_middle_name' => 'setNameMiddleName',
        'name_last_name' => 'setNameLastName',
        'email' => 'setEmail',
        'company' => 'setCompany',
        'phonenumber_work' => 'setPhonenumberWork',
        'phonenumber_cell' => 'setPhonenumberCell',
        'phonenumber_fax' => 'setPhonenumberFax',
        'phonenumber_home' => 'setPhonenumberHome',
        'tags' => 'setTags',
        'created_datetime' => 'setCreatedDatetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unique_id' => 'getUniqueId',
        'name_first_name' => 'getNameFirstName',
        'name_middle_name' => 'getNameMiddleName',
        'name_last_name' => 'getNameLastName',
        'email' => 'getEmail',
        'company' => 'getCompany',
        'phonenumber_work' => 'getPhonenumberWork',
        'phonenumber_cell' => 'getPhonenumberCell',
        'phonenumber_fax' => 'getPhonenumberFax',
        'phonenumber_home' => 'getPhonenumberHome',
        'tags' => 'getTags',
        'created_datetime' => 'getCreatedDatetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('unique_id', $data ?? [], null);
        $this->setIfExists('name_first_name', $data ?? [], null);
        $this->setIfExists('name_middle_name', $data ?? [], null);
        $this->setIfExists('name_last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('phonenumber_work', $data ?? [], null);
        $this->setIfExists('phonenumber_cell', $data ?? [], null);
        $this->setIfExists('phonenumber_fax', $data ?? [], null);
        $this->setIfExists('phonenumber_home', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('created_datetime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['unique_id'] === null) {
            $invalidProperties[] = "'unique_id' can't be null";
        }
        if ($this->container['name_first_name'] === null) {
            $invalidProperties[] = "'name_first_name' can't be null";
        }
        if ($this->container['name_middle_name'] === null) {
            $invalidProperties[] = "'name_middle_name' can't be null";
        }
        if ($this->container['name_last_name'] === null) {
            $invalidProperties[] = "'name_last_name' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['company'] === null) {
            $invalidProperties[] = "'company' can't be null";
        }
        if ($this->container['phonenumber_work'] === null) {
            $invalidProperties[] = "'phonenumber_work' can't be null";
        }
        if ($this->container['phonenumber_cell'] === null) {
            $invalidProperties[] = "'phonenumber_cell' can't be null";
        }
        if ($this->container['phonenumber_fax'] === null) {
            $invalidProperties[] = "'phonenumber_fax' can't be null";
        }
        if ($this->container['phonenumber_home'] === null) {
            $invalidProperties[] = "'phonenumber_home' can't be null";
        }
        if ($this->container['tags'] === null) {
            $invalidProperties[] = "'tags' can't be null";
        }
        if ($this->container['created_datetime'] === null) {
            $invalidProperties[] = "'created_datetime' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unique_id
     *
     * @return string
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param string $unique_id This is a unique id that will be generated automatically on new contact create.
     *
     * @return self
     */
    public function setUniqueId($unique_id)
    {
        if (is_null($unique_id)) {
            throw new \InvalidArgumentException('non-nullable unique_id cannot be null');
        }
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets name_first_name
     *
     * @return string
     */
    public function getNameFirstName()
    {
        return $this->container['name_first_name'];
    }

    /**
     * Sets name_first_name
     *
     * @param string $name_first_name name_first_name
     *
     * @return self
     */
    public function setNameFirstName($name_first_name)
    {
        if (is_null($name_first_name)) {
            throw new \InvalidArgumentException('non-nullable name_first_name cannot be null');
        }
        $this->container['name_first_name'] = $name_first_name;

        return $this;
    }

    /**
     * Gets name_middle_name
     *
     * @return string
     */
    public function getNameMiddleName()
    {
        return $this->container['name_middle_name'];
    }

    /**
     * Sets name_middle_name
     *
     * @param string $name_middle_name name_middle_name
     *
     * @return self
     */
    public function setNameMiddleName($name_middle_name)
    {
        if (is_null($name_middle_name)) {
            throw new \InvalidArgumentException('non-nullable name_middle_name cannot be null');
        }
        $this->container['name_middle_name'] = $name_middle_name;

        return $this;
    }

    /**
     * Gets name_last_name
     *
     * @return string
     */
    public function getNameLastName()
    {
        return $this->container['name_last_name'];
    }

    /**
     * Sets name_last_name
     *
     * @param string $name_last_name name_last_name
     *
     * @return self
     */
    public function setNameLastName($name_last_name)
    {
        if (is_null($name_last_name)) {
            throw new \InvalidArgumentException('non-nullable name_last_name cannot be null');
        }
        $this->container['name_last_name'] = $name_last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets phonenumber_work
     *
     * @return string
     */
    public function getPhonenumberWork()
    {
        return $this->container['phonenumber_work'];
    }

    /**
     * Sets phonenumber_work
     *
     * @param string $phonenumber_work phonenumber_work
     *
     * @return self
     */
    public function setPhonenumberWork($phonenumber_work)
    {
        if (is_null($phonenumber_work)) {
            throw new \InvalidArgumentException('non-nullable phonenumber_work cannot be null');
        }
        $this->container['phonenumber_work'] = $phonenumber_work;

        return $this;
    }

    /**
     * Gets phonenumber_cell
     *
     * @return string
     */
    public function getPhonenumberCell()
    {
        return $this->container['phonenumber_cell'];
    }

    /**
     * Sets phonenumber_cell
     *
     * @param string $phonenumber_cell phonenumber_cell
     *
     * @return self
     */
    public function setPhonenumberCell($phonenumber_cell)
    {
        if (is_null($phonenumber_cell)) {
            throw new \InvalidArgumentException('non-nullable phonenumber_cell cannot be null');
        }
        $this->container['phonenumber_cell'] = $phonenumber_cell;

        return $this;
    }

    /**
     * Gets phonenumber_fax
     *
     * @return string
     */
    public function getPhonenumberFax()
    {
        return $this->container['phonenumber_fax'];
    }

    /**
     * Sets phonenumber_fax
     *
     * @param string $phonenumber_fax phonenumber_fax
     *
     * @return self
     */
    public function setPhonenumberFax($phonenumber_fax)
    {
        if (is_null($phonenumber_fax)) {
            throw new \InvalidArgumentException('non-nullable phonenumber_fax cannot be null');
        }
        $this->container['phonenumber_fax'] = $phonenumber_fax;

        return $this;
    }

    /**
     * Gets phonenumber_home
     *
     * @return string
     */
    public function getPhonenumberHome()
    {
        return $this->container['phonenumber_home'];
    }

    /**
     * Sets phonenumber_home
     *
     * @param string $phonenumber_home phonenumber_home
     *
     * @return self
     */
    public function setPhonenumberHome($phonenumber_home)
    {
        if (is_null($phonenumber_home)) {
            throw new \InvalidArgumentException('non-nullable phonenumber_home cannot be null');
        }
        $this->container['phonenumber_home'] = $phonenumber_home;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets created_datetime
     *
     * @return string
     */
    public function getCreatedDatetime()
    {
        return $this->container['created_datetime'];
    }

    /**
     * Sets created_datetime
     *
     * @param string $created_datetime created_datetime
     *
     * @return self
     */
    public function setCreatedDatetime($created_datetime)
    {
        if (is_null($created_datetime)) {
            throw new \InvalidArgumentException('non-nullable created_datetime cannot be null');
        }
        $this->container['created_datetime'] = $created_datetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


