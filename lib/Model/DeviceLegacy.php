<?php
/**
 * DeviceLegacy
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * DeviceLegacy Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeviceLegacy implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeviceLegacy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'device' => 'string',
        'subscriber_name' => 'string',
        'mode' => 'string',
        'user_agent' => 'string',
        'received_from' => 'string',
        'contact' => 'string',
        'registration_time' => 'string',
        'subscriber_domain' => 'string',
        'authentication_key' => 'string',
        'call_processing_rule' => 'string',
        'registration_expires_time' => 'string',
        'expires' => 'int',
        'callid_emgr' => 'string',
        'hostname' => 'string',
        'address_id' => 'string',
        'sub_fullname' => 'string',
        'sub_login' => 'string',
        'aor_user' => '\SpectrumVoip\\\\NetSapiens\Model\ConnectionExtraConnectionAddress',
        'sub_scope' => 'string',
        'address_pretty_print' => 'string',
        'address_ip' => 'string',
        'is_endpoint_callid' => 'bool',
        'ndperror' => '\SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserVoicesGet200Response',
        'server' => 'string',
        'owner' => 'string',
        'auth_user' => 'string',
        'auth_pass' => 'string',
        'mac' => 'string',
        'model' => 'string',
        'overrides' => 'string',
        'transport' => 'string',
        'line' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'device' => null,
        'subscriber_name' => null,
        'mode' => null,
        'user_agent' => null,
        'received_from' => null,
        'contact' => null,
        'registration_time' => null,
        'subscriber_domain' => null,
        'authentication_key' => null,
        'call_processing_rule' => null,
        'registration_expires_time' => null,
        'expires' => null,
        'callid_emgr' => null,
        'hostname' => null,
        'address_id' => null,
        'sub_fullname' => null,
        'sub_login' => null,
        'aor_user' => null,
        'sub_scope' => null,
        'address_pretty_print' => null,
        'address_ip' => null,
        'is_endpoint_callid' => null,
        'ndperror' => null,
        'server' => null,
        'owner' => null,
        'auth_user' => null,
        'auth_pass' => null,
        'mac' => null,
        'model' => null,
        'overrides' => null,
        'transport' => null,
        'line' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'device' => false,
        'subscriber_name' => false,
        'mode' => false,
        'user_agent' => false,
        'received_from' => false,
        'contact' => false,
        'registration_time' => false,
        'subscriber_domain' => false,
        'authentication_key' => false,
        'call_processing_rule' => false,
        'registration_expires_time' => false,
        'expires' => false,
        'callid_emgr' => false,
        'hostname' => false,
        'address_id' => false,
        'sub_fullname' => false,
        'sub_login' => false,
        'aor_user' => false,
        'sub_scope' => false,
        'address_pretty_print' => false,
        'address_ip' => false,
        'is_endpoint_callid' => false,
        'ndperror' => true,
        'server' => false,
        'owner' => false,
        'auth_user' => false,
        'auth_pass' => false,
        'mac' => false,
        'model' => false,
        'overrides' => false,
        'transport' => false,
        'line' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'device' => 'device',
        'subscriber_name' => 'subscriber_name',
        'mode' => 'mode',
        'user_agent' => 'user_agent',
        'received_from' => 'received_from',
        'contact' => 'contact',
        'registration_time' => 'registration_time',
        'subscriber_domain' => 'subscriber_domain',
        'authentication_key' => 'authentication_key',
        'call_processing_rule' => 'call_processing_rule',
        'registration_expires_time' => 'registration_expires_time',
        'expires' => 'expires',
        'callid_emgr' => 'callid_emgr',
        'hostname' => 'hostname',
        'address_id' => 'address_id',
        'sub_fullname' => 'sub_fullname',
        'sub_login' => 'sub_login',
        'aor_user' => 'aor_user',
        'sub_scope' => 'sub_scope',
        'address_pretty_print' => 'address_pretty_print',
        'address_ip' => 'address_ip',
        'is_endpoint_callid' => 'is_endpoint_callid',
        'ndperror' => 'ndperror',
        'server' => 'server',
        'owner' => 'owner',
        'auth_user' => 'auth_user',
        'auth_pass' => 'auth_pass',
        'mac' => 'mac',
        'model' => 'model',
        'overrides' => 'overrides',
        'transport' => 'transport',
        'line' => 'line'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'device' => 'setDevice',
        'subscriber_name' => 'setSubscriberName',
        'mode' => 'setMode',
        'user_agent' => 'setUserAgent',
        'received_from' => 'setReceivedFrom',
        'contact' => 'setContact',
        'registration_time' => 'setRegistrationTime',
        'subscriber_domain' => 'setSubscriberDomain',
        'authentication_key' => 'setAuthenticationKey',
        'call_processing_rule' => 'setCallProcessingRule',
        'registration_expires_time' => 'setRegistrationExpiresTime',
        'expires' => 'setExpires',
        'callid_emgr' => 'setCallidEmgr',
        'hostname' => 'setHostname',
        'address_id' => 'setAddressId',
        'sub_fullname' => 'setSubFullname',
        'sub_login' => 'setSubLogin',
        'aor_user' => 'setAorUser',
        'sub_scope' => 'setSubScope',
        'address_pretty_print' => 'setAddressPrettyPrint',
        'address_ip' => 'setAddressIp',
        'is_endpoint_callid' => 'setIsEndpointCallid',
        'ndperror' => 'setNdperror',
        'server' => 'setServer',
        'owner' => 'setOwner',
        'auth_user' => 'setAuthUser',
        'auth_pass' => 'setAuthPass',
        'mac' => 'setMac',
        'model' => 'setModel',
        'overrides' => 'setOverrides',
        'transport' => 'setTransport',
        'line' => 'setLine'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'device' => 'getDevice',
        'subscriber_name' => 'getSubscriberName',
        'mode' => 'getMode',
        'user_agent' => 'getUserAgent',
        'received_from' => 'getReceivedFrom',
        'contact' => 'getContact',
        'registration_time' => 'getRegistrationTime',
        'subscriber_domain' => 'getSubscriberDomain',
        'authentication_key' => 'getAuthenticationKey',
        'call_processing_rule' => 'getCallProcessingRule',
        'registration_expires_time' => 'getRegistrationExpiresTime',
        'expires' => 'getExpires',
        'callid_emgr' => 'getCallidEmgr',
        'hostname' => 'getHostname',
        'address_id' => 'getAddressId',
        'sub_fullname' => 'getSubFullname',
        'sub_login' => 'getSubLogin',
        'aor_user' => 'getAorUser',
        'sub_scope' => 'getSubScope',
        'address_pretty_print' => 'getAddressPrettyPrint',
        'address_ip' => 'getAddressIp',
        'is_endpoint_callid' => 'getIsEndpointCallid',
        'ndperror' => 'getNdperror',
        'server' => 'getServer',
        'owner' => 'getOwner',
        'auth_user' => 'getAuthUser',
        'auth_pass' => 'getAuthPass',
        'mac' => 'getMac',
        'model' => 'getModel',
        'overrides' => 'getOverrides',
        'transport' => 'getTransport',
        'line' => 'getLine'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('subscriber_name', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('user_agent', $data ?? [], null);
        $this->setIfExists('received_from', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('registration_time', $data ?? [], null);
        $this->setIfExists('subscriber_domain', $data ?? [], null);
        $this->setIfExists('authentication_key', $data ?? [], null);
        $this->setIfExists('call_processing_rule', $data ?? [], null);
        $this->setIfExists('registration_expires_time', $data ?? [], null);
        $this->setIfExists('expires', $data ?? [], null);
        $this->setIfExists('callid_emgr', $data ?? [], null);
        $this->setIfExists('hostname', $data ?? [], null);
        $this->setIfExists('address_id', $data ?? [], null);
        $this->setIfExists('sub_fullname', $data ?? [], null);
        $this->setIfExists('sub_login', $data ?? [], null);
        $this->setIfExists('aor_user', $data ?? [], null);
        $this->setIfExists('sub_scope', $data ?? [], null);
        $this->setIfExists('address_pretty_print', $data ?? [], null);
        $this->setIfExists('address_ip', $data ?? [], null);
        $this->setIfExists('is_endpoint_callid', $data ?? [], null);
        $this->setIfExists('ndperror', $data ?? [], null);
        $this->setIfExists('server', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('auth_user', $data ?? [], null);
        $this->setIfExists('auth_pass', $data ?? [], null);
        $this->setIfExists('mac', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('overrides', $data ?? [], null);
        $this->setIfExists('transport', $data ?? [], null);
        $this->setIfExists('line', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['device'] === null) {
            $invalidProperties[] = "'device' can't be null";
        }
        if ($this->container['subscriber_name'] === null) {
            $invalidProperties[] = "'subscriber_name' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalidProperties[] = "'owner' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets device
     *
     * @return string
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string $device device
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets subscriber_name
     *
     * @return string
     */
    public function getSubscriberName()
    {
        return $this->container['subscriber_name'];
    }

    /**
     * Sets subscriber_name
     *
     * @param string $subscriber_name subscriber_name
     *
     * @return self
     */
    public function setSubscriberName($subscriber_name)
    {
        if (is_null($subscriber_name)) {
            throw new \InvalidArgumentException('non-nullable subscriber_name cannot be null');
        }
        $this->container['subscriber_name'] = $subscriber_name;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string|null $user_agent user_agent
     *
     * @return self
     */
    public function setUserAgent($user_agent)
    {
        if (is_null($user_agent)) {
            throw new \InvalidArgumentException('non-nullable user_agent cannot be null');
        }
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets received_from
     *
     * @return string|null
     */
    public function getReceivedFrom()
    {
        return $this->container['received_from'];
    }

    /**
     * Sets received_from
     *
     * @param string|null $received_from received_from
     *
     * @return self
     */
    public function setReceivedFrom($received_from)
    {
        if (is_null($received_from)) {
            throw new \InvalidArgumentException('non-nullable received_from cannot be null');
        }
        $this->container['received_from'] = $received_from;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return string|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param string|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets registration_time
     *
     * @return string|null
     */
    public function getRegistrationTime()
    {
        return $this->container['registration_time'];
    }

    /**
     * Sets registration_time
     *
     * @param string|null $registration_time registration_time
     *
     * @return self
     */
    public function setRegistrationTime($registration_time)
    {
        if (is_null($registration_time)) {
            throw new \InvalidArgumentException('non-nullable registration_time cannot be null');
        }
        $this->container['registration_time'] = $registration_time;

        return $this;
    }

    /**
     * Gets subscriber_domain
     *
     * @return string|null
     */
    public function getSubscriberDomain()
    {
        return $this->container['subscriber_domain'];
    }

    /**
     * Sets subscriber_domain
     *
     * @param string|null $subscriber_domain subscriber_domain
     *
     * @return self
     */
    public function setSubscriberDomain($subscriber_domain)
    {
        if (is_null($subscriber_domain)) {
            throw new \InvalidArgumentException('non-nullable subscriber_domain cannot be null');
        }
        $this->container['subscriber_domain'] = $subscriber_domain;

        return $this;
    }

    /**
     * Gets authentication_key
     *
     * @return string|null
     */
    public function getAuthenticationKey()
    {
        return $this->container['authentication_key'];
    }

    /**
     * Sets authentication_key
     *
     * @param string|null $authentication_key authentication_key
     *
     * @return self
     */
    public function setAuthenticationKey($authentication_key)
    {
        if (is_null($authentication_key)) {
            throw new \InvalidArgumentException('non-nullable authentication_key cannot be null');
        }
        $this->container['authentication_key'] = $authentication_key;

        return $this;
    }

    /**
     * Gets call_processing_rule
     *
     * @return string|null
     */
    public function getCallProcessingRule()
    {
        return $this->container['call_processing_rule'];
    }

    /**
     * Sets call_processing_rule
     *
     * @param string|null $call_processing_rule call_processing_rule
     *
     * @return self
     */
    public function setCallProcessingRule($call_processing_rule)
    {
        if (is_null($call_processing_rule)) {
            throw new \InvalidArgumentException('non-nullable call_processing_rule cannot be null');
        }
        $this->container['call_processing_rule'] = $call_processing_rule;

        return $this;
    }

    /**
     * Gets registration_expires_time
     *
     * @return string|null
     */
    public function getRegistrationExpiresTime()
    {
        return $this->container['registration_expires_time'];
    }

    /**
     * Sets registration_expires_time
     *
     * @param string|null $registration_expires_time registration_expires_time
     *
     * @return self
     */
    public function setRegistrationExpiresTime($registration_expires_time)
    {
        if (is_null($registration_expires_time)) {
            throw new \InvalidArgumentException('non-nullable registration_expires_time cannot be null');
        }
        $this->container['registration_expires_time'] = $registration_expires_time;

        return $this;
    }

    /**
     * Gets expires
     *
     * @return int|null
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     *
     * @param int|null $expires expires
     *
     * @return self
     */
    public function setExpires($expires)
    {
        if (is_null($expires)) {
            throw new \InvalidArgumentException('non-nullable expires cannot be null');
        }
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets callid_emgr
     *
     * @return string|null
     */
    public function getCallidEmgr()
    {
        return $this->container['callid_emgr'];
    }

    /**
     * Sets callid_emgr
     *
     * @param string|null $callid_emgr callid_emgr
     *
     * @return self
     */
    public function setCallidEmgr($callid_emgr)
    {
        if (is_null($callid_emgr)) {
            throw new \InvalidArgumentException('non-nullable callid_emgr cannot be null');
        }
        $this->container['callid_emgr'] = $callid_emgr;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname hostname
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        if (is_null($hostname)) {
            throw new \InvalidArgumentException('non-nullable hostname cannot be null');
        }
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets address_id
     *
     * @return string|null
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param string|null $address_id address_id
     *
     * @return self
     */
    public function setAddressId($address_id)
    {
        if (is_null($address_id)) {
            throw new \InvalidArgumentException('non-nullable address_id cannot be null');
        }
        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets sub_fullname
     *
     * @return string|null
     */
    public function getSubFullname()
    {
        return $this->container['sub_fullname'];
    }

    /**
     * Sets sub_fullname
     *
     * @param string|null $sub_fullname sub_fullname
     *
     * @return self
     */
    public function setSubFullname($sub_fullname)
    {
        if (is_null($sub_fullname)) {
            throw new \InvalidArgumentException('non-nullable sub_fullname cannot be null');
        }
        $this->container['sub_fullname'] = $sub_fullname;

        return $this;
    }

    /**
     * Gets sub_login
     *
     * @return string|null
     */
    public function getSubLogin()
    {
        return $this->container['sub_login'];
    }

    /**
     * Sets sub_login
     *
     * @param string|null $sub_login sub_login
     *
     * @return self
     */
    public function setSubLogin($sub_login)
    {
        if (is_null($sub_login)) {
            throw new \InvalidArgumentException('non-nullable sub_login cannot be null');
        }
        $this->container['sub_login'] = $sub_login;

        return $this;
    }

    /**
     * Gets aor_user
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\ConnectionExtraConnectionAddress|null
     */
    public function getAorUser()
    {
        return $this->container['aor_user'];
    }

    /**
     * Sets aor_user
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\ConnectionExtraConnectionAddress|null $aor_user aor_user
     *
     * @return self
     */
    public function setAorUser($aor_user)
    {
        if (is_null($aor_user)) {
            throw new \InvalidArgumentException('non-nullable aor_user cannot be null');
        }
        $this->container['aor_user'] = $aor_user;

        return $this;
    }

    /**
     * Gets sub_scope
     *
     * @return string|null
     */
    public function getSubScope()
    {
        return $this->container['sub_scope'];
    }

    /**
     * Sets sub_scope
     *
     * @param string|null $sub_scope sub_scope
     *
     * @return self
     */
    public function setSubScope($sub_scope)
    {
        if (is_null($sub_scope)) {
            throw new \InvalidArgumentException('non-nullable sub_scope cannot be null');
        }
        $this->container['sub_scope'] = $sub_scope;

        return $this;
    }

    /**
     * Gets address_pretty_print
     *
     * @return string|null
     */
    public function getAddressPrettyPrint()
    {
        return $this->container['address_pretty_print'];
    }

    /**
     * Sets address_pretty_print
     *
     * @param string|null $address_pretty_print address_pretty_print
     *
     * @return self
     */
    public function setAddressPrettyPrint($address_pretty_print)
    {
        if (is_null($address_pretty_print)) {
            throw new \InvalidArgumentException('non-nullable address_pretty_print cannot be null');
        }
        $this->container['address_pretty_print'] = $address_pretty_print;

        return $this;
    }

    /**
     * Gets address_ip
     *
     * @return string|null
     */
    public function getAddressIp()
    {
        return $this->container['address_ip'];
    }

    /**
     * Sets address_ip
     *
     * @param string|null $address_ip address_ip
     *
     * @return self
     */
    public function setAddressIp($address_ip)
    {
        if (is_null($address_ip)) {
            throw new \InvalidArgumentException('non-nullable address_ip cannot be null');
        }
        $this->container['address_ip'] = $address_ip;

        return $this;
    }

    /**
     * Gets is_endpoint_callid
     *
     * @return bool|null
     */
    public function getIsEndpointCallid()
    {
        return $this->container['is_endpoint_callid'];
    }

    /**
     * Sets is_endpoint_callid
     *
     * @param bool|null $is_endpoint_callid is_endpoint_callid
     *
     * @return self
     */
    public function setIsEndpointCallid($is_endpoint_callid)
    {
        if (is_null($is_endpoint_callid)) {
            throw new \InvalidArgumentException('non-nullable is_endpoint_callid cannot be null');
        }
        $this->container['is_endpoint_callid'] = $is_endpoint_callid;

        return $this;
    }

    /**
     * Gets ndperror
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserVoicesGet200Response|null
     */
    public function getNdperror()
    {
        return $this->container['ndperror'];
    }

    /**
     * Sets ndperror
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserVoicesGet200Response|null $ndperror ndperror
     *
     * @return self
     */
    public function setNdperror($ndperror)
    {
        if (is_null($ndperror)) {
            array_push($this->openAPINullablesSetToNull, 'ndperror');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ndperror', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ndperror'] = $ndperror;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server server
     *
     * @return self
     */
    public function setServer($server)
    {
        if (is_null($server)) {
            throw new \InvalidArgumentException('non-nullable server cannot be null');
        }
        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets auth_user
     *
     * @return string|null
     */
    public function getAuthUser()
    {
        return $this->container['auth_user'];
    }

    /**
     * Sets auth_user
     *
     * @param string|null $auth_user auth_user
     *
     * @return self
     */
    public function setAuthUser($auth_user)
    {
        if (is_null($auth_user)) {
            throw new \InvalidArgumentException('non-nullable auth_user cannot be null');
        }
        $this->container['auth_user'] = $auth_user;

        return $this;
    }

    /**
     * Gets auth_pass
     *
     * @return string|null
     */
    public function getAuthPass()
    {
        return $this->container['auth_pass'];
    }

    /**
     * Sets auth_pass
     *
     * @param string|null $auth_pass auth_pass
     *
     * @return self
     */
    public function setAuthPass($auth_pass)
    {
        if (is_null($auth_pass)) {
            throw new \InvalidArgumentException('non-nullable auth_pass cannot be null');
        }
        $this->container['auth_pass'] = $auth_pass;

        return $this;
    }

    /**
     * Gets mac
     *
     * @return string|null
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string|null $mac mac
     *
     * @return self
     */
    public function setMac($mac)
    {
        if (is_null($mac)) {
            throw new \InvalidArgumentException('non-nullable mac cannot be null');
        }
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets overrides
     *
     * @return string|null
     */
    public function getOverrides()
    {
        return $this->container['overrides'];
    }

    /**
     * Sets overrides
     *
     * @param string|null $overrides overrides
     *
     * @return self
     */
    public function setOverrides($overrides)
    {
        if (is_null($overrides)) {
            throw new \InvalidArgumentException('non-nullable overrides cannot be null');
        }
        $this->container['overrides'] = $overrides;

        return $this;
    }

    /**
     * Gets transport
     *
     * @return string|null
     */
    public function getTransport()
    {
        return $this->container['transport'];
    }

    /**
     * Sets transport
     *
     * @param string|null $transport transport
     *
     * @return self
     */
    public function setTransport($transport)
    {
        if (is_null($transport)) {
            throw new \InvalidArgumentException('non-nullable transport cannot be null');
        }
        $this->container['transport'] = $transport;

        return $this;
    }

    /**
     * Gets line
     *
     * @return int|null
     */
    public function getLine()
    {
        return $this->container['line'];
    }

    /**
     * Sets line
     *
     * @param int|null $line line
     *
     * @return self
     */
    public function setLine($line)
    {
        if (is_null($line)) {
            throw new \InvalidArgumentException('non-nullable line cannot be null');
        }
        $this->container['line'] = $line;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


