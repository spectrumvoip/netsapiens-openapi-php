<?php
/**
 * UserLegacy
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * UserLegacy Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserLegacy implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserLegacy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'domain' => 'string',
        'user' => '\SpectrumVoip\\\\NetSapiens\Model\ConnectionExtraConnectionAddress',
        'first_name' => 'string',
        'last_name' => 'string',
        'subscriber_login' => 'string',
        'email' => 'string',
        'site' => 'string',
        'group' => 'string',
        'dir' => 'int',
        'message' => 'string',
        'vmail_provisioned' => 'string',
        'accept' => 'string',
        'reject' => 'string',
        'screen' => 'string',
        'no_answer_timeout' => 'int',
        'subscriber_pin' => 'int',
        'language' => 'string',
        'data_limit' => 'int',
        'call_limit' => 'int',
        'time_zone' => 'string',
        'dir_anc' => 'string',
        'directory_order' => 'int',
        'vmail_greeting' => 'string',
        'vmail_enabled' => 'string',
        'rcv_broadcast' => 'string',
        'rej_anony' => 'string',
        'vmail_annc_time' => 'string',
        'vmail_annc_cid' => 'string',
        'vmail_sort_lifo' => 'string',
        'vmail_fwd_to' => 'string',
        'vmail_notify' => 'string',
        'vmail_notify_enabled' => 'string',
        'ntfy_missed_call' => 'string',
        'ntfy_data_limit' => 'string',
        'dial_plan' => 'string',
        'dial_policy' => 'string',
        'callid_nmbr' => 'int',
        'callid_name' => 'string',
        'callid_emgr' => 'int',
        'area_code' => 'int',
        'presence' => 'string',
        'dir_list' => 'string',
        'date_created' => 'string',
        'srv_code' => 'string',
        'scope' => 'string',
        'last_update' => 'string',
        'gau_session' => 'int',
        'vmail_transcribe' => 'string',
        'address_id' => 'string',
        'hide_call_recordings' => 'string',
        'rmoh' => 'string',
        'moh_interval' => 'int',
        'account_status' => 'string',
        'sso_ids' => 'string[]',
        'mfa' => 'string[]',
        'pwd_hash' => 'string',
        'privacy' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'domain' => null,
        'user' => null,
        'first_name' => null,
        'last_name' => null,
        'subscriber_login' => null,
        'email' => null,
        'site' => null,
        'group' => null,
        'dir' => null,
        'message' => null,
        'vmail_provisioned' => null,
        'accept' => null,
        'reject' => null,
        'screen' => null,
        'no_answer_timeout' => null,
        'subscriber_pin' => null,
        'language' => null,
        'data_limit' => null,
        'call_limit' => null,
        'time_zone' => null,
        'dir_anc' => null,
        'directory_order' => null,
        'vmail_greeting' => null,
        'vmail_enabled' => null,
        'rcv_broadcast' => null,
        'rej_anony' => null,
        'vmail_annc_time' => null,
        'vmail_annc_cid' => null,
        'vmail_sort_lifo' => null,
        'vmail_fwd_to' => null,
        'vmail_notify' => null,
        'vmail_notify_enabled' => null,
        'ntfy_missed_call' => null,
        'ntfy_data_limit' => null,
        'dial_plan' => null,
        'dial_policy' => null,
        'callid_nmbr' => null,
        'callid_name' => null,
        'callid_emgr' => null,
        'area_code' => null,
        'presence' => null,
        'dir_list' => null,
        'date_created' => null,
        'srv_code' => null,
        'scope' => null,
        'last_update' => null,
        'gau_session' => null,
        'vmail_transcribe' => null,
        'address_id' => null,
        'hide_call_recordings' => null,
        'rmoh' => null,
        'moh_interval' => null,
        'account_status' => null,
        'sso_ids' => null,
        'mfa' => null,
        'pwd_hash' => null,
        'privacy' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'domain' => false,
        'user' => false,
        'first_name' => false,
        'last_name' => false,
        'subscriber_login' => false,
        'email' => false,
        'site' => false,
        'group' => false,
        'dir' => false,
        'message' => true,
        'vmail_provisioned' => false,
        'accept' => false,
        'reject' => false,
        'screen' => false,
        'no_answer_timeout' => false,
        'subscriber_pin' => false,
        'language' => false,
        'data_limit' => false,
        'call_limit' => false,
        'time_zone' => false,
        'dir_anc' => false,
        'directory_order' => false,
        'vmail_greeting' => false,
        'vmail_enabled' => false,
        'rcv_broadcast' => false,
        'rej_anony' => false,
        'vmail_annc_time' => false,
        'vmail_annc_cid' => false,
        'vmail_sort_lifo' => false,
        'vmail_fwd_to' => false,
        'vmail_notify' => false,
        'vmail_notify_enabled' => false,
        'ntfy_missed_call' => false,
        'ntfy_data_limit' => false,
        'dial_plan' => false,
        'dial_policy' => false,
        'callid_nmbr' => false,
        'callid_name' => false,
        'callid_emgr' => false,
        'area_code' => false,
        'presence' => false,
        'dir_list' => false,
        'date_created' => false,
        'srv_code' => false,
        'scope' => false,
        'last_update' => false,
        'gau_session' => false,
        'vmail_transcribe' => false,
        'address_id' => false,
        'hide_call_recordings' => false,
        'rmoh' => false,
        'moh_interval' => false,
        'account_status' => false,
        'sso_ids' => false,
        'mfa' => false,
        'pwd_hash' => false,
        'privacy' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
        'user' => 'user',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'subscriber_login' => 'subscriber_login',
        'email' => 'email',
        'site' => 'site',
        'group' => 'group',
        'dir' => 'dir',
        'message' => 'message',
        'vmail_provisioned' => 'vmail_provisioned',
        'accept' => 'accept',
        'reject' => 'reject',
        'screen' => 'screen',
        'no_answer_timeout' => 'no_answer_timeout',
        'subscriber_pin' => 'subscriber_pin',
        'language' => 'language',
        'data_limit' => 'data_limit',
        'call_limit' => 'call_limit',
        'time_zone' => 'time_zone',
        'dir_anc' => 'dir_anc',
        'directory_order' => 'directory_order',
        'vmail_greeting' => 'vmail_greeting',
        'vmail_enabled' => 'vmail_enabled',
        'rcv_broadcast' => 'rcv_broadcast',
        'rej_anony' => 'rej_anony',
        'vmail_annc_time' => 'vmail_annc_time',
        'vmail_annc_cid' => 'vmail_annc_cid',
        'vmail_sort_lifo' => 'vmail_sort_lifo',
        'vmail_fwd_to' => 'vmail_fwd_to',
        'vmail_notify' => 'vmail_notify',
        'vmail_notify_enabled' => 'vmail_notify_enabled',
        'ntfy_missed_call' => 'ntfy_missed_call',
        'ntfy_data_limit' => 'ntfy_data_limit',
        'dial_plan' => 'dial_plan',
        'dial_policy' => 'dial_policy',
        'callid_nmbr' => 'callid_nmbr',
        'callid_name' => 'callid_name',
        'callid_emgr' => 'callid_emgr',
        'area_code' => 'area_code',
        'presence' => 'presence',
        'dir_list' => 'dir_list',
        'date_created' => 'date_created',
        'srv_code' => 'srv_code',
        'scope' => 'scope',
        'last_update' => 'last_update',
        'gau_session' => 'gauSession',
        'vmail_transcribe' => 'vmail_transcribe',
        'address_id' => 'address_id',
        'hide_call_recordings' => 'hide_call_recordings',
        'rmoh' => 'rmoh',
        'moh_interval' => 'moh_interval',
        'account_status' => 'account_status',
        'sso_ids' => 'sso_ids',
        'mfa' => 'mfa',
        'pwd_hash' => 'pwd_hash',
        'privacy' => 'privacy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'user' => 'setUser',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'subscriber_login' => 'setSubscriberLogin',
        'email' => 'setEmail',
        'site' => 'setSite',
        'group' => 'setGroup',
        'dir' => 'setDir',
        'message' => 'setMessage',
        'vmail_provisioned' => 'setVmailProvisioned',
        'accept' => 'setAccept',
        'reject' => 'setReject',
        'screen' => 'setScreen',
        'no_answer_timeout' => 'setNoAnswerTimeout',
        'subscriber_pin' => 'setSubscriberPin',
        'language' => 'setLanguage',
        'data_limit' => 'setDataLimit',
        'call_limit' => 'setCallLimit',
        'time_zone' => 'setTimeZone',
        'dir_anc' => 'setDirAnc',
        'directory_order' => 'setDirectoryOrder',
        'vmail_greeting' => 'setVmailGreeting',
        'vmail_enabled' => 'setVmailEnabled',
        'rcv_broadcast' => 'setRcvBroadcast',
        'rej_anony' => 'setRejAnony',
        'vmail_annc_time' => 'setVmailAnncTime',
        'vmail_annc_cid' => 'setVmailAnncCid',
        'vmail_sort_lifo' => 'setVmailSortLifo',
        'vmail_fwd_to' => 'setVmailFwdTo',
        'vmail_notify' => 'setVmailNotify',
        'vmail_notify_enabled' => 'setVmailNotifyEnabled',
        'ntfy_missed_call' => 'setNtfyMissedCall',
        'ntfy_data_limit' => 'setNtfyDataLimit',
        'dial_plan' => 'setDialPlan',
        'dial_policy' => 'setDialPolicy',
        'callid_nmbr' => 'setCallidNmbr',
        'callid_name' => 'setCallidName',
        'callid_emgr' => 'setCallidEmgr',
        'area_code' => 'setAreaCode',
        'presence' => 'setPresence',
        'dir_list' => 'setDirList',
        'date_created' => 'setDateCreated',
        'srv_code' => 'setSrvCode',
        'scope' => 'setScope',
        'last_update' => 'setLastUpdate',
        'gau_session' => 'setGauSession',
        'vmail_transcribe' => 'setVmailTranscribe',
        'address_id' => 'setAddressId',
        'hide_call_recordings' => 'setHideCallRecordings',
        'rmoh' => 'setRmoh',
        'moh_interval' => 'setMohInterval',
        'account_status' => 'setAccountStatus',
        'sso_ids' => 'setSsoIds',
        'mfa' => 'setMfa',
        'pwd_hash' => 'setPwdHash',
        'privacy' => 'setPrivacy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'user' => 'getUser',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'subscriber_login' => 'getSubscriberLogin',
        'email' => 'getEmail',
        'site' => 'getSite',
        'group' => 'getGroup',
        'dir' => 'getDir',
        'message' => 'getMessage',
        'vmail_provisioned' => 'getVmailProvisioned',
        'accept' => 'getAccept',
        'reject' => 'getReject',
        'screen' => 'getScreen',
        'no_answer_timeout' => 'getNoAnswerTimeout',
        'subscriber_pin' => 'getSubscriberPin',
        'language' => 'getLanguage',
        'data_limit' => 'getDataLimit',
        'call_limit' => 'getCallLimit',
        'time_zone' => 'getTimeZone',
        'dir_anc' => 'getDirAnc',
        'directory_order' => 'getDirectoryOrder',
        'vmail_greeting' => 'getVmailGreeting',
        'vmail_enabled' => 'getVmailEnabled',
        'rcv_broadcast' => 'getRcvBroadcast',
        'rej_anony' => 'getRejAnony',
        'vmail_annc_time' => 'getVmailAnncTime',
        'vmail_annc_cid' => 'getVmailAnncCid',
        'vmail_sort_lifo' => 'getVmailSortLifo',
        'vmail_fwd_to' => 'getVmailFwdTo',
        'vmail_notify' => 'getVmailNotify',
        'vmail_notify_enabled' => 'getVmailNotifyEnabled',
        'ntfy_missed_call' => 'getNtfyMissedCall',
        'ntfy_data_limit' => 'getNtfyDataLimit',
        'dial_plan' => 'getDialPlan',
        'dial_policy' => 'getDialPolicy',
        'callid_nmbr' => 'getCallidNmbr',
        'callid_name' => 'getCallidName',
        'callid_emgr' => 'getCallidEmgr',
        'area_code' => 'getAreaCode',
        'presence' => 'getPresence',
        'dir_list' => 'getDirList',
        'date_created' => 'getDateCreated',
        'srv_code' => 'getSrvCode',
        'scope' => 'getScope',
        'last_update' => 'getLastUpdate',
        'gau_session' => 'getGauSession',
        'vmail_transcribe' => 'getVmailTranscribe',
        'address_id' => 'getAddressId',
        'hide_call_recordings' => 'getHideCallRecordings',
        'rmoh' => 'getRmoh',
        'moh_interval' => 'getMohInterval',
        'account_status' => 'getAccountStatus',
        'sso_ids' => 'getSsoIds',
        'mfa' => 'getMfa',
        'pwd_hash' => 'getPwdHash',
        'privacy' => 'getPrivacy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TIME_ZONE_US_ALASKA = 'US/Alaska';
    public const TIME_ZONE_US_CENTRAL = 'US/Central';
    public const TIME_ZONE_US_EASTERN = 'US/Eastern';
    public const TIME_ZONE_US_HAWAII = 'US/Hawaii';
    public const TIME_ZONE_US_MOUNTAIN = 'US/Mountain';
    public const TIME_ZONE_US_PACIFIC = 'US/Pacific';
    public const TIME_ZONE_AFRICA_ADDIS_ABABA = 'Africa/Addis_Ababa';
    public const TIME_ZONE_AFRICA_ALGIERS = 'Africa/Algiers';
    public const TIME_ZONE_AFRICA_BRAZZAVILLE = 'Africa/Brazzaville';
    public const TIME_ZONE_AFRICA_CAIRO = 'Africa/Cairo';
    public const TIME_ZONE_AFRICA_CASABLANCA = 'Africa/Casablanca';
    public const TIME_ZONE_AFRICA_DAKAR = 'Africa/Dakar';
    public const TIME_ZONE_AFRICA_DAR_ES_SALAAM = 'Africa/Dar_es_Salaam';
    public const TIME_ZONE_AFRICA_DJIBOUTI = 'Africa/Djibouti';
    public const TIME_ZONE_AFRICA_JOHANNESBURG = 'Africa/Johannesburg';
    public const TIME_ZONE_AFRICA_KHARTOUM = 'Africa/Khartoum';
    public const TIME_ZONE_AFRICA_KIGALI = 'Africa/Kigali';
    public const TIME_ZONE_AFRICA_KINSHASA = 'Africa/Kinshasa';
    public const TIME_ZONE_AFRICA_LAGOS = 'Africa/Lagos';
    public const TIME_ZONE_AFRICA_NAIROBI = 'Africa/Nairobi';
    public const TIME_ZONE_AFRICA_TIMBUKTU = 'Africa/Timbuktu';
    public const TIME_ZONE_AFRICA_TRIPOLI = 'Africa/Tripoli';
    public const TIME_ZONE_AFRICA_TUNIS = 'Africa/Tunis';
    public const TIME_ZONE_AMERICA_ANTIGUA = 'America/Antigua';
    public const TIME_ZONE_AMERICA_ARUBA = 'America/Aruba';
    public const TIME_ZONE_AMERICA_BELIZE = 'America/Belize';
    public const TIME_ZONE_AMERICA_BOGOTA = 'America/Bogota';
    public const TIME_ZONE_AMERICA_BUENOS_AIRES = 'America/Buenos_Aires';
    public const TIME_ZONE_AMERICA_CANCUN = 'America/Cancun';
    public const TIME_ZONE_AMERICA_CARACAS = 'America/Caracas';
    public const TIME_ZONE_AMERICA_CAYMAN = 'America/Cayman';
    public const TIME_ZONE_AMERICA_CHIHUAHUA = 'America/Chihuahua';
    public const TIME_ZONE_AMERICA_COSTA_RICA = 'America/Costa_Rica';
    public const TIME_ZONE_AMERICA_DENVER = 'America/Denver';
    public const TIME_ZONE_AMERICA_DETROIT = 'America/Detroit';
    public const TIME_ZONE_AMERICA_EDMONTON = 'America/Edmonton';
    public const TIME_ZONE_AMERICA_EL_SALVADOR = 'America/El_Salvador';
    public const TIME_ZONE_AMERICA_ENSENADA = 'America/Ensenada';
    public const TIME_ZONE_AMERICA_GRENADA = 'America/Grenada';
    public const TIME_ZONE_AMERICA_GUADELOUPE = 'America/Guadeloupe';
    public const TIME_ZONE_AMERICA_GUATEMALA = 'America/Guatemala';
    public const TIME_ZONE_AMERICA_HAVANA = 'America/Havana';
    public const TIME_ZONE_AMERICA_INDIANAPOLIS = 'America/Indianapolis';
    public const TIME_ZONE_AMERICA_JAMAICA = 'America/Jamaica';
    public const TIME_ZONE_AMERICA_JUNEAU = 'America/Juneau';
    public const TIME_ZONE_AMERICA_LA_PAZ = 'America/La_Paz';
    public const TIME_ZONE_AMERICA_LIMA = 'America/Lima';
    public const TIME_ZONE_AMERICA_LOS_ANGELES = 'America/Los_Angeles';
    public const TIME_ZONE_AMERICA_LOUISVILLE = 'America/Louisville';
    public const TIME_ZONE_AMERICA_MARTINIQUE = 'America/Martinique';
    public const TIME_ZONE_AMERICA_MAZATLAN = 'America/Mazatlan';
    public const TIME_ZONE_AMERICA_MENDOZA = 'America/Mendoza';
    public const TIME_ZONE_AMERICA_MENOMINEE = 'America/Menominee';
    public const TIME_ZONE_AMERICA_MERIDA = 'America/Merida';
    public const TIME_ZONE_AMERICA_MEXICO_CITY = 'America/Mexico_City';
    public const TIME_ZONE_AMERICA_MIQUELON = 'America/Miquelon';
    public const TIME_ZONE_AMERICA_MONCTON = 'America/Moncton';
    public const TIME_ZONE_AMERICA_MONTERREY = 'America/Monterrey';
    public const TIME_ZONE_AMERICA_MONTEVIDEO = 'America/Montevideo';
    public const TIME_ZONE_AMERICA_MONTREAL = 'America/Montreal';
    public const TIME_ZONE_AMERICA_MONTSERRAT = 'America/Montserrat';
    public const TIME_ZONE_AMERICA_NASSAU = 'America/Nassau';
    public const TIME_ZONE_AMERICA_NEW_YORK = 'America/New_York';
    public const TIME_ZONE_AMERICA_PANAMA = 'America/Panama';
    public const TIME_ZONE_AMERICA_PHOENIX = 'America/Phoenix';
    public const TIME_ZONE_AMERICA_PORT_AU_PRINCE = 'America/Port-au-Prince';
    public const TIME_ZONE_AMERICA_PORT_OF_SPAIN = 'America/Port_of_Spain';
    public const TIME_ZONE_AMERICA_REGINA = 'America/Regina';
    public const TIME_ZONE_AMERICA_SANTIAGO = 'America/Santiago';
    public const TIME_ZONE_AMERICA_SANTO_DOMINGO = 'America/Santo_Domingo';
    public const TIME_ZONE_AMERICA_SAO_PAULO = 'America/Sao_Paulo';
    public const TIME_ZONE_AMERICA_THULE = 'America/Thule';
    public const TIME_ZONE_AMERICA_THUNDER_BAY = 'America/Thunder_Bay';
    public const TIME_ZONE_AMERICA_TIJUANA = 'America/Tijuana';
    public const TIME_ZONE_AMERICA_TORONTO = 'America/Toronto';
    public const TIME_ZONE_AMERICA_VANCOUVER = 'America/Vancouver';
    public const TIME_ZONE_AMERICA_WINNIPEG = 'America/Winnipeg';
    public const TIME_ZONE_AMERICA_YELLOWKNIFE = 'America/Yellowknife';
    public const TIME_ZONE_ANTARCTICA_SOUTH_POLE = 'Antarctica/South_Pole';
    public const TIME_ZONE_ARCTIC_LONGYEARBYEN = 'Arctic/Longyearbyen';
    public const TIME_ZONE_ASIA_AMMAN = 'Asia/Amman';
    public const TIME_ZONE_ASIA_BAGHDAD = 'Asia/Baghdad';
    public const TIME_ZONE_ASIA_BAHRAIN = 'Asia/Bahrain';
    public const TIME_ZONE_ASIA_BANGKOK = 'Asia/Bangkok';
    public const TIME_ZONE_ASIA_BEIRUT = 'Asia/Beirut';
    public const TIME_ZONE_ASIA_BRUNEI = 'Asia/Brunei';
    public const TIME_ZONE_ASIA_CALCUTTA = 'Asia/Calcutta';
    public const TIME_ZONE_ASIA_COLOMBO = 'Asia/Colombo';
    public const TIME_ZONE_ASIA_DACCA = 'Asia/Dacca';
    public const TIME_ZONE_ASIA_DAMASCUS = 'Asia/Damascus';
    public const TIME_ZONE_ASIA_DHAKA = 'Asia/Dhaka';
    public const TIME_ZONE_ASIA_DUBAI = 'Asia/Dubai';
    public const TIME_ZONE_ASIA_GAZA = 'Asia/Gaza';
    public const TIME_ZONE_ASIA_HONG_KONG = 'Asia/Hong_Kong';
    public const TIME_ZONE_ASIA_ISTANBUL = 'Asia/Istanbul';
    public const TIME_ZONE_ASIA_JAKARTA = 'Asia/Jakarta';
    public const TIME_ZONE_ASIA_JERUSALEM = 'Asia/Jerusalem';
    public const TIME_ZONE_ASIA_KABUL = 'Asia/Kabul';
    public const TIME_ZONE_ASIA_KATMANDU = 'Asia/Katmandu';
    public const TIME_ZONE_ASIA_KUALA_LUMPUR = 'Asia/Kuala_Lumpur';
    public const TIME_ZONE_ASIA_KUCHING = 'Asia/Kuching';
    public const TIME_ZONE_ASIA_KUWAIT = 'Asia/Kuwait';
    public const TIME_ZONE_ASIA_MACAU = 'Asia/Macau';
    public const TIME_ZONE_ASIA_MANILA = 'Asia/Manila';
    public const TIME_ZONE_ASIA_MUSCAT = 'Asia/Muscat';
    public const TIME_ZONE_ASIA_PHNOM_PENH = 'Asia/Phnom_Penh';
    public const TIME_ZONE_ASIA_RANGOON = 'Asia/Rangoon';
    public const TIME_ZONE_ASIA_RIYADH = 'Asia/Riyadh';
    public const TIME_ZONE_ASIA_SAIGON = 'Asia/Saigon';
    public const TIME_ZONE_ASIA_SEOUL = 'Asia/Seoul';
    public const TIME_ZONE_ASIA_SHANGHAI = 'Asia/Shanghai';
    public const TIME_ZONE_ASIA_SINGAPORE = 'Asia/Singapore';
    public const TIME_ZONE_ASIA_TAIPEI = 'Asia/Taipei';
    public const TIME_ZONE_ASIA_TEHRAN = 'Asia/Tehran';
    public const TIME_ZONE_ASIA_TEL_AVIV = 'Asia/Tel_Aviv';
    public const TIME_ZONE_ASIA_THIMPHU = 'Asia/Thimphu';
    public const TIME_ZONE_ASIA_TOKYO = 'Asia/Tokyo';
    public const TIME_ZONE_ASIA_ULAN_BATOR = 'Asia/Ulan_Bator';
    public const TIME_ZONE_ASIA_VIENTIANE = 'Asia/Vientiane';
    public const TIME_ZONE_ASIA_VLADIVOSTOK = 'Asia/Vladivostok';
    public const TIME_ZONE_ATLANTIC_AZORES = 'Atlantic/Azores';
    public const TIME_ZONE_ATLANTIC_BERMUDA = 'Atlantic/Bermuda';
    public const TIME_ZONE_ATLANTIC_CANARY = 'Atlantic/Canary';
    public const TIME_ZONE_ATLANTIC_CAPE_VERDE = 'Atlantic/Cape_Verde';
    public const TIME_ZONE_ATLANTIC_FAEROE = 'Atlantic/Faeroe';
    public const TIME_ZONE_ATLANTIC_REYKJAVIK = 'Atlantic/Reykjavik';
    public const TIME_ZONE_AUSTRALIA_ACT = 'Australia/ACT';
    public const TIME_ZONE_AUSTRALIA_ADELAIDE = 'Australia/Adelaide';
    public const TIME_ZONE_AUSTRALIA_BRISBANE = 'Australia/Brisbane';
    public const TIME_ZONE_AUSTRALIA_CANBERRA = 'Australia/Canberra';
    public const TIME_ZONE_AUSTRALIA_DARWIN = 'Australia/Darwin';
    public const TIME_ZONE_AUSTRALIA_LHI = 'Australia/LHI';
    public const TIME_ZONE_AUSTRALIA_MELBOURNE = 'Australia/Melbourne';
    public const TIME_ZONE_AUSTRALIA_NORTH = 'Australia/North';
    public const TIME_ZONE_AUSTRALIA_NSW = 'Australia/NSW';
    public const TIME_ZONE_AUSTRALIA_PERTH = 'Australia/Perth';
    public const TIME_ZONE_AUSTRALIA_QUEENSLAND = 'Australia/Queensland';
    public const TIME_ZONE_AUSTRALIA_SOUTH = 'Australia/South';
    public const TIME_ZONE_AUSTRALIA_SYDNEY = 'Australia/Sydney';
    public const TIME_ZONE_AUSTRALIA_TASMANIA = 'Australia/Tasmania';
    public const TIME_ZONE_AUSTRALIA_VICTORIA = 'Australia/Victoria';
    public const TIME_ZONE_AUSTRALIA_WEST = 'Australia/West';
    public const TIME_ZONE_CANADA_ATLANTIC = 'Canada/Atlantic';
    public const TIME_ZONE_CANADA_CENTRAL = 'Canada/Central';
    public const TIME_ZONE_CANADA_EASTERN = 'Canada/Eastern';
    public const TIME_ZONE_CANADA_MOUNTAIN = 'Canada/Mountain';
    public const TIME_ZONE_CANADA_NEWFOUNDLAND = 'Canada/Newfoundland';
    public const TIME_ZONE_CANADA_PACIFIC = 'Canada/Pacific';
    public const TIME_ZONE_CANADA_SASKATCHEWAN = 'Canada/Saskatchewan';
    public const TIME_ZONE_CANADA_YUKON = 'Canada/Yukon';
    public const TIME_ZONE_CUBA = 'Cuba';
    public const TIME_ZONE_ETC_GMT = 'Etc/GMT';
    public const TIME_ZONE_ETC_GMT1 = 'Etc/GMT+1';
    public const TIME_ZONE_ETC_GMT10 = 'Etc/GMT+10';
    public const TIME_ZONE_ETC_GMT11 = 'Etc/GMT+11';
    public const TIME_ZONE_ETC_GMT12 = 'Etc/GMT+12';
    public const TIME_ZONE_ETC_GMT2 = 'Etc/GMT+2';
    public const TIME_ZONE_ETC_GMT3 = 'Etc/GMT+3';
    public const TIME_ZONE_ETC_GMT4 = 'Etc/GMT+4';
    public const TIME_ZONE_ETC_GMT5 = 'Etc/GMT+5';
    public const TIME_ZONE_ETC_GMT6 = 'Etc/GMT+6';
    public const TIME_ZONE_ETC_GMT7 = 'Etc/GMT+7';
    public const TIME_ZONE_ETC_GMT8 = 'Etc/GMT+8';
    public const TIME_ZONE_ETC_GMT9 = 'Etc/GMT+9';
    public const TIME_ZONE_ETC_GMT_1 = 'Etc/GMT-1';
    public const TIME_ZONE_ETC_GMT_10 = 'Etc/GMT-10';
    public const TIME_ZONE_ETC_GMT_11 = 'Etc/GMT-11';
    public const TIME_ZONE_ETC_GMT_12 = 'Etc/GMT-12';
    public const TIME_ZONE_ETC_GMT_13 = 'Etc/GMT-13';
    public const TIME_ZONE_ETC_GMT_14 = 'Etc/GMT-14';
    public const TIME_ZONE_ETC_GMT_2 = 'Etc/GMT-2';
    public const TIME_ZONE_ETC_GMT_3 = 'Etc/GMT-3';
    public const TIME_ZONE_ETC_GMT_4 = 'Etc/GMT-4';
    public const TIME_ZONE_ETC_GMT_5 = 'Etc/GMT-5';
    public const TIME_ZONE_ETC_GMT_6 = 'Etc/GMT-6';
    public const TIME_ZONE_ETC_GMT_7 = 'Etc/GMT-7';
    public const TIME_ZONE_ETC_GMT_8 = 'Etc/GMT-8';
    public const TIME_ZONE_ETC_GMT_9 = 'Etc/GMT-9';
    public const TIME_ZONE_ETC_GREENWICH = 'Etc/Greenwich';
    public const TIME_ZONE_EUROPE_AMSTERDAM = 'Europe/Amsterdam';
    public const TIME_ZONE_EUROPE_ATHENS = 'Europe/Athens';
    public const TIME_ZONE_EUROPE_BELFAST = 'Europe/Belfast';
    public const TIME_ZONE_EUROPE_BELGRADE = 'Europe/Belgrade';
    public const TIME_ZONE_EUROPE_BERLIN = 'Europe/Berlin';
    public const TIME_ZONE_EUROPE_BRUSSELS = 'Europe/Brussels';
    public const TIME_ZONE_EUROPE_BUCHAREST = 'Europe/Bucharest';
    public const TIME_ZONE_EUROPE_BUDAPEST = 'Europe/Budapest';
    public const TIME_ZONE_EUROPE_COPENHAGEN = 'Europe/Copenhagen';
    public const TIME_ZONE_EUROPE_DUBLIN = 'Europe/Dublin';
    public const TIME_ZONE_EUROPE_HELSINKI = 'Europe/Helsinki';
    public const TIME_ZONE_EUROPE_ISTANBUL = 'Europe/Istanbul';
    public const TIME_ZONE_EUROPE_KIEV = 'Europe/Kiev';
    public const TIME_ZONE_EUROPE_LISBON = 'Europe/Lisbon';
    public const TIME_ZONE_EUROPE_LJUBLJANA = 'Europe/Ljubljana';
    public const TIME_ZONE_EUROPE_LONDON = 'Europe/London';
    public const TIME_ZONE_EUROPE_MADRID = 'Europe/Madrid';
    public const TIME_ZONE_EUROPE_MALTA = 'Europe/Malta';
    public const TIME_ZONE_EUROPE_MONACO = 'Europe/Monaco';
    public const TIME_ZONE_EUROPE_MOSCOW = 'Europe/Moscow';
    public const TIME_ZONE_EUROPE_OSLO = 'Europe/Oslo';
    public const TIME_ZONE_EUROPE_PARIS = 'Europe/Paris';
    public const TIME_ZONE_EUROPE_PRAGUE = 'Europe/Prague';
    public const TIME_ZONE_EUROPE_ROME = 'Europe/Rome';
    public const TIME_ZONE_EUROPE_SOFIA = 'Europe/Sofia';
    public const TIME_ZONE_EUROPE_STOCKHOLM = 'Europe/Stockholm';
    public const TIME_ZONE_EUROPE_VIENNA = 'Europe/Vienna';
    public const TIME_ZONE_EUROPE_WARSAW = 'Europe/Warsaw';
    public const TIME_ZONE_EUROPE_ZURICH = 'Europe/Zurich';
    public const TIME_ZONE_GREENWICH = 'Greenwich';
    public const TIME_ZONE_PACIFIC_AUCKLAND = 'Pacific/Auckland';
    public const TIME_ZONE_PACIFIC_EASTER = 'Pacific/Easter';
    public const TIME_ZONE_PACIFIC_FIJI = 'Pacific/Fiji';
    public const TIME_ZONE_PACIFIC_GALAPAGOS = 'Pacific/Galapagos';
    public const TIME_ZONE_PACIFIC_GAMBIER = 'Pacific/Gambier';
    public const TIME_ZONE_PACIFIC_GUAM = 'Pacific/Guam';
    public const TIME_ZONE_PACIFIC_HONOLULU = 'Pacific/Honolulu';
    public const TIME_ZONE_PACIFIC_MARQUESAS = 'Pacific/Marquesas';
    public const TIME_ZONE_PACIFIC_MIDWAY = 'Pacific/Midway';
    public const TIME_ZONE_PACIFIC_PALAU = 'Pacific/Palau';
    public const TIME_ZONE_PACIFIC_RAROTONGA = 'Pacific/Rarotonga';
    public const TIME_ZONE_PACIFIC_TAHITI = 'Pacific/Tahiti';
    public const PRIVACY_YES = 'yes';
    public const PRIVACY_NO = 'no';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimeZoneAllowableValues()
    {
        return [
            self::TIME_ZONE_US_ALASKA,
            self::TIME_ZONE_US_CENTRAL,
            self::TIME_ZONE_US_EASTERN,
            self::TIME_ZONE_US_HAWAII,
            self::TIME_ZONE_US_MOUNTAIN,
            self::TIME_ZONE_US_PACIFIC,
            self::TIME_ZONE_AFRICA_ADDIS_ABABA,
            self::TIME_ZONE_AFRICA_ALGIERS,
            self::TIME_ZONE_AFRICA_BRAZZAVILLE,
            self::TIME_ZONE_AFRICA_CAIRO,
            self::TIME_ZONE_AFRICA_CASABLANCA,
            self::TIME_ZONE_AFRICA_DAKAR,
            self::TIME_ZONE_AFRICA_DAR_ES_SALAAM,
            self::TIME_ZONE_AFRICA_DJIBOUTI,
            self::TIME_ZONE_AFRICA_JOHANNESBURG,
            self::TIME_ZONE_AFRICA_KHARTOUM,
            self::TIME_ZONE_AFRICA_KIGALI,
            self::TIME_ZONE_AFRICA_KINSHASA,
            self::TIME_ZONE_AFRICA_LAGOS,
            self::TIME_ZONE_AFRICA_NAIROBI,
            self::TIME_ZONE_AFRICA_TIMBUKTU,
            self::TIME_ZONE_AFRICA_TRIPOLI,
            self::TIME_ZONE_AFRICA_TUNIS,
            self::TIME_ZONE_AMERICA_ANTIGUA,
            self::TIME_ZONE_AMERICA_ARUBA,
            self::TIME_ZONE_AMERICA_BELIZE,
            self::TIME_ZONE_AMERICA_BOGOTA,
            self::TIME_ZONE_AMERICA_BUENOS_AIRES,
            self::TIME_ZONE_AMERICA_CANCUN,
            self::TIME_ZONE_AMERICA_CARACAS,
            self::TIME_ZONE_AMERICA_CAYMAN,
            self::TIME_ZONE_AMERICA_CHIHUAHUA,
            self::TIME_ZONE_AMERICA_COSTA_RICA,
            self::TIME_ZONE_AMERICA_DENVER,
            self::TIME_ZONE_AMERICA_DETROIT,
            self::TIME_ZONE_AMERICA_EDMONTON,
            self::TIME_ZONE_AMERICA_EL_SALVADOR,
            self::TIME_ZONE_AMERICA_ENSENADA,
            self::TIME_ZONE_AMERICA_GRENADA,
            self::TIME_ZONE_AMERICA_GUADELOUPE,
            self::TIME_ZONE_AMERICA_GUATEMALA,
            self::TIME_ZONE_AMERICA_HAVANA,
            self::TIME_ZONE_AMERICA_INDIANAPOLIS,
            self::TIME_ZONE_AMERICA_JAMAICA,
            self::TIME_ZONE_AMERICA_JUNEAU,
            self::TIME_ZONE_AMERICA_LA_PAZ,
            self::TIME_ZONE_AMERICA_LIMA,
            self::TIME_ZONE_AMERICA_LOS_ANGELES,
            self::TIME_ZONE_AMERICA_LOUISVILLE,
            self::TIME_ZONE_AMERICA_MARTINIQUE,
            self::TIME_ZONE_AMERICA_MAZATLAN,
            self::TIME_ZONE_AMERICA_MENDOZA,
            self::TIME_ZONE_AMERICA_MENOMINEE,
            self::TIME_ZONE_AMERICA_MERIDA,
            self::TIME_ZONE_AMERICA_MEXICO_CITY,
            self::TIME_ZONE_AMERICA_MIQUELON,
            self::TIME_ZONE_AMERICA_MONCTON,
            self::TIME_ZONE_AMERICA_MONTERREY,
            self::TIME_ZONE_AMERICA_MONTEVIDEO,
            self::TIME_ZONE_AMERICA_MONTREAL,
            self::TIME_ZONE_AMERICA_MONTSERRAT,
            self::TIME_ZONE_AMERICA_NASSAU,
            self::TIME_ZONE_AMERICA_NEW_YORK,
            self::TIME_ZONE_AMERICA_PANAMA,
            self::TIME_ZONE_AMERICA_PHOENIX,
            self::TIME_ZONE_AMERICA_PORT_AU_PRINCE,
            self::TIME_ZONE_AMERICA_PORT_OF_SPAIN,
            self::TIME_ZONE_AMERICA_REGINA,
            self::TIME_ZONE_AMERICA_SANTIAGO,
            self::TIME_ZONE_AMERICA_SANTO_DOMINGO,
            self::TIME_ZONE_AMERICA_SAO_PAULO,
            self::TIME_ZONE_AMERICA_THULE,
            self::TIME_ZONE_AMERICA_THUNDER_BAY,
            self::TIME_ZONE_AMERICA_TIJUANA,
            self::TIME_ZONE_AMERICA_TORONTO,
            self::TIME_ZONE_AMERICA_VANCOUVER,
            self::TIME_ZONE_AMERICA_WINNIPEG,
            self::TIME_ZONE_AMERICA_YELLOWKNIFE,
            self::TIME_ZONE_ANTARCTICA_SOUTH_POLE,
            self::TIME_ZONE_ARCTIC_LONGYEARBYEN,
            self::TIME_ZONE_ASIA_AMMAN,
            self::TIME_ZONE_ASIA_BAGHDAD,
            self::TIME_ZONE_ASIA_BAHRAIN,
            self::TIME_ZONE_ASIA_BANGKOK,
            self::TIME_ZONE_ASIA_BEIRUT,
            self::TIME_ZONE_ASIA_BRUNEI,
            self::TIME_ZONE_ASIA_CALCUTTA,
            self::TIME_ZONE_ASIA_COLOMBO,
            self::TIME_ZONE_ASIA_DACCA,
            self::TIME_ZONE_ASIA_DAMASCUS,
            self::TIME_ZONE_ASIA_DHAKA,
            self::TIME_ZONE_ASIA_DUBAI,
            self::TIME_ZONE_ASIA_GAZA,
            self::TIME_ZONE_ASIA_HONG_KONG,
            self::TIME_ZONE_ASIA_ISTANBUL,
            self::TIME_ZONE_ASIA_JAKARTA,
            self::TIME_ZONE_ASIA_JERUSALEM,
            self::TIME_ZONE_ASIA_KABUL,
            self::TIME_ZONE_ASIA_KATMANDU,
            self::TIME_ZONE_ASIA_KUALA_LUMPUR,
            self::TIME_ZONE_ASIA_KUCHING,
            self::TIME_ZONE_ASIA_KUWAIT,
            self::TIME_ZONE_ASIA_MACAU,
            self::TIME_ZONE_ASIA_MANILA,
            self::TIME_ZONE_ASIA_MUSCAT,
            self::TIME_ZONE_ASIA_PHNOM_PENH,
            self::TIME_ZONE_ASIA_RANGOON,
            self::TIME_ZONE_ASIA_RIYADH,
            self::TIME_ZONE_ASIA_SAIGON,
            self::TIME_ZONE_ASIA_SEOUL,
            self::TIME_ZONE_ASIA_SHANGHAI,
            self::TIME_ZONE_ASIA_SINGAPORE,
            self::TIME_ZONE_ASIA_TAIPEI,
            self::TIME_ZONE_ASIA_TEHRAN,
            self::TIME_ZONE_ASIA_TEL_AVIV,
            self::TIME_ZONE_ASIA_THIMPHU,
            self::TIME_ZONE_ASIA_TOKYO,
            self::TIME_ZONE_ASIA_ULAN_BATOR,
            self::TIME_ZONE_ASIA_VIENTIANE,
            self::TIME_ZONE_ASIA_VLADIVOSTOK,
            self::TIME_ZONE_ATLANTIC_AZORES,
            self::TIME_ZONE_ATLANTIC_BERMUDA,
            self::TIME_ZONE_ATLANTIC_CANARY,
            self::TIME_ZONE_ATLANTIC_CAPE_VERDE,
            self::TIME_ZONE_ATLANTIC_FAEROE,
            self::TIME_ZONE_ATLANTIC_REYKJAVIK,
            self::TIME_ZONE_AUSTRALIA_ACT,
            self::TIME_ZONE_AUSTRALIA_ADELAIDE,
            self::TIME_ZONE_AUSTRALIA_BRISBANE,
            self::TIME_ZONE_AUSTRALIA_CANBERRA,
            self::TIME_ZONE_AUSTRALIA_DARWIN,
            self::TIME_ZONE_AUSTRALIA_LHI,
            self::TIME_ZONE_AUSTRALIA_MELBOURNE,
            self::TIME_ZONE_AUSTRALIA_NORTH,
            self::TIME_ZONE_AUSTRALIA_NSW,
            self::TIME_ZONE_AUSTRALIA_PERTH,
            self::TIME_ZONE_AUSTRALIA_QUEENSLAND,
            self::TIME_ZONE_AUSTRALIA_SOUTH,
            self::TIME_ZONE_AUSTRALIA_SYDNEY,
            self::TIME_ZONE_AUSTRALIA_TASMANIA,
            self::TIME_ZONE_AUSTRALIA_VICTORIA,
            self::TIME_ZONE_AUSTRALIA_WEST,
            self::TIME_ZONE_CANADA_ATLANTIC,
            self::TIME_ZONE_CANADA_CENTRAL,
            self::TIME_ZONE_CANADA_EASTERN,
            self::TIME_ZONE_CANADA_MOUNTAIN,
            self::TIME_ZONE_CANADA_NEWFOUNDLAND,
            self::TIME_ZONE_CANADA_PACIFIC,
            self::TIME_ZONE_CANADA_SASKATCHEWAN,
            self::TIME_ZONE_CANADA_YUKON,
            self::TIME_ZONE_CUBA,
            self::TIME_ZONE_ETC_GMT,
            self::TIME_ZONE_ETC_GMT1,
            self::TIME_ZONE_ETC_GMT10,
            self::TIME_ZONE_ETC_GMT11,
            self::TIME_ZONE_ETC_GMT12,
            self::TIME_ZONE_ETC_GMT2,
            self::TIME_ZONE_ETC_GMT3,
            self::TIME_ZONE_ETC_GMT4,
            self::TIME_ZONE_ETC_GMT5,
            self::TIME_ZONE_ETC_GMT6,
            self::TIME_ZONE_ETC_GMT7,
            self::TIME_ZONE_ETC_GMT8,
            self::TIME_ZONE_ETC_GMT9,
            self::TIME_ZONE_ETC_GMT_1,
            self::TIME_ZONE_ETC_GMT_10,
            self::TIME_ZONE_ETC_GMT_11,
            self::TIME_ZONE_ETC_GMT_12,
            self::TIME_ZONE_ETC_GMT_13,
            self::TIME_ZONE_ETC_GMT_14,
            self::TIME_ZONE_ETC_GMT_2,
            self::TIME_ZONE_ETC_GMT_3,
            self::TIME_ZONE_ETC_GMT_4,
            self::TIME_ZONE_ETC_GMT_5,
            self::TIME_ZONE_ETC_GMT_6,
            self::TIME_ZONE_ETC_GMT_7,
            self::TIME_ZONE_ETC_GMT_8,
            self::TIME_ZONE_ETC_GMT_9,
            self::TIME_ZONE_ETC_GREENWICH,
            self::TIME_ZONE_EUROPE_AMSTERDAM,
            self::TIME_ZONE_EUROPE_ATHENS,
            self::TIME_ZONE_EUROPE_BELFAST,
            self::TIME_ZONE_EUROPE_BELGRADE,
            self::TIME_ZONE_EUROPE_BERLIN,
            self::TIME_ZONE_EUROPE_BRUSSELS,
            self::TIME_ZONE_EUROPE_BUCHAREST,
            self::TIME_ZONE_EUROPE_BUDAPEST,
            self::TIME_ZONE_EUROPE_COPENHAGEN,
            self::TIME_ZONE_EUROPE_DUBLIN,
            self::TIME_ZONE_EUROPE_HELSINKI,
            self::TIME_ZONE_EUROPE_ISTANBUL,
            self::TIME_ZONE_EUROPE_KIEV,
            self::TIME_ZONE_EUROPE_LISBON,
            self::TIME_ZONE_EUROPE_LJUBLJANA,
            self::TIME_ZONE_EUROPE_LONDON,
            self::TIME_ZONE_EUROPE_MADRID,
            self::TIME_ZONE_EUROPE_MALTA,
            self::TIME_ZONE_EUROPE_MONACO,
            self::TIME_ZONE_EUROPE_MOSCOW,
            self::TIME_ZONE_EUROPE_OSLO,
            self::TIME_ZONE_EUROPE_PARIS,
            self::TIME_ZONE_EUROPE_PRAGUE,
            self::TIME_ZONE_EUROPE_ROME,
            self::TIME_ZONE_EUROPE_SOFIA,
            self::TIME_ZONE_EUROPE_STOCKHOLM,
            self::TIME_ZONE_EUROPE_VIENNA,
            self::TIME_ZONE_EUROPE_WARSAW,
            self::TIME_ZONE_EUROPE_ZURICH,
            self::TIME_ZONE_GREENWICH,
            self::TIME_ZONE_PACIFIC_AUCKLAND,
            self::TIME_ZONE_PACIFIC_EASTER,
            self::TIME_ZONE_PACIFIC_FIJI,
            self::TIME_ZONE_PACIFIC_GALAPAGOS,
            self::TIME_ZONE_PACIFIC_GAMBIER,
            self::TIME_ZONE_PACIFIC_GUAM,
            self::TIME_ZONE_PACIFIC_HONOLULU,
            self::TIME_ZONE_PACIFIC_MARQUESAS,
            self::TIME_ZONE_PACIFIC_MIDWAY,
            self::TIME_ZONE_PACIFIC_PALAU,
            self::TIME_ZONE_PACIFIC_RAROTONGA,
            self::TIME_ZONE_PACIFIC_TAHITI,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrivacyAllowableValues()
    {
        return [
            self::PRIVACY_YES,
            self::PRIVACY_NO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('subscriber_login', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('site', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('dir', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('vmail_provisioned', $data ?? [], null);
        $this->setIfExists('accept', $data ?? [], null);
        $this->setIfExists('reject', $data ?? [], null);
        $this->setIfExists('screen', $data ?? [], null);
        $this->setIfExists('no_answer_timeout', $data ?? [], null);
        $this->setIfExists('subscriber_pin', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('data_limit', $data ?? [], null);
        $this->setIfExists('call_limit', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('dir_anc', $data ?? [], null);
        $this->setIfExists('directory_order', $data ?? [], null);
        $this->setIfExists('vmail_greeting', $data ?? [], null);
        $this->setIfExists('vmail_enabled', $data ?? [], null);
        $this->setIfExists('rcv_broadcast', $data ?? [], null);
        $this->setIfExists('rej_anony', $data ?? [], null);
        $this->setIfExists('vmail_annc_time', $data ?? [], null);
        $this->setIfExists('vmail_annc_cid', $data ?? [], null);
        $this->setIfExists('vmail_sort_lifo', $data ?? [], null);
        $this->setIfExists('vmail_fwd_to', $data ?? [], null);
        $this->setIfExists('vmail_notify', $data ?? [], null);
        $this->setIfExists('vmail_notify_enabled', $data ?? [], null);
        $this->setIfExists('ntfy_missed_call', $data ?? [], null);
        $this->setIfExists('ntfy_data_limit', $data ?? [], null);
        $this->setIfExists('dial_plan', $data ?? [], null);
        $this->setIfExists('dial_policy', $data ?? [], null);
        $this->setIfExists('callid_nmbr', $data ?? [], null);
        $this->setIfExists('callid_name', $data ?? [], null);
        $this->setIfExists('callid_emgr', $data ?? [], null);
        $this->setIfExists('area_code', $data ?? [], null);
        $this->setIfExists('presence', $data ?? [], null);
        $this->setIfExists('dir_list', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('srv_code', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('last_update', $data ?? [], null);
        $this->setIfExists('gau_session', $data ?? [], null);
        $this->setIfExists('vmail_transcribe', $data ?? [], null);
        $this->setIfExists('address_id', $data ?? [], null);
        $this->setIfExists('hide_call_recordings', $data ?? [], null);
        $this->setIfExists('rmoh', $data ?? [], null);
        $this->setIfExists('moh_interval', $data ?? [], null);
        $this->setIfExists('account_status', $data ?? [], null);
        $this->setIfExists('sso_ids', $data ?? [], null);
        $this->setIfExists('mfa', $data ?? [], null);
        $this->setIfExists('pwd_hash', $data ?? [], null);
        $this->setIfExists('privacy', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        $allowedValues = $this->getTimeZoneAllowableValues();
        if (!is_null($this->container['time_zone']) && !in_array($this->container['time_zone'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'time_zone', must be one of '%s'",
                $this->container['time_zone'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPrivacyAllowableValues();
        if (!is_null($this->container['privacy']) && !in_array($this->container['privacy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'privacy', must be one of '%s'",
                $this->container['privacy'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\ConnectionExtraConnectionAddress
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\ConnectionExtraConnectionAddress $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets subscriber_login
     *
     * @return string|null
     */
    public function getSubscriberLogin()
    {
        return $this->container['subscriber_login'];
    }

    /**
     * Sets subscriber_login
     *
     * @param string|null $subscriber_login subscriber_login
     *
     * @return self
     */
    public function setSubscriberLogin($subscriber_login)
    {
        if (is_null($subscriber_login)) {
            throw new \InvalidArgumentException('non-nullable subscriber_login cannot be null');
        }
        $this->container['subscriber_login'] = $subscriber_login;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets site
     *
     * @return string|null
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param string|null $site site
     *
     * @return self
     */
    public function setSite($site)
    {
        if (is_null($site)) {
            throw new \InvalidArgumentException('non-nullable site cannot be null');
        }
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets dir
     *
     * @return int|null
     */
    public function getDir()
    {
        return $this->container['dir'];
    }

    /**
     * Sets dir
     *
     * @param int|null $dir dir
     *
     * @return self
     */
    public function setDir($dir)
    {
        if (is_null($dir)) {
            throw new \InvalidArgumentException('non-nullable dir cannot be null');
        }
        $this->container['dir'] = $dir;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            array_push($this->openAPINullablesSetToNull, 'message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets vmail_provisioned
     *
     * @return string|null
     */
    public function getVmailProvisioned()
    {
        return $this->container['vmail_provisioned'];
    }

    /**
     * Sets vmail_provisioned
     *
     * @param string|null $vmail_provisioned vmail_provisioned
     *
     * @return self
     */
    public function setVmailProvisioned($vmail_provisioned)
    {
        if (is_null($vmail_provisioned)) {
            throw new \InvalidArgumentException('non-nullable vmail_provisioned cannot be null');
        }
        $this->container['vmail_provisioned'] = $vmail_provisioned;

        return $this;
    }

    /**
     * Gets accept
     *
     * @return string|null
     */
    public function getAccept()
    {
        return $this->container['accept'];
    }

    /**
     * Sets accept
     *
     * @param string|null $accept accept
     *
     * @return self
     */
    public function setAccept($accept)
    {
        if (is_null($accept)) {
            throw new \InvalidArgumentException('non-nullable accept cannot be null');
        }
        $this->container['accept'] = $accept;

        return $this;
    }

    /**
     * Gets reject
     *
     * @return string|null
     */
    public function getReject()
    {
        return $this->container['reject'];
    }

    /**
     * Sets reject
     *
     * @param string|null $reject reject
     *
     * @return self
     */
    public function setReject($reject)
    {
        if (is_null($reject)) {
            throw new \InvalidArgumentException('non-nullable reject cannot be null');
        }
        $this->container['reject'] = $reject;

        return $this;
    }

    /**
     * Gets screen
     *
     * @return string|null
     */
    public function getScreen()
    {
        return $this->container['screen'];
    }

    /**
     * Sets screen
     *
     * @param string|null $screen screen
     *
     * @return self
     */
    public function setScreen($screen)
    {
        if (is_null($screen)) {
            throw new \InvalidArgumentException('non-nullable screen cannot be null');
        }
        $this->container['screen'] = $screen;

        return $this;
    }

    /**
     * Gets no_answer_timeout
     *
     * @return int|null
     */
    public function getNoAnswerTimeout()
    {
        return $this->container['no_answer_timeout'];
    }

    /**
     * Sets no_answer_timeout
     *
     * @param int|null $no_answer_timeout no_answer_timeout
     *
     * @return self
     */
    public function setNoAnswerTimeout($no_answer_timeout)
    {
        if (is_null($no_answer_timeout)) {
            throw new \InvalidArgumentException('non-nullable no_answer_timeout cannot be null');
        }
        $this->container['no_answer_timeout'] = $no_answer_timeout;

        return $this;
    }

    /**
     * Gets subscriber_pin
     *
     * @return int|null
     */
    public function getSubscriberPin()
    {
        return $this->container['subscriber_pin'];
    }

    /**
     * Sets subscriber_pin
     *
     * @param int|null $subscriber_pin subscriber_pin
     *
     * @return self
     */
    public function setSubscriberPin($subscriber_pin)
    {
        if (is_null($subscriber_pin)) {
            throw new \InvalidArgumentException('non-nullable subscriber_pin cannot be null');
        }
        $this->container['subscriber_pin'] = $subscriber_pin;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets data_limit
     *
     * @return int|null
     */
    public function getDataLimit()
    {
        return $this->container['data_limit'];
    }

    /**
     * Sets data_limit
     *
     * @param int|null $data_limit data_limit
     *
     * @return self
     */
    public function setDataLimit($data_limit)
    {
        if (is_null($data_limit)) {
            throw new \InvalidArgumentException('non-nullable data_limit cannot be null');
        }
        $this->container['data_limit'] = $data_limit;

        return $this;
    }

    /**
     * Gets call_limit
     *
     * @return int|null
     */
    public function getCallLimit()
    {
        return $this->container['call_limit'];
    }

    /**
     * Sets call_limit
     *
     * @param int|null $call_limit call_limit
     *
     * @return self
     */
    public function setCallLimit($call_limit)
    {
        if (is_null($call_limit)) {
            throw new \InvalidArgumentException('non-nullable call_limit cannot be null');
        }
        $this->container['call_limit'] = $call_limit;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string|null $time_zone time_zone
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            throw new \InvalidArgumentException('non-nullable time_zone cannot be null');
        }
        $allowedValues = $this->getTimeZoneAllowableValues();
        if (!in_array($time_zone, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'time_zone', must be one of '%s'",
                    $time_zone,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets dir_anc
     *
     * @return string|null
     */
    public function getDirAnc()
    {
        return $this->container['dir_anc'];
    }

    /**
     * Sets dir_anc
     *
     * @param string|null $dir_anc dir_anc
     *
     * @return self
     */
    public function setDirAnc($dir_anc)
    {
        if (is_null($dir_anc)) {
            throw new \InvalidArgumentException('non-nullable dir_anc cannot be null');
        }
        $this->container['dir_anc'] = $dir_anc;

        return $this;
    }

    /**
     * Gets directory_order
     *
     * @return int|null
     */
    public function getDirectoryOrder()
    {
        return $this->container['directory_order'];
    }

    /**
     * Sets directory_order
     *
     * @param int|null $directory_order directory_order
     *
     * @return self
     */
    public function setDirectoryOrder($directory_order)
    {
        if (is_null($directory_order)) {
            throw new \InvalidArgumentException('non-nullable directory_order cannot be null');
        }
        $this->container['directory_order'] = $directory_order;

        return $this;
    }

    /**
     * Gets vmail_greeting
     *
     * @return string|null
     */
    public function getVmailGreeting()
    {
        return $this->container['vmail_greeting'];
    }

    /**
     * Sets vmail_greeting
     *
     * @param string|null $vmail_greeting vmail_greeting
     *
     * @return self
     */
    public function setVmailGreeting($vmail_greeting)
    {
        if (is_null($vmail_greeting)) {
            throw new \InvalidArgumentException('non-nullable vmail_greeting cannot be null');
        }
        $this->container['vmail_greeting'] = $vmail_greeting;

        return $this;
    }

    /**
     * Gets vmail_enabled
     *
     * @return string|null
     */
    public function getVmailEnabled()
    {
        return $this->container['vmail_enabled'];
    }

    /**
     * Sets vmail_enabled
     *
     * @param string|null $vmail_enabled vmail_enabled
     *
     * @return self
     */
    public function setVmailEnabled($vmail_enabled)
    {
        if (is_null($vmail_enabled)) {
            throw new \InvalidArgumentException('non-nullable vmail_enabled cannot be null');
        }
        $this->container['vmail_enabled'] = $vmail_enabled;

        return $this;
    }

    /**
     * Gets rcv_broadcast
     *
     * @return string|null
     */
    public function getRcvBroadcast()
    {
        return $this->container['rcv_broadcast'];
    }

    /**
     * Sets rcv_broadcast
     *
     * @param string|null $rcv_broadcast rcv_broadcast
     *
     * @return self
     */
    public function setRcvBroadcast($rcv_broadcast)
    {
        if (is_null($rcv_broadcast)) {
            throw new \InvalidArgumentException('non-nullable rcv_broadcast cannot be null');
        }
        $this->container['rcv_broadcast'] = $rcv_broadcast;

        return $this;
    }

    /**
     * Gets rej_anony
     *
     * @return string|null
     */
    public function getRejAnony()
    {
        return $this->container['rej_anony'];
    }

    /**
     * Sets rej_anony
     *
     * @param string|null $rej_anony rej_anony
     *
     * @return self
     */
    public function setRejAnony($rej_anony)
    {
        if (is_null($rej_anony)) {
            throw new \InvalidArgumentException('non-nullable rej_anony cannot be null');
        }
        $this->container['rej_anony'] = $rej_anony;

        return $this;
    }

    /**
     * Gets vmail_annc_time
     *
     * @return string|null
     */
    public function getVmailAnncTime()
    {
        return $this->container['vmail_annc_time'];
    }

    /**
     * Sets vmail_annc_time
     *
     * @param string|null $vmail_annc_time vmail_annc_time
     *
     * @return self
     */
    public function setVmailAnncTime($vmail_annc_time)
    {
        if (is_null($vmail_annc_time)) {
            throw new \InvalidArgumentException('non-nullable vmail_annc_time cannot be null');
        }
        $this->container['vmail_annc_time'] = $vmail_annc_time;

        return $this;
    }

    /**
     * Gets vmail_annc_cid
     *
     * @return string|null
     */
    public function getVmailAnncCid()
    {
        return $this->container['vmail_annc_cid'];
    }

    /**
     * Sets vmail_annc_cid
     *
     * @param string|null $vmail_annc_cid vmail_annc_cid
     *
     * @return self
     */
    public function setVmailAnncCid($vmail_annc_cid)
    {
        if (is_null($vmail_annc_cid)) {
            throw new \InvalidArgumentException('non-nullable vmail_annc_cid cannot be null');
        }
        $this->container['vmail_annc_cid'] = $vmail_annc_cid;

        return $this;
    }

    /**
     * Gets vmail_sort_lifo
     *
     * @return string|null
     */
    public function getVmailSortLifo()
    {
        return $this->container['vmail_sort_lifo'];
    }

    /**
     * Sets vmail_sort_lifo
     *
     * @param string|null $vmail_sort_lifo vmail_sort_lifo
     *
     * @return self
     */
    public function setVmailSortLifo($vmail_sort_lifo)
    {
        if (is_null($vmail_sort_lifo)) {
            throw new \InvalidArgumentException('non-nullable vmail_sort_lifo cannot be null');
        }
        $this->container['vmail_sort_lifo'] = $vmail_sort_lifo;

        return $this;
    }

    /**
     * Gets vmail_fwd_to
     *
     * @return string|null
     */
    public function getVmailFwdTo()
    {
        return $this->container['vmail_fwd_to'];
    }

    /**
     * Sets vmail_fwd_to
     *
     * @param string|null $vmail_fwd_to vmail_fwd_to
     *
     * @return self
     */
    public function setVmailFwdTo($vmail_fwd_to)
    {
        if (is_null($vmail_fwd_to)) {
            throw new \InvalidArgumentException('non-nullable vmail_fwd_to cannot be null');
        }
        $this->container['vmail_fwd_to'] = $vmail_fwd_to;

        return $this;
    }

    /**
     * Gets vmail_notify
     *
     * @return string|null
     */
    public function getVmailNotify()
    {
        return $this->container['vmail_notify'];
    }

    /**
     * Sets vmail_notify
     *
     * @param string|null $vmail_notify vmail_notify
     *
     * @return self
     */
    public function setVmailNotify($vmail_notify)
    {
        if (is_null($vmail_notify)) {
            throw new \InvalidArgumentException('non-nullable vmail_notify cannot be null');
        }
        $this->container['vmail_notify'] = $vmail_notify;

        return $this;
    }

    /**
     * Gets vmail_notify_enabled
     *
     * @return string|null
     */
    public function getVmailNotifyEnabled()
    {
        return $this->container['vmail_notify_enabled'];
    }

    /**
     * Sets vmail_notify_enabled
     *
     * @param string|null $vmail_notify_enabled vmail_notify_enabled
     *
     * @return self
     */
    public function setVmailNotifyEnabled($vmail_notify_enabled)
    {
        if (is_null($vmail_notify_enabled)) {
            throw new \InvalidArgumentException('non-nullable vmail_notify_enabled cannot be null');
        }
        $this->container['vmail_notify_enabled'] = $vmail_notify_enabled;

        return $this;
    }

    /**
     * Gets ntfy_missed_call
     *
     * @return string|null
     */
    public function getNtfyMissedCall()
    {
        return $this->container['ntfy_missed_call'];
    }

    /**
     * Sets ntfy_missed_call
     *
     * @param string|null $ntfy_missed_call ntfy_missed_call
     *
     * @return self
     */
    public function setNtfyMissedCall($ntfy_missed_call)
    {
        if (is_null($ntfy_missed_call)) {
            throw new \InvalidArgumentException('non-nullable ntfy_missed_call cannot be null');
        }
        $this->container['ntfy_missed_call'] = $ntfy_missed_call;

        return $this;
    }

    /**
     * Gets ntfy_data_limit
     *
     * @return string|null
     */
    public function getNtfyDataLimit()
    {
        return $this->container['ntfy_data_limit'];
    }

    /**
     * Sets ntfy_data_limit
     *
     * @param string|null $ntfy_data_limit ntfy_data_limit
     *
     * @return self
     */
    public function setNtfyDataLimit($ntfy_data_limit)
    {
        if (is_null($ntfy_data_limit)) {
            throw new \InvalidArgumentException('non-nullable ntfy_data_limit cannot be null');
        }
        $this->container['ntfy_data_limit'] = $ntfy_data_limit;

        return $this;
    }

    /**
     * Gets dial_plan
     *
     * @return string|null
     */
    public function getDialPlan()
    {
        return $this->container['dial_plan'];
    }

    /**
     * Sets dial_plan
     *
     * @param string|null $dial_plan dial_plan
     *
     * @return self
     */
    public function setDialPlan($dial_plan)
    {
        if (is_null($dial_plan)) {
            throw new \InvalidArgumentException('non-nullable dial_plan cannot be null');
        }
        $this->container['dial_plan'] = $dial_plan;

        return $this;
    }

    /**
     * Gets dial_policy
     *
     * @return string|null
     */
    public function getDialPolicy()
    {
        return $this->container['dial_policy'];
    }

    /**
     * Sets dial_policy
     *
     * @param string|null $dial_policy dial_policy
     *
     * @return self
     */
    public function setDialPolicy($dial_policy)
    {
        if (is_null($dial_policy)) {
            throw new \InvalidArgumentException('non-nullable dial_policy cannot be null');
        }
        $this->container['dial_policy'] = $dial_policy;

        return $this;
    }

    /**
     * Gets callid_nmbr
     *
     * @return int|null
     */
    public function getCallidNmbr()
    {
        return $this->container['callid_nmbr'];
    }

    /**
     * Sets callid_nmbr
     *
     * @param int|null $callid_nmbr callid_nmbr
     *
     * @return self
     */
    public function setCallidNmbr($callid_nmbr)
    {
        if (is_null($callid_nmbr)) {
            throw new \InvalidArgumentException('non-nullable callid_nmbr cannot be null');
        }
        $this->container['callid_nmbr'] = $callid_nmbr;

        return $this;
    }

    /**
     * Gets callid_name
     *
     * @return string|null
     */
    public function getCallidName()
    {
        return $this->container['callid_name'];
    }

    /**
     * Sets callid_name
     *
     * @param string|null $callid_name callid_name
     *
     * @return self
     */
    public function setCallidName($callid_name)
    {
        if (is_null($callid_name)) {
            throw new \InvalidArgumentException('non-nullable callid_name cannot be null');
        }
        $this->container['callid_name'] = $callid_name;

        return $this;
    }

    /**
     * Gets callid_emgr
     *
     * @return int|null
     */
    public function getCallidEmgr()
    {
        return $this->container['callid_emgr'];
    }

    /**
     * Sets callid_emgr
     *
     * @param int|null $callid_emgr callid_emgr
     *
     * @return self
     */
    public function setCallidEmgr($callid_emgr)
    {
        if (is_null($callid_emgr)) {
            throw new \InvalidArgumentException('non-nullable callid_emgr cannot be null');
        }
        $this->container['callid_emgr'] = $callid_emgr;

        return $this;
    }

    /**
     * Gets area_code
     *
     * @return int|null
     */
    public function getAreaCode()
    {
        return $this->container['area_code'];
    }

    /**
     * Sets area_code
     *
     * @param int|null $area_code area_code
     *
     * @return self
     */
    public function setAreaCode($area_code)
    {
        if (is_null($area_code)) {
            throw new \InvalidArgumentException('non-nullable area_code cannot be null');
        }
        $this->container['area_code'] = $area_code;

        return $this;
    }

    /**
     * Gets presence
     *
     * @return string|null
     */
    public function getPresence()
    {
        return $this->container['presence'];
    }

    /**
     * Sets presence
     *
     * @param string|null $presence presence
     *
     * @return self
     */
    public function setPresence($presence)
    {
        if (is_null($presence)) {
            throw new \InvalidArgumentException('non-nullable presence cannot be null');
        }
        $this->container['presence'] = $presence;

        return $this;
    }

    /**
     * Gets dir_list
     *
     * @return string|null
     */
    public function getDirList()
    {
        return $this->container['dir_list'];
    }

    /**
     * Sets dir_list
     *
     * @param string|null $dir_list dir_list
     *
     * @return self
     */
    public function setDirList($dir_list)
    {
        if (is_null($dir_list)) {
            throw new \InvalidArgumentException('non-nullable dir_list cannot be null');
        }
        $this->container['dir_list'] = $dir_list;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets srv_code
     *
     * @return string|null
     */
    public function getSrvCode()
    {
        return $this->container['srv_code'];
    }

    /**
     * Sets srv_code
     *
     * @param string|null $srv_code srv_code
     *
     * @return self
     */
    public function setSrvCode($srv_code)
    {
        if (is_null($srv_code)) {
            throw new \InvalidArgumentException('non-nullable srv_code cannot be null');
        }
        $this->container['srv_code'] = $srv_code;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope scope
     *
     * @return self
     */
    public function setScope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return string|null
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param string|null $last_update last_update
     *
     * @return self
     */
    public function setLastUpdate($last_update)
    {
        if (is_null($last_update)) {
            throw new \InvalidArgumentException('non-nullable last_update cannot be null');
        }
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets gau_session
     *
     * @return int|null
     */
    public function getGauSession()
    {
        return $this->container['gau_session'];
    }

    /**
     * Sets gau_session
     *
     * @param int|null $gau_session gau_session
     *
     * @return self
     */
    public function setGauSession($gau_session)
    {
        if (is_null($gau_session)) {
            throw new \InvalidArgumentException('non-nullable gau_session cannot be null');
        }
        $this->container['gau_session'] = $gau_session;

        return $this;
    }

    /**
     * Gets vmail_transcribe
     *
     * @return string|null
     */
    public function getVmailTranscribe()
    {
        return $this->container['vmail_transcribe'];
    }

    /**
     * Sets vmail_transcribe
     *
     * @param string|null $vmail_transcribe vmail_transcribe
     *
     * @return self
     */
    public function setVmailTranscribe($vmail_transcribe)
    {
        if (is_null($vmail_transcribe)) {
            throw new \InvalidArgumentException('non-nullable vmail_transcribe cannot be null');
        }
        $this->container['vmail_transcribe'] = $vmail_transcribe;

        return $this;
    }

    /**
     * Gets address_id
     *
     * @return string|null
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param string|null $address_id address_id
     *
     * @return self
     */
    public function setAddressId($address_id)
    {
        if (is_null($address_id)) {
            throw new \InvalidArgumentException('non-nullable address_id cannot be null');
        }
        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets hide_call_recordings
     *
     * @return string|null
     */
    public function getHideCallRecordings()
    {
        return $this->container['hide_call_recordings'];
    }

    /**
     * Sets hide_call_recordings
     *
     * @param string|null $hide_call_recordings hide_call_recordings
     *
     * @return self
     */
    public function setHideCallRecordings($hide_call_recordings)
    {
        if (is_null($hide_call_recordings)) {
            throw new \InvalidArgumentException('non-nullable hide_call_recordings cannot be null');
        }
        $this->container['hide_call_recordings'] = $hide_call_recordings;

        return $this;
    }

    /**
     * Gets rmoh
     *
     * @return string|null
     */
    public function getRmoh()
    {
        return $this->container['rmoh'];
    }

    /**
     * Sets rmoh
     *
     * @param string|null $rmoh rmoh
     *
     * @return self
     */
    public function setRmoh($rmoh)
    {
        if (is_null($rmoh)) {
            throw new \InvalidArgumentException('non-nullable rmoh cannot be null');
        }
        $this->container['rmoh'] = $rmoh;

        return $this;
    }

    /**
     * Gets moh_interval
     *
     * @return int|null
     */
    public function getMohInterval()
    {
        return $this->container['moh_interval'];
    }

    /**
     * Sets moh_interval
     *
     * @param int|null $moh_interval moh_interval
     *
     * @return self
     */
    public function setMohInterval($moh_interval)
    {
        if (is_null($moh_interval)) {
            throw new \InvalidArgumentException('non-nullable moh_interval cannot be null');
        }
        $this->container['moh_interval'] = $moh_interval;

        return $this;
    }

    /**
     * Gets account_status
     *
     * @return string|null
     */
    public function getAccountStatus()
    {
        return $this->container['account_status'];
    }

    /**
     * Sets account_status
     *
     * @param string|null $account_status account_status
     *
     * @return self
     */
    public function setAccountStatus($account_status)
    {
        if (is_null($account_status)) {
            throw new \InvalidArgumentException('non-nullable account_status cannot be null');
        }
        $this->container['account_status'] = $account_status;

        return $this;
    }

    /**
     * Gets sso_ids
     *
     * @return string[]|null
     */
    public function getSsoIds()
    {
        return $this->container['sso_ids'];
    }

    /**
     * Sets sso_ids
     *
     * @param string[]|null $sso_ids sso_ids
     *
     * @return self
     */
    public function setSsoIds($sso_ids)
    {
        if (is_null($sso_ids)) {
            throw new \InvalidArgumentException('non-nullable sso_ids cannot be null');
        }
        $this->container['sso_ids'] = $sso_ids;

        return $this;
    }

    /**
     * Gets mfa
     *
     * @return string[]|null
     */
    public function getMfa()
    {
        return $this->container['mfa'];
    }

    /**
     * Sets mfa
     *
     * @param string[]|null $mfa mfa
     *
     * @return self
     */
    public function setMfa($mfa)
    {
        if (is_null($mfa)) {
            throw new \InvalidArgumentException('non-nullable mfa cannot be null');
        }
        $this->container['mfa'] = $mfa;

        return $this;
    }

    /**
     * Gets pwd_hash
     *
     * @return string|null
     */
    public function getPwdHash()
    {
        return $this->container['pwd_hash'];
    }

    /**
     * Sets pwd_hash
     *
     * @param string|null $pwd_hash pwd_hash
     *
     * @return self
     */
    public function setPwdHash($pwd_hash)
    {
        if (is_null($pwd_hash)) {
            throw new \InvalidArgumentException('non-nullable pwd_hash cannot be null');
        }
        $this->container['pwd_hash'] = $pwd_hash;

        return $this;
    }

    /**
     * Gets privacy
     *
     * @return string|null
     */
    public function getPrivacy()
    {
        return $this->container['privacy'];
    }

    /**
     * Sets privacy
     *
     * @param string|null $privacy privacy
     *
     * @return self
     */
    public function setPrivacy($privacy)
    {
        if (is_null($privacy)) {
            throw new \InvalidArgumentException('non-nullable privacy cannot be null');
        }
        $allowedValues = $this->getPrivacyAllowableValues();
        if (!in_array($privacy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'privacy', must be one of '%s'",
                    $privacy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['privacy'] = $privacy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


