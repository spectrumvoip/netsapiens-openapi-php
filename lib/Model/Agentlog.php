<?php
/**
 * Agentlog
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * Agentlog Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Agentlog implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Agentlog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aor_user' => 'string',
        'aor_host' => 'string',
        'timestamp' => 'string',
        'action' => 'string',
        'loggedin_sec' => 'float',
        'available_sec' => 'float',
        'unavailable_sec' => 'float',
        'break_sec' => 'float',
        'lunch_sec' => 'float',
        'meeting_sec' => 'float',
        'other_sec' => 'float',
        'acw_sec' => 'float',
        'web_sec' => 'float',
        'cust1_sec' => 'int',
        'cust2_sec' => 'float',
        'cust3_sec' => 'float',
        'cust4_sec' => 'float',
        'cust5_sec' => 'float',
        'cust6_sec' => 'float',
        'cust7_sec' => 'float',
        'cust8_sec' => 'float',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aor_user' => null,
        'aor_host' => null,
        'timestamp' => null,
        'action' => null,
        'loggedin_sec' => null,
        'available_sec' => null,
        'unavailable_sec' => null,
        'break_sec' => null,
        'lunch_sec' => null,
        'meeting_sec' => null,
        'other_sec' => null,
        'acw_sec' => null,
        'web_sec' => null,
        'cust1_sec' => null,
        'cust2_sec' => null,
        'cust3_sec' => null,
        'cust4_sec' => null,
        'cust5_sec' => null,
        'cust6_sec' => null,
        'cust7_sec' => null,
        'cust8_sec' => null,
        'name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'aor_user' => false,
        'aor_host' => false,
        'timestamp' => false,
        'action' => false,
        'loggedin_sec' => false,
        'available_sec' => false,
        'unavailable_sec' => false,
        'break_sec' => false,
        'lunch_sec' => false,
        'meeting_sec' => false,
        'other_sec' => false,
        'acw_sec' => false,
        'web_sec' => false,
        'cust1_sec' => false,
        'cust2_sec' => false,
        'cust3_sec' => false,
        'cust4_sec' => false,
        'cust5_sec' => false,
        'cust6_sec' => false,
        'cust7_sec' => false,
        'cust8_sec' => false,
        'name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aor_user' => 'aor_user',
        'aor_host' => 'aor_host',
        'timestamp' => 'timestamp',
        'action' => 'action',
        'loggedin_sec' => 'loggedin_sec',
        'available_sec' => 'available_sec',
        'unavailable_sec' => 'unavailable_sec',
        'break_sec' => 'break_sec',
        'lunch_sec' => 'lunch_sec',
        'meeting_sec' => 'meeting_sec',
        'other_sec' => 'other_sec',
        'acw_sec' => 'acw_sec',
        'web_sec' => 'web_sec',
        'cust1_sec' => 'cust1_sec',
        'cust2_sec' => 'cust2_sec',
        'cust3_sec' => 'cust3_sec',
        'cust4_sec' => 'cust4_sec',
        'cust5_sec' => 'cust5_sec',
        'cust6_sec' => 'cust6_sec',
        'cust7_sec' => 'cust7_sec',
        'cust8_sec' => 'cust8_sec',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aor_user' => 'setAorUser',
        'aor_host' => 'setAorHost',
        'timestamp' => 'setTimestamp',
        'action' => 'setAction',
        'loggedin_sec' => 'setLoggedinSec',
        'available_sec' => 'setAvailableSec',
        'unavailable_sec' => 'setUnavailableSec',
        'break_sec' => 'setBreakSec',
        'lunch_sec' => 'setLunchSec',
        'meeting_sec' => 'setMeetingSec',
        'other_sec' => 'setOtherSec',
        'acw_sec' => 'setAcwSec',
        'web_sec' => 'setWebSec',
        'cust1_sec' => 'setCust1Sec',
        'cust2_sec' => 'setCust2Sec',
        'cust3_sec' => 'setCust3Sec',
        'cust4_sec' => 'setCust4Sec',
        'cust5_sec' => 'setCust5Sec',
        'cust6_sec' => 'setCust6Sec',
        'cust7_sec' => 'setCust7Sec',
        'cust8_sec' => 'setCust8Sec',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aor_user' => 'getAorUser',
        'aor_host' => 'getAorHost',
        'timestamp' => 'getTimestamp',
        'action' => 'getAction',
        'loggedin_sec' => 'getLoggedinSec',
        'available_sec' => 'getAvailableSec',
        'unavailable_sec' => 'getUnavailableSec',
        'break_sec' => 'getBreakSec',
        'lunch_sec' => 'getLunchSec',
        'meeting_sec' => 'getMeetingSec',
        'other_sec' => 'getOtherSec',
        'acw_sec' => 'getAcwSec',
        'web_sec' => 'getWebSec',
        'cust1_sec' => 'getCust1Sec',
        'cust2_sec' => 'getCust2Sec',
        'cust3_sec' => 'getCust3Sec',
        'cust4_sec' => 'getCust4Sec',
        'cust5_sec' => 'getCust5Sec',
        'cust6_sec' => 'getCust6Sec',
        'cust7_sec' => 'getCust7Sec',
        'cust8_sec' => 'getCust8Sec',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('aor_user', $data ?? [], null);
        $this->setIfExists('aor_host', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('loggedin_sec', $data ?? [], null);
        $this->setIfExists('available_sec', $data ?? [], null);
        $this->setIfExists('unavailable_sec', $data ?? [], null);
        $this->setIfExists('break_sec', $data ?? [], null);
        $this->setIfExists('lunch_sec', $data ?? [], null);
        $this->setIfExists('meeting_sec', $data ?? [], null);
        $this->setIfExists('other_sec', $data ?? [], null);
        $this->setIfExists('acw_sec', $data ?? [], null);
        $this->setIfExists('web_sec', $data ?? [], null);
        $this->setIfExists('cust1_sec', $data ?? [], null);
        $this->setIfExists('cust2_sec', $data ?? [], null);
        $this->setIfExists('cust3_sec', $data ?? [], null);
        $this->setIfExists('cust4_sec', $data ?? [], null);
        $this->setIfExists('cust5_sec', $data ?? [], null);
        $this->setIfExists('cust6_sec', $data ?? [], null);
        $this->setIfExists('cust7_sec', $data ?? [], null);
        $this->setIfExists('cust8_sec', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['aor_user'] === null) {
            $invalidProperties[] = "'aor_user' can't be null";
        }
        if ($this->container['aor_host'] === null) {
            $invalidProperties[] = "'aor_host' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aor_user
     *
     * @return string
     */
    public function getAorUser()
    {
        return $this->container['aor_user'];
    }

    /**
     * Sets aor_user
     *
     * @param string $aor_user aor_user
     *
     * @return self
     */
    public function setAorUser($aor_user)
    {
        if (is_null($aor_user)) {
            throw new \InvalidArgumentException('non-nullable aor_user cannot be null');
        }
        $this->container['aor_user'] = $aor_user;

        return $this;
    }

    /**
     * Gets aor_host
     *
     * @return string
     */
    public function getAorHost()
    {
        return $this->container['aor_host'];
    }

    /**
     * Sets aor_host
     *
     * @param string $aor_host aor_host
     *
     * @return self
     */
    public function setAorHost($aor_host)
    {
        if (is_null($aor_host)) {
            throw new \InvalidArgumentException('non-nullable aor_host cannot be null');
        }
        $this->container['aor_host'] = $aor_host;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets loggedin_sec
     *
     * @return float|null
     */
    public function getLoggedinSec()
    {
        return $this->container['loggedin_sec'];
    }

    /**
     * Sets loggedin_sec
     *
     * @param float|null $loggedin_sec loggedin_sec
     *
     * @return self
     */
    public function setLoggedinSec($loggedin_sec)
    {
        if (is_null($loggedin_sec)) {
            throw new \InvalidArgumentException('non-nullable loggedin_sec cannot be null');
        }
        $this->container['loggedin_sec'] = $loggedin_sec;

        return $this;
    }

    /**
     * Gets available_sec
     *
     * @return float|null
     */
    public function getAvailableSec()
    {
        return $this->container['available_sec'];
    }

    /**
     * Sets available_sec
     *
     * @param float|null $available_sec available_sec
     *
     * @return self
     */
    public function setAvailableSec($available_sec)
    {
        if (is_null($available_sec)) {
            throw new \InvalidArgumentException('non-nullable available_sec cannot be null');
        }
        $this->container['available_sec'] = $available_sec;

        return $this;
    }

    /**
     * Gets unavailable_sec
     *
     * @return float|null
     */
    public function getUnavailableSec()
    {
        return $this->container['unavailable_sec'];
    }

    /**
     * Sets unavailable_sec
     *
     * @param float|null $unavailable_sec unavailable_sec
     *
     * @return self
     */
    public function setUnavailableSec($unavailable_sec)
    {
        if (is_null($unavailable_sec)) {
            throw new \InvalidArgumentException('non-nullable unavailable_sec cannot be null');
        }
        $this->container['unavailable_sec'] = $unavailable_sec;

        return $this;
    }

    /**
     * Gets break_sec
     *
     * @return float|null
     */
    public function getBreakSec()
    {
        return $this->container['break_sec'];
    }

    /**
     * Sets break_sec
     *
     * @param float|null $break_sec break_sec
     *
     * @return self
     */
    public function setBreakSec($break_sec)
    {
        if (is_null($break_sec)) {
            throw new \InvalidArgumentException('non-nullable break_sec cannot be null');
        }
        $this->container['break_sec'] = $break_sec;

        return $this;
    }

    /**
     * Gets lunch_sec
     *
     * @return float|null
     */
    public function getLunchSec()
    {
        return $this->container['lunch_sec'];
    }

    /**
     * Sets lunch_sec
     *
     * @param float|null $lunch_sec lunch_sec
     *
     * @return self
     */
    public function setLunchSec($lunch_sec)
    {
        if (is_null($lunch_sec)) {
            throw new \InvalidArgumentException('non-nullable lunch_sec cannot be null');
        }
        $this->container['lunch_sec'] = $lunch_sec;

        return $this;
    }

    /**
     * Gets meeting_sec
     *
     * @return float|null
     */
    public function getMeetingSec()
    {
        return $this->container['meeting_sec'];
    }

    /**
     * Sets meeting_sec
     *
     * @param float|null $meeting_sec meeting_sec
     *
     * @return self
     */
    public function setMeetingSec($meeting_sec)
    {
        if (is_null($meeting_sec)) {
            throw new \InvalidArgumentException('non-nullable meeting_sec cannot be null');
        }
        $this->container['meeting_sec'] = $meeting_sec;

        return $this;
    }

    /**
     * Gets other_sec
     *
     * @return float|null
     */
    public function getOtherSec()
    {
        return $this->container['other_sec'];
    }

    /**
     * Sets other_sec
     *
     * @param float|null $other_sec other_sec
     *
     * @return self
     */
    public function setOtherSec($other_sec)
    {
        if (is_null($other_sec)) {
            throw new \InvalidArgumentException('non-nullable other_sec cannot be null');
        }
        $this->container['other_sec'] = $other_sec;

        return $this;
    }

    /**
     * Gets acw_sec
     *
     * @return float|null
     */
    public function getAcwSec()
    {
        return $this->container['acw_sec'];
    }

    /**
     * Sets acw_sec
     *
     * @param float|null $acw_sec acw_sec
     *
     * @return self
     */
    public function setAcwSec($acw_sec)
    {
        if (is_null($acw_sec)) {
            throw new \InvalidArgumentException('non-nullable acw_sec cannot be null');
        }
        $this->container['acw_sec'] = $acw_sec;

        return $this;
    }

    /**
     * Gets web_sec
     *
     * @return float|null
     */
    public function getWebSec()
    {
        return $this->container['web_sec'];
    }

    /**
     * Sets web_sec
     *
     * @param float|null $web_sec web_sec
     *
     * @return self
     */
    public function setWebSec($web_sec)
    {
        if (is_null($web_sec)) {
            throw new \InvalidArgumentException('non-nullable web_sec cannot be null');
        }
        $this->container['web_sec'] = $web_sec;

        return $this;
    }

    /**
     * Gets cust1_sec
     *
     * @return int|null
     */
    public function getCust1Sec()
    {
        return $this->container['cust1_sec'];
    }

    /**
     * Sets cust1_sec
     *
     * @param int|null $cust1_sec cust1_sec
     *
     * @return self
     */
    public function setCust1Sec($cust1_sec)
    {
        if (is_null($cust1_sec)) {
            throw new \InvalidArgumentException('non-nullable cust1_sec cannot be null');
        }
        $this->container['cust1_sec'] = $cust1_sec;

        return $this;
    }

    /**
     * Gets cust2_sec
     *
     * @return float|null
     */
    public function getCust2Sec()
    {
        return $this->container['cust2_sec'];
    }

    /**
     * Sets cust2_sec
     *
     * @param float|null $cust2_sec cust2_sec
     *
     * @return self
     */
    public function setCust2Sec($cust2_sec)
    {
        if (is_null($cust2_sec)) {
            throw new \InvalidArgumentException('non-nullable cust2_sec cannot be null');
        }
        $this->container['cust2_sec'] = $cust2_sec;

        return $this;
    }

    /**
     * Gets cust3_sec
     *
     * @return float|null
     */
    public function getCust3Sec()
    {
        return $this->container['cust3_sec'];
    }

    /**
     * Sets cust3_sec
     *
     * @param float|null $cust3_sec cust3_sec
     *
     * @return self
     */
    public function setCust3Sec($cust3_sec)
    {
        if (is_null($cust3_sec)) {
            throw new \InvalidArgumentException('non-nullable cust3_sec cannot be null');
        }
        $this->container['cust3_sec'] = $cust3_sec;

        return $this;
    }

    /**
     * Gets cust4_sec
     *
     * @return float|null
     */
    public function getCust4Sec()
    {
        return $this->container['cust4_sec'];
    }

    /**
     * Sets cust4_sec
     *
     * @param float|null $cust4_sec cust4_sec
     *
     * @return self
     */
    public function setCust4Sec($cust4_sec)
    {
        if (is_null($cust4_sec)) {
            throw new \InvalidArgumentException('non-nullable cust4_sec cannot be null');
        }
        $this->container['cust4_sec'] = $cust4_sec;

        return $this;
    }

    /**
     * Gets cust5_sec
     *
     * @return float|null
     */
    public function getCust5Sec()
    {
        return $this->container['cust5_sec'];
    }

    /**
     * Sets cust5_sec
     *
     * @param float|null $cust5_sec cust5_sec
     *
     * @return self
     */
    public function setCust5Sec($cust5_sec)
    {
        if (is_null($cust5_sec)) {
            throw new \InvalidArgumentException('non-nullable cust5_sec cannot be null');
        }
        $this->container['cust5_sec'] = $cust5_sec;

        return $this;
    }

    /**
     * Gets cust6_sec
     *
     * @return float|null
     */
    public function getCust6Sec()
    {
        return $this->container['cust6_sec'];
    }

    /**
     * Sets cust6_sec
     *
     * @param float|null $cust6_sec cust6_sec
     *
     * @return self
     */
    public function setCust6Sec($cust6_sec)
    {
        if (is_null($cust6_sec)) {
            throw new \InvalidArgumentException('non-nullable cust6_sec cannot be null');
        }
        $this->container['cust6_sec'] = $cust6_sec;

        return $this;
    }

    /**
     * Gets cust7_sec
     *
     * @return float|null
     */
    public function getCust7Sec()
    {
        return $this->container['cust7_sec'];
    }

    /**
     * Sets cust7_sec
     *
     * @param float|null $cust7_sec cust7_sec
     *
     * @return self
     */
    public function setCust7Sec($cust7_sec)
    {
        if (is_null($cust7_sec)) {
            throw new \InvalidArgumentException('non-nullable cust7_sec cannot be null');
        }
        $this->container['cust7_sec'] = $cust7_sec;

        return $this;
    }

    /**
     * Gets cust8_sec
     *
     * @return float|null
     */
    public function getCust8Sec()
    {
        return $this->container['cust8_sec'];
    }

    /**
     * Sets cust8_sec
     *
     * @param float|null $cust8_sec cust8_sec
     *
     * @return self
     */
    public function setCust8Sec($cust8_sec)
    {
        if (is_null($cust8_sec)) {
            throw new \InvalidArgumentException('non-nullable cust8_sec cannot be null');
        }
        $this->container['cust8_sec'] = $cust8_sec;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


