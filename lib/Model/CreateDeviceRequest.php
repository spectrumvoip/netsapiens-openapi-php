<?php
/**
 * CreateDeviceRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * CreateDeviceRequest Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateDeviceRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateDevice_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'synchronous' => '\SpectrumVoip\\\\NetSapiens\Model\Synchronous',
        'device' => 'string',
        'device_sip_registration_uri' => 'string',
        'device_sip_registration_state' => 'string',
        'device_sip_registration_password' => 'string',
        'caller_id_number_emergency' => 'string',
        'device_force_notify_new_voicemails_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'device_level_call_recording_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'device_push_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault',
        'device_sip_registration_contact' => 'string',
        'device_sip_registration_core_server' => 'string',
        'device_sip_registration_datetime' => '\DateTime',
        'device_sip_registration_expires_datetime' => '\DateTime',
        'device_sip_registration_expiry_seconds' => 'int',
        'device_sip_registration_ignore_for_presence_calculation' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'device_sip_registration_ignore_report_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'device_sip_registration_ip_address' => 'string',
        'device_sip_registration_user_agent' => 'string',
        'device_sip_no_to_tag_in_cancel' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'device_srtp_enabled' => 'string',
        'auto_answer_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault',
        'recording_configuration' => '\SpectrumVoip\\\\NetSapiens\Model\RecordingConfiguration',
        'device_sip_allowed_user_agent' => 'string',
        'device_sip_nat_traversal_enabled' => 'string',
        'device_sip_latency_seconds_current' => 'float',
        'device_sip_latency_seconds_average' => 'float',
        'emergency_address_id' => 'string',
        'error_reading_from_endpoint_module' => 'string',
        'login_username' => 'string',
        'name_full_name' => 'string',
        'device_models_model' => 'string',
        'device_provisioning_mac_address' => 'string',
        'device_provisioning_registration_core_server' => 'string',
        'device_provisioning_sip_transport_protocol' => 'string',
        'device_provisioning_username' => 'string',
        'device_provisioning_password' => 'string',
        'device_provisioning_line' => 'int',
        'device_provisioning_overrides' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'synchronous' => null,
        'device' => null,
        'device_sip_registration_uri' => null,
        'device_sip_registration_state' => null,
        'device_sip_registration_password' => 'password',
        'caller_id_number_emergency' => null,
        'device_force_notify_new_voicemails_enabled' => null,
        'device_level_call_recording_enabled' => null,
        'device_push_enabled' => null,
        'device_sip_registration_contact' => null,
        'device_sip_registration_core_server' => 'hostname',
        'device_sip_registration_datetime' => 'date-time',
        'device_sip_registration_expires_datetime' => 'date-time',
        'device_sip_registration_expiry_seconds' => null,
        'device_sip_registration_ignore_for_presence_calculation' => null,
        'device_sip_registration_ignore_report_enabled' => null,
        'device_sip_registration_ip_address' => 'i',
        'device_sip_registration_user_agent' => null,
        'device_sip_no_to_tag_in_cancel' => null,
        'device_srtp_enabled' => null,
        'auto_answer_enabled' => null,
        'recording_configuration' => null,
        'device_sip_allowed_user_agent' => null,
        'device_sip_nat_traversal_enabled' => null,
        'device_sip_latency_seconds_current' => null,
        'device_sip_latency_seconds_average' => null,
        'emergency_address_id' => null,
        'error_reading_from_endpoint_module' => null,
        'login_username' => null,
        'name_full_name' => null,
        'device_models_model' => null,
        'device_provisioning_mac_address' => null,
        'device_provisioning_registration_core_server' => null,
        'device_provisioning_sip_transport_protocol' => null,
        'device_provisioning_username' => null,
        'device_provisioning_password' => null,
        'device_provisioning_line' => null,
        'device_provisioning_overrides' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'synchronous' => false,
        'device' => false,
        'device_sip_registration_uri' => false,
        'device_sip_registration_state' => false,
        'device_sip_registration_password' => false,
        'caller_id_number_emergency' => false,
        'device_force_notify_new_voicemails_enabled' => false,
        'device_level_call_recording_enabled' => false,
        'device_push_enabled' => false,
        'device_sip_registration_contact' => false,
        'device_sip_registration_core_server' => false,
        'device_sip_registration_datetime' => true,
        'device_sip_registration_expires_datetime' => true,
        'device_sip_registration_expiry_seconds' => false,
        'device_sip_registration_ignore_for_presence_calculation' => false,
        'device_sip_registration_ignore_report_enabled' => false,
        'device_sip_registration_ip_address' => false,
        'device_sip_registration_user_agent' => false,
        'device_sip_no_to_tag_in_cancel' => false,
        'device_srtp_enabled' => false,
        'auto_answer_enabled' => false,
        'recording_configuration' => false,
        'device_sip_allowed_user_agent' => false,
        'device_sip_nat_traversal_enabled' => false,
        'device_sip_latency_seconds_current' => false,
        'device_sip_latency_seconds_average' => false,
        'emergency_address_id' => true,
        'error_reading_from_endpoint_module' => false,
        'login_username' => false,
        'name_full_name' => false,
        'device_models_model' => false,
        'device_provisioning_mac_address' => false,
        'device_provisioning_registration_core_server' => false,
        'device_provisioning_sip_transport_protocol' => false,
        'device_provisioning_username' => true,
        'device_provisioning_password' => true,
        'device_provisioning_line' => false,
        'device_provisioning_overrides' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'synchronous' => 'synchronous',
        'device' => 'device',
        'device_sip_registration_uri' => 'device-sip-registration-uri',
        'device_sip_registration_state' => 'device-sip-registration-state',
        'device_sip_registration_password' => 'device-sip-registration-password',
        'caller_id_number_emergency' => 'caller-id-number-emergency',
        'device_force_notify_new_voicemails_enabled' => 'device-force-notify-new-voicemails-enabled',
        'device_level_call_recording_enabled' => 'device-level-call-recording-enabled',
        'device_push_enabled' => 'device-push-enabled',
        'device_sip_registration_contact' => 'device-sip-registration-contact',
        'device_sip_registration_core_server' => 'device-sip-registration-core-server',
        'device_sip_registration_datetime' => 'device-sip-registration-datetime',
        'device_sip_registration_expires_datetime' => 'device-sip-registration-expires-datetime',
        'device_sip_registration_expiry_seconds' => 'device-sip-registration-expiry-seconds',
        'device_sip_registration_ignore_for_presence_calculation' => 'device-sip-registration-ignore-for-presence-calculation',
        'device_sip_registration_ignore_report_enabled' => 'device-sip-registration-ignore-report-enabled',
        'device_sip_registration_ip_address' => 'device-sip-registration-ip-address',
        'device_sip_registration_user_agent' => 'device-sip-registration-user-agent',
        'device_sip_no_to_tag_in_cancel' => 'device-sip-no-to-tag-in-cancel',
        'device_srtp_enabled' => 'device-srtp-enabled',
        'auto_answer_enabled' => 'auto-answer-enabled',
        'recording_configuration' => 'recording-configuration',
        'device_sip_allowed_user_agent' => 'device-sip-allowed-user-agent',
        'device_sip_nat_traversal_enabled' => 'device-sip-nat-traversal-enabled',
        'device_sip_latency_seconds_current' => 'device-sip-latency-seconds-current',
        'device_sip_latency_seconds_average' => 'device-sip-latency-seconds-average',
        'emergency_address_id' => 'emergency-address-id',
        'error_reading_from_endpoint_module' => 'error-reading-from-endpoint-module',
        'login_username' => 'login-username',
        'name_full_name' => 'name-full-name',
        'device_models_model' => 'device-models-model',
        'device_provisioning_mac_address' => 'device-provisioning-mac-address',
        'device_provisioning_registration_core_server' => 'device-provisioning-registration-core-server',
        'device_provisioning_sip_transport_protocol' => 'device-provisioning-sip-transport-protocol',
        'device_provisioning_username' => 'device-provisioning-username',
        'device_provisioning_password' => 'device-provisioning-password',
        'device_provisioning_line' => 'device-provisioning-line',
        'device_provisioning_overrides' => 'device-provisioning-overrides'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'synchronous' => 'setSynchronous',
        'device' => 'setDevice',
        'device_sip_registration_uri' => 'setDeviceSipRegistrationUri',
        'device_sip_registration_state' => 'setDeviceSipRegistrationState',
        'device_sip_registration_password' => 'setDeviceSipRegistrationPassword',
        'caller_id_number_emergency' => 'setCallerIdNumberEmergency',
        'device_force_notify_new_voicemails_enabled' => 'setDeviceForceNotifyNewVoicemailsEnabled',
        'device_level_call_recording_enabled' => 'setDeviceLevelCallRecordingEnabled',
        'device_push_enabled' => 'setDevicePushEnabled',
        'device_sip_registration_contact' => 'setDeviceSipRegistrationContact',
        'device_sip_registration_core_server' => 'setDeviceSipRegistrationCoreServer',
        'device_sip_registration_datetime' => 'setDeviceSipRegistrationDatetime',
        'device_sip_registration_expires_datetime' => 'setDeviceSipRegistrationExpiresDatetime',
        'device_sip_registration_expiry_seconds' => 'setDeviceSipRegistrationExpirySeconds',
        'device_sip_registration_ignore_for_presence_calculation' => 'setDeviceSipRegistrationIgnoreForPresenceCalculation',
        'device_sip_registration_ignore_report_enabled' => 'setDeviceSipRegistrationIgnoreReportEnabled',
        'device_sip_registration_ip_address' => 'setDeviceSipRegistrationIpAddress',
        'device_sip_registration_user_agent' => 'setDeviceSipRegistrationUserAgent',
        'device_sip_no_to_tag_in_cancel' => 'setDeviceSipNoToTagInCancel',
        'device_srtp_enabled' => 'setDeviceSrtpEnabled',
        'auto_answer_enabled' => 'setAutoAnswerEnabled',
        'recording_configuration' => 'setRecordingConfiguration',
        'device_sip_allowed_user_agent' => 'setDeviceSipAllowedUserAgent',
        'device_sip_nat_traversal_enabled' => 'setDeviceSipNatTraversalEnabled',
        'device_sip_latency_seconds_current' => 'setDeviceSipLatencySecondsCurrent',
        'device_sip_latency_seconds_average' => 'setDeviceSipLatencySecondsAverage',
        'emergency_address_id' => 'setEmergencyAddressId',
        'error_reading_from_endpoint_module' => 'setErrorReadingFromEndpointModule',
        'login_username' => 'setLoginUsername',
        'name_full_name' => 'setNameFullName',
        'device_models_model' => 'setDeviceModelsModel',
        'device_provisioning_mac_address' => 'setDeviceProvisioningMacAddress',
        'device_provisioning_registration_core_server' => 'setDeviceProvisioningRegistrationCoreServer',
        'device_provisioning_sip_transport_protocol' => 'setDeviceProvisioningSipTransportProtocol',
        'device_provisioning_username' => 'setDeviceProvisioningUsername',
        'device_provisioning_password' => 'setDeviceProvisioningPassword',
        'device_provisioning_line' => 'setDeviceProvisioningLine',
        'device_provisioning_overrides' => 'setDeviceProvisioningOverrides'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'synchronous' => 'getSynchronous',
        'device' => 'getDevice',
        'device_sip_registration_uri' => 'getDeviceSipRegistrationUri',
        'device_sip_registration_state' => 'getDeviceSipRegistrationState',
        'device_sip_registration_password' => 'getDeviceSipRegistrationPassword',
        'caller_id_number_emergency' => 'getCallerIdNumberEmergency',
        'device_force_notify_new_voicemails_enabled' => 'getDeviceForceNotifyNewVoicemailsEnabled',
        'device_level_call_recording_enabled' => 'getDeviceLevelCallRecordingEnabled',
        'device_push_enabled' => 'getDevicePushEnabled',
        'device_sip_registration_contact' => 'getDeviceSipRegistrationContact',
        'device_sip_registration_core_server' => 'getDeviceSipRegistrationCoreServer',
        'device_sip_registration_datetime' => 'getDeviceSipRegistrationDatetime',
        'device_sip_registration_expires_datetime' => 'getDeviceSipRegistrationExpiresDatetime',
        'device_sip_registration_expiry_seconds' => 'getDeviceSipRegistrationExpirySeconds',
        'device_sip_registration_ignore_for_presence_calculation' => 'getDeviceSipRegistrationIgnoreForPresenceCalculation',
        'device_sip_registration_ignore_report_enabled' => 'getDeviceSipRegistrationIgnoreReportEnabled',
        'device_sip_registration_ip_address' => 'getDeviceSipRegistrationIpAddress',
        'device_sip_registration_user_agent' => 'getDeviceSipRegistrationUserAgent',
        'device_sip_no_to_tag_in_cancel' => 'getDeviceSipNoToTagInCancel',
        'device_srtp_enabled' => 'getDeviceSrtpEnabled',
        'auto_answer_enabled' => 'getAutoAnswerEnabled',
        'recording_configuration' => 'getRecordingConfiguration',
        'device_sip_allowed_user_agent' => 'getDeviceSipAllowedUserAgent',
        'device_sip_nat_traversal_enabled' => 'getDeviceSipNatTraversalEnabled',
        'device_sip_latency_seconds_current' => 'getDeviceSipLatencySecondsCurrent',
        'device_sip_latency_seconds_average' => 'getDeviceSipLatencySecondsAverage',
        'emergency_address_id' => 'getEmergencyAddressId',
        'error_reading_from_endpoint_module' => 'getErrorReadingFromEndpointModule',
        'login_username' => 'getLoginUsername',
        'name_full_name' => 'getNameFullName',
        'device_models_model' => 'getDeviceModelsModel',
        'device_provisioning_mac_address' => 'getDeviceProvisioningMacAddress',
        'device_provisioning_registration_core_server' => 'getDeviceProvisioningRegistrationCoreServer',
        'device_provisioning_sip_transport_protocol' => 'getDeviceProvisioningSipTransportProtocol',
        'device_provisioning_username' => 'getDeviceProvisioningUsername',
        'device_provisioning_password' => 'getDeviceProvisioningPassword',
        'device_provisioning_line' => 'getDeviceProvisioningLine',
        'device_provisioning_overrides' => 'getDeviceProvisioningOverrides'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DEVICE_SIP_REGISTRATION_STATE_REGISTERED = 'registered';
    public const DEVICE_SIP_REGISTRATION_STATE_UNREGISTERED = 'unregistered';
    public const DEVICE_SRTP_ENABLED_YES = 'yes';
    public const DEVICE_SRTP_ENABLED_NO = 'no';
    public const DEVICE_SRTP_ENABLED_OPPORTUNISTIC = 'opportunistic';
    public const DEVICE_SIP_NAT_TRAVERSAL_ENABLED_AUTOMATIC = 'automatic';
    public const DEVICE_SIP_NAT_TRAVERSAL_ENABLED_NONE = 'none';
    public const DEVICE_SIP_NAT_TRAVERSAL_ENABLED_NEVER = 'never';
    public const DEVICE_SIP_NAT_TRAVERSAL_ENABLED_FIXED = 'fixed';
    public const DEVICE_PROVISIONING_SIP_TRANSPORT_PROTOCOL_UDP = 'udp';
    public const DEVICE_PROVISIONING_SIP_TRANSPORT_PROTOCOL_TCP = 'tcp';
    public const DEVICE_PROVISIONING_SIP_TRANSPORT_PROTOCOL_TLS = 'tls';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeviceSipRegistrationStateAllowableValues()
    {
        return [
            self::DEVICE_SIP_REGISTRATION_STATE_REGISTERED,
            self::DEVICE_SIP_REGISTRATION_STATE_UNREGISTERED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeviceSrtpEnabledAllowableValues()
    {
        return [
            self::DEVICE_SRTP_ENABLED_YES,
            self::DEVICE_SRTP_ENABLED_NO,
            self::DEVICE_SRTP_ENABLED_OPPORTUNISTIC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeviceSipNatTraversalEnabledAllowableValues()
    {
        return [
            self::DEVICE_SIP_NAT_TRAVERSAL_ENABLED_AUTOMATIC,
            self::DEVICE_SIP_NAT_TRAVERSAL_ENABLED_NONE,
            self::DEVICE_SIP_NAT_TRAVERSAL_ENABLED_NEVER,
            self::DEVICE_SIP_NAT_TRAVERSAL_ENABLED_FIXED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeviceProvisioningSipTransportProtocolAllowableValues()
    {
        return [
            self::DEVICE_PROVISIONING_SIP_TRANSPORT_PROTOCOL_UDP,
            self::DEVICE_PROVISIONING_SIP_TRANSPORT_PROTOCOL_TCP,
            self::DEVICE_PROVISIONING_SIP_TRANSPORT_PROTOCOL_TLS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('synchronous', $data ?? [], null);
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('device_sip_registration_uri', $data ?? [], null);
        $this->setIfExists('device_sip_registration_state', $data ?? [], null);
        $this->setIfExists('device_sip_registration_password', $data ?? [], null);
        $this->setIfExists('caller_id_number_emergency', $data ?? [], '[*]');
        $this->setIfExists('device_force_notify_new_voicemails_enabled', $data ?? [], null);
        $this->setIfExists('device_level_call_recording_enabled', $data ?? [], null);
        $this->setIfExists('device_push_enabled', $data ?? [], null);
        $this->setIfExists('device_sip_registration_contact', $data ?? [], null);
        $this->setIfExists('device_sip_registration_core_server', $data ?? [], null);
        $this->setIfExists('device_sip_registration_datetime', $data ?? [], null);
        $this->setIfExists('device_sip_registration_expires_datetime', $data ?? [], null);
        $this->setIfExists('device_sip_registration_expiry_seconds', $data ?? [], 60);
        $this->setIfExists('device_sip_registration_ignore_for_presence_calculation', $data ?? [], null);
        $this->setIfExists('device_sip_registration_ignore_report_enabled', $data ?? [], null);
        $this->setIfExists('device_sip_registration_ip_address', $data ?? [], null);
        $this->setIfExists('device_sip_registration_user_agent', $data ?? [], null);
        $this->setIfExists('device_sip_no_to_tag_in_cancel', $data ?? [], null);
        $this->setIfExists('device_srtp_enabled', $data ?? [], 'no');
        $this->setIfExists('auto_answer_enabled', $data ?? [], null);
        $this->setIfExists('recording_configuration', $data ?? [], null);
        $this->setIfExists('device_sip_allowed_user_agent', $data ?? [], null);
        $this->setIfExists('device_sip_nat_traversal_enabled', $data ?? [], 'automatic');
        $this->setIfExists('device_sip_latency_seconds_current', $data ?? [], null);
        $this->setIfExists('device_sip_latency_seconds_average', $data ?? [], null);
        $this->setIfExists('emergency_address_id', $data ?? [], null);
        $this->setIfExists('error_reading_from_endpoint_module', $data ?? [], null);
        $this->setIfExists('login_username', $data ?? [], null);
        $this->setIfExists('name_full_name', $data ?? [], null);
        $this->setIfExists('device_models_model', $data ?? [], null);
        $this->setIfExists('device_provisioning_mac_address', $data ?? [], null);
        $this->setIfExists('device_provisioning_registration_core_server', $data ?? [], null);
        $this->setIfExists('device_provisioning_sip_transport_protocol', $data ?? [], 'udp');
        $this->setIfExists('device_provisioning_username', $data ?? [], null);
        $this->setIfExists('device_provisioning_password', $data ?? [], null);
        $this->setIfExists('device_provisioning_line', $data ?? [], null);
        $this->setIfExists('device_provisioning_overrides', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['device'] === null) {
            $invalidProperties[] = "'device' can't be null";
        }
        $allowedValues = $this->getDeviceSipRegistrationStateAllowableValues();
        if (!is_null($this->container['device_sip_registration_state']) && !in_array($this->container['device_sip_registration_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'device_sip_registration_state', must be one of '%s'",
                $this->container['device_sip_registration_state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeviceSrtpEnabledAllowableValues();
        if (!is_null($this->container['device_srtp_enabled']) && !in_array($this->container['device_srtp_enabled'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'device_srtp_enabled', must be one of '%s'",
                $this->container['device_srtp_enabled'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeviceSipNatTraversalEnabledAllowableValues();
        if (!is_null($this->container['device_sip_nat_traversal_enabled']) && !in_array($this->container['device_sip_nat_traversal_enabled'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'device_sip_nat_traversal_enabled', must be one of '%s'",
                $this->container['device_sip_nat_traversal_enabled'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeviceProvisioningSipTransportProtocolAllowableValues();
        if (!is_null($this->container['device_provisioning_sip_transport_protocol']) && !in_array($this->container['device_provisioning_sip_transport_protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'device_provisioning_sip_transport_protocol', must be one of '%s'",
                $this->container['device_provisioning_sip_transport_protocol'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets synchronous
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\Synchronous|null
     */
    public function getSynchronous()
    {
        return $this->container['synchronous'];
    }

    /**
     * Sets synchronous
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\Synchronous|null $synchronous synchronous
     *
     * @return self
     */
    public function setSynchronous($synchronous)
    {
        if (is_null($synchronous)) {
            throw new \InvalidArgumentException('non-nullable synchronous cannot be null');
        }
        $this->container['synchronous'] = $synchronous;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string $device This is the \"device\" id which will be the first part of the device-sip-registration-uri which can be used to read specific device information.
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets device_sip_registration_uri
     *
     * @return string|null
     */
    public function getDeviceSipRegistrationUri()
    {
        return $this->container['device_sip_registration_uri'];
    }

    /**
     * Sets device_sip_registration_uri
     *
     * @param string|null $device_sip_registration_uri This read-only value is the full SIP uri and will often be sip:[device]@[domain]
     *
     * @return self
     */
    public function setDeviceSipRegistrationUri($device_sip_registration_uri)
    {
        if (is_null($device_sip_registration_uri)) {
            throw new \InvalidArgumentException('non-nullable device_sip_registration_uri cannot be null');
        }
        $this->container['device_sip_registration_uri'] = $device_sip_registration_uri;

        return $this;
    }

    /**
     * Gets device_sip_registration_state
     *
     * @return string|null
     */
    public function getDeviceSipRegistrationState()
    {
        return $this->container['device_sip_registration_state'];
    }

    /**
     * Sets device_sip_registration_state
     *
     * @param string|null $device_sip_registration_state This is the current registration status for the device. This value will be registered if its in the value time windoe
     *
     * @return self
     */
    public function setDeviceSipRegistrationState($device_sip_registration_state)
    {
        if (is_null($device_sip_registration_state)) {
            throw new \InvalidArgumentException('non-nullable device_sip_registration_state cannot be null');
        }
        $allowedValues = $this->getDeviceSipRegistrationStateAllowableValues();
        if (!in_array($device_sip_registration_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'device_sip_registration_state', must be one of '%s'",
                    $device_sip_registration_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['device_sip_registration_state'] = $device_sip_registration_state;

        return $this;
    }

    /**
     * Gets device_sip_registration_password
     *
     * @return string|null
     */
    public function getDeviceSipRegistrationPassword()
    {
        return $this->container['device_sip_registration_password'];
    }

    /**
     * Sets device_sip_registration_password
     *
     * @param string|null $device_sip_registration_password This is the password which would be used for device registration. If left unset on device create it will create a new random password with a default length of 16 characters.
     *
     * @return self
     */
    public function setDeviceSipRegistrationPassword($device_sip_registration_password)
    {
        if (is_null($device_sip_registration_password)) {
            throw new \InvalidArgumentException('non-nullable device_sip_registration_password cannot be null');
        }
        $this->container['device_sip_registration_password'] = $device_sip_registration_password;

        return $this;
    }

    /**
     * Gets caller_id_number_emergency
     *
     * @return string|null
     */
    public function getCallerIdNumberEmergency()
    {
        return $this->container['caller_id_number_emergency'];
    }

    /**
     * Sets caller_id_number_emergency
     *
     * @param string|null $caller_id_number_emergency This is a override value for emergency caller id value that would be specific to this device and would override the user's set value.
     *
     * @return self
     */
    public function setCallerIdNumberEmergency($caller_id_number_emergency)
    {
        if (is_null($caller_id_number_emergency)) {
            throw new \InvalidArgumentException('non-nullable caller_id_number_emergency cannot be null');
        }
        $this->container['caller_id_number_emergency'] = $caller_id_number_emergency;

        return $this;
    }

    /**
     * Gets device_force_notify_new_voicemails_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getDeviceForceNotifyNewVoicemailsEnabled()
    {
        return $this->container['device_force_notify_new_voicemails_enabled'];
    }

    /**
     * Sets device_force_notify_new_voicemails_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $device_force_notify_new_voicemails_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setDeviceForceNotifyNewVoicemailsEnabled($device_force_notify_new_voicemails_enabled)
    {
        if (is_null($device_force_notify_new_voicemails_enabled)) {
            throw new \InvalidArgumentException('non-nullable device_force_notify_new_voicemails_enabled cannot be null');
        }
        $this->container['device_force_notify_new_voicemails_enabled'] = $device_force_notify_new_voicemails_enabled;

        return $this;
    }

    /**
     * Gets device_level_call_recording_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getDeviceLevelCallRecordingEnabled()
    {
        return $this->container['device_level_call_recording_enabled'];
    }

    /**
     * Sets device_level_call_recording_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $device_level_call_recording_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setDeviceLevelCallRecordingEnabled($device_level_call_recording_enabled)
    {
        if (is_null($device_level_call_recording_enabled)) {
            throw new \InvalidArgumentException('non-nullable device_level_call_recording_enabled cannot be null');
        }
        $this->container['device_level_call_recording_enabled'] = $device_level_call_recording_enabled;

        return $this;
    }

    /**
     * Gets device_push_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null
     */
    public function getDevicePushEnabled()
    {
        return $this->container['device_push_enabled'];
    }

    /**
     * Sets device_push_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault|null $device_push_enabled When enabled this rule is available to be user though it may not be active as the timeframe might not match the current time or there could be other hihger priority timeframes.
     *
     * @return self
     */
    public function setDevicePushEnabled($device_push_enabled)
    {
        if (is_null($device_push_enabled)) {
            throw new \InvalidArgumentException('non-nullable device_push_enabled cannot be null');
        }
        $this->container['device_push_enabled'] = $device_push_enabled;

        return $this;
    }

    /**
     * Gets device_sip_registration_contact
     *
     * @return string|null
     */
    public function getDeviceSipRegistrationContact()
    {
        return $this->container['device_sip_registration_contact'];
    }

    /**
     * Sets device_sip_registration_contact
     *
     * @param string|null $device_sip_registration_contact This is the contact value for the device from the last successfull registration.
     *
     * @return self
     */
    public function setDeviceSipRegistrationContact($device_sip_registration_contact)
    {
        if (is_null($device_sip_registration_contact)) {
            throw new \InvalidArgumentException('non-nullable device_sip_registration_contact cannot be null');
        }
        $this->container['device_sip_registration_contact'] = $device_sip_registration_contact;

        return $this;
    }

    /**
     * Gets device_sip_registration_core_server
     *
     * @return string|null
     */
    public function getDeviceSipRegistrationCoreServer()
    {
        return $this->container['device_sip_registration_core_server'];
    }

    /**
     * Sets device_sip_registration_core_server
     *
     * @param string|null $device_sip_registration_core_server This is the hostname for which the last registration was completed.  This would be used to connect the device from on inbound call.
     *
     * @return self
     */
    public function setDeviceSipRegistrationCoreServer($device_sip_registration_core_server)
    {
        if (is_null($device_sip_registration_core_server)) {
            throw new \InvalidArgumentException('non-nullable device_sip_registration_core_server cannot be null');
        }
        $this->container['device_sip_registration_core_server'] = $device_sip_registration_core_server;

        return $this;
    }

    /**
     * Gets device_sip_registration_datetime
     *
     * @return \DateTime|null
     */
    public function getDeviceSipRegistrationDatetime()
    {
        return $this->container['device_sip_registration_datetime'];
    }

    /**
     * Sets device_sip_registration_datetime
     *
     * @param \DateTime|null $device_sip_registration_datetime This date-time will be the last registration time of the device. This time may be slightly delayed to improve replication throughput.
     *
     * @return self
     */
    public function setDeviceSipRegistrationDatetime($device_sip_registration_datetime)
    {
        if (is_null($device_sip_registration_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'device_sip_registration_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('device_sip_registration_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['device_sip_registration_datetime'] = $device_sip_registration_datetime;

        return $this;
    }

    /**
     * Gets device_sip_registration_expires_datetime
     *
     * @return \DateTime|null
     */
    public function getDeviceSipRegistrationExpiresDatetime()
    {
        return $this->container['device_sip_registration_expires_datetime'];
    }

    /**
     * Sets device_sip_registration_expires_datetime
     *
     * @param \DateTime|null $device_sip_registration_expires_datetime This date-time will be the time at which the device will be treated as unregisted and should be in the future for active registed devices.
     *
     * @return self
     */
    public function setDeviceSipRegistrationExpiresDatetime($device_sip_registration_expires_datetime)
    {
        if (is_null($device_sip_registration_expires_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'device_sip_registration_expires_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('device_sip_registration_expires_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['device_sip_registration_expires_datetime'] = $device_sip_registration_expires_datetime;

        return $this;
    }

    /**
     * Gets device_sip_registration_expiry_seconds
     *
     * @return int|null
     */
    public function getDeviceSipRegistrationExpirySeconds()
    {
        return $this->container['device_sip_registration_expiry_seconds'];
    }

    /**
     * Sets device_sip_registration_expiry_seconds
     *
     * @param int|null $device_sip_registration_expiry_seconds This is the requested re-register perior for the device. The device will be treated as unregistered if they do not register in this window + a system wide grace period.
     *
     * @return self
     */
    public function setDeviceSipRegistrationExpirySeconds($device_sip_registration_expiry_seconds)
    {
        if (is_null($device_sip_registration_expiry_seconds)) {
            throw new \InvalidArgumentException('non-nullable device_sip_registration_expiry_seconds cannot be null');
        }
        $this->container['device_sip_registration_expiry_seconds'] = $device_sip_registration_expiry_seconds;

        return $this;
    }

    /**
     * Gets device_sip_registration_ignore_for_presence_calculation
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getDeviceSipRegistrationIgnoreForPresenceCalculation()
    {
        return $this->container['device_sip_registration_ignore_for_presence_calculation'];
    }

    /**
     * Sets device_sip_registration_ignore_for_presence_calculation
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $device_sip_registration_ignore_for_presence_calculation This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setDeviceSipRegistrationIgnoreForPresenceCalculation($device_sip_registration_ignore_for_presence_calculation)
    {
        if (is_null($device_sip_registration_ignore_for_presence_calculation)) {
            throw new \InvalidArgumentException('non-nullable device_sip_registration_ignore_for_presence_calculation cannot be null');
        }
        $this->container['device_sip_registration_ignore_for_presence_calculation'] = $device_sip_registration_ignore_for_presence_calculation;

        return $this;
    }

    /**
     * Gets device_sip_registration_ignore_report_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getDeviceSipRegistrationIgnoreReportEnabled()
    {
        return $this->container['device_sip_registration_ignore_report_enabled'];
    }

    /**
     * Sets device_sip_registration_ignore_report_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $device_sip_registration_ignore_report_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setDeviceSipRegistrationIgnoreReportEnabled($device_sip_registration_ignore_report_enabled)
    {
        if (is_null($device_sip_registration_ignore_report_enabled)) {
            throw new \InvalidArgumentException('non-nullable device_sip_registration_ignore_report_enabled cannot be null');
        }
        $this->container['device_sip_registration_ignore_report_enabled'] = $device_sip_registration_ignore_report_enabled;

        return $this;
    }

    /**
     * Gets device_sip_registration_ip_address
     *
     * @return string|null
     */
    public function getDeviceSipRegistrationIpAddress()
    {
        return $this->container['device_sip_registration_ip_address'];
    }

    /**
     * Sets device_sip_registration_ip_address
     *
     * @param string|null $device_sip_registration_ip_address This is the read-only value is the IP:port for the last successfull registration.
     *
     * @return self
     */
    public function setDeviceSipRegistrationIpAddress($device_sip_registration_ip_address)
    {
        if (is_null($device_sip_registration_ip_address)) {
            throw new \InvalidArgumentException('non-nullable device_sip_registration_ip_address cannot be null');
        }
        $this->container['device_sip_registration_ip_address'] = $device_sip_registration_ip_address;

        return $this;
    }

    /**
     * Gets device_sip_registration_user_agent
     *
     * @return string|null
     */
    public function getDeviceSipRegistrationUserAgent()
    {
        return $this->container['device_sip_registration_user_agent'];
    }

    /**
     * Sets device_sip_registration_user_agent
     *
     * @param string|null $device_sip_registration_user_agent This is the read-only value for the user-agent used during the last successfully registration.
     *
     * @return self
     */
    public function setDeviceSipRegistrationUserAgent($device_sip_registration_user_agent)
    {
        if (is_null($device_sip_registration_user_agent)) {
            throw new \InvalidArgumentException('non-nullable device_sip_registration_user_agent cannot be null');
        }
        $this->container['device_sip_registration_user_agent'] = $device_sip_registration_user_agent;

        return $this;
    }

    /**
     * Gets device_sip_no_to_tag_in_cancel
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getDeviceSipNoToTagInCancel()
    {
        return $this->container['device_sip_no_to_tag_in_cancel'];
    }

    /**
     * Sets device_sip_no_to_tag_in_cancel
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $device_sip_no_to_tag_in_cancel This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setDeviceSipNoToTagInCancel($device_sip_no_to_tag_in_cancel)
    {
        if (is_null($device_sip_no_to_tag_in_cancel)) {
            throw new \InvalidArgumentException('non-nullable device_sip_no_to_tag_in_cancel cannot be null');
        }
        $this->container['device_sip_no_to_tag_in_cancel'] = $device_sip_no_to_tag_in_cancel;

        return $this;
    }

    /**
     * Gets device_srtp_enabled
     *
     * @return string|null
     */
    public function getDeviceSrtpEnabled()
    {
        return $this->container['device_srtp_enabled'];
    }

    /**
     * Sets device_srtp_enabled
     *
     * @param string|null $device_srtp_enabled This setting will enable SRTP (secure/encrypted audio) on the the device. Yes will force and \"opp
     *
     * @return self
     */
    public function setDeviceSrtpEnabled($device_srtp_enabled)
    {
        if (is_null($device_srtp_enabled)) {
            throw new \InvalidArgumentException('non-nullable device_srtp_enabled cannot be null');
        }
        $allowedValues = $this->getDeviceSrtpEnabledAllowableValues();
        if (!in_array($device_srtp_enabled, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'device_srtp_enabled', must be one of '%s'",
                    $device_srtp_enabled,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['device_srtp_enabled'] = $device_srtp_enabled;

        return $this;
    }

    /**
     * Gets auto_answer_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null
     */
    public function getAutoAnswerEnabled()
    {
        return $this->container['auto_answer_enabled'];
    }

    /**
     * Sets auto_answer_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringNoDefault|null $auto_answer_enabled This settings will control if the the parent feature is enabled.
     *
     * @return self
     */
    public function setAutoAnswerEnabled($auto_answer_enabled)
    {
        if (is_null($auto_answer_enabled)) {
            throw new \InvalidArgumentException('non-nullable auto_answer_enabled cannot be null');
        }
        $this->container['auto_answer_enabled'] = $auto_answer_enabled;

        return $this;
    }

    /**
     * Gets recording_configuration
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\RecordingConfiguration|null
     */
    public function getRecordingConfiguration()
    {
        return $this->container['recording_configuration'];
    }

    /**
     * Sets recording_configuration
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\RecordingConfiguration|null $recording_configuration recording_configuration
     *
     * @return self
     */
    public function setRecordingConfiguration($recording_configuration)
    {
        if (is_null($recording_configuration)) {
            throw new \InvalidArgumentException('non-nullable recording_configuration cannot be null');
        }
        $this->container['recording_configuration'] = $recording_configuration;

        return $this;
    }

    /**
     * Gets device_sip_allowed_user_agent
     *
     * @return string|null
     */
    public function getDeviceSipAllowedUserAgent()
    {
        return $this->container['device_sip_allowed_user_agent'];
    }

    /**
     * Sets device_sip_allowed_user_agent
     *
     * @param string|null $device_sip_allowed_user_agent This value can be used to restrict registration to a specific User Agent or partial match of User Agent.  This allows for an extra layer of secutiry if you know the expected user agent.
     *
     * @return self
     */
    public function setDeviceSipAllowedUserAgent($device_sip_allowed_user_agent)
    {
        if (is_null($device_sip_allowed_user_agent)) {
            throw new \InvalidArgumentException('non-nullable device_sip_allowed_user_agent cannot be null');
        }
        $this->container['device_sip_allowed_user_agent'] = $device_sip_allowed_user_agent;

        return $this;
    }

    /**
     * Gets device_sip_nat_traversal_enabled
     *
     * @return string|null
     */
    public function getDeviceSipNatTraversalEnabled()
    {
        return $this->container['device_sip_nat_traversal_enabled'];
    }

    /**
     * Sets device_sip_nat_traversal_enabled
     *
     * @param string|null $device_sip_nat_traversal_enabled This is the main nat transveral setting. In most all device cases \"automatic\" is the correct answe
     *
     * @return self
     */
    public function setDeviceSipNatTraversalEnabled($device_sip_nat_traversal_enabled)
    {
        if (is_null($device_sip_nat_traversal_enabled)) {
            throw new \InvalidArgumentException('non-nullable device_sip_nat_traversal_enabled cannot be null');
        }
        $allowedValues = $this->getDeviceSipNatTraversalEnabledAllowableValues();
        if (!in_array($device_sip_nat_traversal_enabled, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'device_sip_nat_traversal_enabled', must be one of '%s'",
                    $device_sip_nat_traversal_enabled,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['device_sip_nat_traversal_enabled'] = $device_sip_nat_traversal_enabled;

        return $this;
    }

    /**
     * Gets device_sip_latency_seconds_current
     *
     * @return float|null
     */
    public function getDeviceSipLatencySecondsCurrent()
    {
        return $this->container['device_sip_latency_seconds_current'];
    }

    /**
     * Sets device_sip_latency_seconds_current
     *
     * @param float|null $device_sip_latency_seconds_current This is the latency from the latest registration measured in seconds from the time the core sent a 407 challenge to the 200ok with Auth.
     *
     * @return self
     */
    public function setDeviceSipLatencySecondsCurrent($device_sip_latency_seconds_current)
    {
        if (is_null($device_sip_latency_seconds_current)) {
            throw new \InvalidArgumentException('non-nullable device_sip_latency_seconds_current cannot be null');
        }
        $this->container['device_sip_latency_seconds_current'] = $device_sip_latency_seconds_current;

        return $this;
    }

    /**
     * Gets device_sip_latency_seconds_average
     *
     * @return float|null
     */
    public function getDeviceSipLatencySecondsAverage()
    {
        return $this->container['device_sip_latency_seconds_average'];
    }

    /**
     * Sets device_sip_latency_seconds_average
     *
     * @param float|null $device_sip_latency_seconds_average This is the average of the last 5 registration attempts measured similiarly to device-sip-latency-seconds-current.
     *
     * @return self
     */
    public function setDeviceSipLatencySecondsAverage($device_sip_latency_seconds_average)
    {
        if (is_null($device_sip_latency_seconds_average)) {
            throw new \InvalidArgumentException('non-nullable device_sip_latency_seconds_average cannot be null');
        }
        $this->container['device_sip_latency_seconds_average'] = $device_sip_latency_seconds_average;

        return $this;
    }

    /**
     * Gets emergency_address_id
     *
     * @return string|null
     */
    public function getEmergencyAddressId()
    {
        return $this->container['emergency_address_id'];
    }

    /**
     * Sets emergency_address_id
     *
     * @param string|null $emergency_address_id This value if set will be the address-id specific to this device for emegeny calling
     *
     * @return self
     */
    public function setEmergencyAddressId($emergency_address_id)
    {
        if (is_null($emergency_address_id)) {
            array_push($this->openAPINullablesSetToNull, 'emergency_address_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emergency_address_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emergency_address_id'] = $emergency_address_id;

        return $this;
    }

    /**
     * Gets error_reading_from_endpoint_module
     *
     * @return string|null
     */
    public function getErrorReadingFromEndpointModule()
    {
        return $this->container['error_reading_from_endpoint_module'];
    }

    /**
     * Sets error_reading_from_endpoint_module
     *
     * @param string|null $error_reading_from_endpoint_module If yes, it means the API had an issue accessing the NDP for mac specific data
     *
     * @return self
     */
    public function setErrorReadingFromEndpointModule($error_reading_from_endpoint_module)
    {
        if (is_null($error_reading_from_endpoint_module)) {
            throw new \InvalidArgumentException('non-nullable error_reading_from_endpoint_module cannot be null');
        }
        $this->container['error_reading_from_endpoint_module'] = $error_reading_from_endpoint_module;

        return $this;
    }

    /**
     * Gets login_username
     *
     * @return string|null
     */
    public function getLoginUsername()
    {
        return $this->container['login_username'];
    }

    /**
     * Sets login_username
     *
     * @param string|null $login_username This is a read-only value of the user's login for the owner of the device.
     *
     * @return self
     */
    public function setLoginUsername($login_username)
    {
        if (is_null($login_username)) {
            throw new \InvalidArgumentException('non-nullable login_username cannot be null');
        }
        $this->container['login_username'] = $login_username;

        return $this;
    }

    /**
     * Gets name_full_name
     *
     * @return string|null
     */
    public function getNameFullName()
    {
        return $this->container['name_full_name'];
    }

    /**
     * Sets name_full_name
     *
     * @param string|null $name_full_name This is a read-only value of the user's full name for the owner of the device.
     *
     * @return self
     */
    public function setNameFullName($name_full_name)
    {
        if (is_null($name_full_name)) {
            throw new \InvalidArgumentException('non-nullable name_full_name cannot be null');
        }
        $this->container['name_full_name'] = $name_full_name;

        return $this;
    }

    /**
     * Gets device_models_model
     *
     * @return string|null
     */
    public function getDeviceModelsModel()
    {
        return $this->container['device_models_model'];
    }

    /**
     * Sets device_models_model
     *
     * @param string|null $device_models_model This is an optional model that when provided with device-provisioning-mac-address will link this device to the mac address in the device provisioning platform.
     *
     * @return self
     */
    public function setDeviceModelsModel($device_models_model)
    {
        if (is_null($device_models_model)) {
            throw new \InvalidArgumentException('non-nullable device_models_model cannot be null');
        }
        $this->container['device_models_model'] = $device_models_model;

        return $this;
    }

    /**
     * Gets device_provisioning_mac_address
     *
     * @return string|null
     */
    public function getDeviceProvisioningMacAddress()
    {
        return $this->container['device_provisioning_mac_address'];
    }

    /**
     * Sets device_provisioning_mac_address
     *
     * @param string|null $device_provisioning_mac_address This is the mac address that has this device linked to it. This field can be used to link a mac address on device create. Must also provide a device-models-model
     *
     * @return self
     */
    public function setDeviceProvisioningMacAddress($device_provisioning_mac_address)
    {
        if (is_null($device_provisioning_mac_address)) {
            throw new \InvalidArgumentException('non-nullable device_provisioning_mac_address cannot be null');
        }
        $this->container['device_provisioning_mac_address'] = $device_provisioning_mac_address;

        return $this;
    }

    /**
     * Gets device_provisioning_registration_core_server
     *
     * @return string|null
     */
    public function getDeviceProvisioningRegistrationCoreServer()
    {
        return $this->container['device_provisioning_registration_core_server'];
    }

    /**
     * Sets device_provisioning_registration_core_server
     *
     * @param string|null $device_provisioning_registration_core_server This is the SiPbx Servers primary server config from a list of valid
     *
     * @return self
     */
    public function setDeviceProvisioningRegistrationCoreServer($device_provisioning_registration_core_server)
    {
        if (is_null($device_provisioning_registration_core_server)) {
            throw new \InvalidArgumentException('non-nullable device_provisioning_registration_core_server cannot be null');
        }
        $this->container['device_provisioning_registration_core_server'] = $device_provisioning_registration_core_server;

        return $this;
    }

    /**
     * Gets device_provisioning_sip_transport_protocol
     *
     * @return string|null
     */
    public function getDeviceProvisioningSipTransportProtocol()
    {
        return $this->container['device_provisioning_sip_transport_protocol'];
    }

    /**
     * Sets device_provisioning_sip_transport_protocol
     *
     * @param string|null $device_provisioning_sip_transport_protocol This is the transport that will be requested when provising the device.
     *
     * @return self
     */
    public function setDeviceProvisioningSipTransportProtocol($device_provisioning_sip_transport_protocol)
    {
        if (is_null($device_provisioning_sip_transport_protocol)) {
            throw new \InvalidArgumentException('non-nullable device_provisioning_sip_transport_protocol cannot be null');
        }
        $allowedValues = $this->getDeviceProvisioningSipTransportProtocolAllowableValues();
        if (!in_array($device_provisioning_sip_transport_protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'device_provisioning_sip_transport_protocol', must be one of '%s'",
                    $device_provisioning_sip_transport_protocol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['device_provisioning_sip_transport_protocol'] = $device_provisioning_sip_transport_protocol;

        return $this;
    }

    /**
     * Gets device_provisioning_username
     *
     * @return string|null
     */
    public function getDeviceProvisioningUsername()
    {
        return $this->container['device_provisioning_username'];
    }

    /**
     * Sets device_provisioning_username
     *
     * @param string|null $device_provisioning_username The provisioning username for the request to authenticate the configuration request.
     *
     * @return self
     */
    public function setDeviceProvisioningUsername($device_provisioning_username)
    {
        if (is_null($device_provisioning_username)) {
            array_push($this->openAPINullablesSetToNull, 'device_provisioning_username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('device_provisioning_username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['device_provisioning_username'] = $device_provisioning_username;

        return $this;
    }

    /**
     * Gets device_provisioning_password
     *
     * @return string|null
     */
    public function getDeviceProvisioningPassword()
    {
        return $this->container['device_provisioning_password'];
    }

    /**
     * Sets device_provisioning_password
     *
     * @param string|null $device_provisioning_password The provisioning password for the request to authenticate the configuration request.
     *
     * @return self
     */
    public function setDeviceProvisioningPassword($device_provisioning_password)
    {
        if (is_null($device_provisioning_password)) {
            array_push($this->openAPINullablesSetToNull, 'device_provisioning_password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('device_provisioning_password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['device_provisioning_password'] = $device_provisioning_password;

        return $this;
    }

    /**
     * Gets device_provisioning_line
     *
     * @return int|null
     */
    public function getDeviceProvisioningLine()
    {
        return $this->container['device_provisioning_line'];
    }

    /**
     * Sets device_provisioning_line
     *
     * @param int|null $device_provisioning_line Optional setting to select which line is used on the device when provisionined with device-models-model and device-provisioning-mac-address
     *
     * @return self
     */
    public function setDeviceProvisioningLine($device_provisioning_line)
    {
        if (is_null($device_provisioning_line)) {
            throw new \InvalidArgumentException('non-nullable device_provisioning_line cannot be null');
        }
        $this->container['device_provisioning_line'] = $device_provisioning_line;

        return $this;
    }

    /**
     * Gets device_provisioning_overrides
     *
     * @return string|null
     */
    public function getDeviceProvisioningOverrides()
    {
        return $this->container['device_provisioning_overrides'];
    }

    /**
     * Sets device_provisioning_overrides
     *
     * @param string|null $device_provisioning_overrides This is the overrides set for the mac address in the provisioning server on the mac linked to this device.
     *
     * @return self
     */
    public function setDeviceProvisioningOverrides($device_provisioning_overrides)
    {
        if (is_null($device_provisioning_overrides)) {
            throw new \InvalidArgumentException('non-nullable device_provisioning_overrides cannot be null');
        }
        $this->container['device_provisioning_overrides'] = $device_provisioning_overrides;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


