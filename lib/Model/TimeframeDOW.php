<?php
/**
 * TimeframeDOW
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * TimeframeDOW Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeframeDOW implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeframeDOW';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'timeframe_id' => 'string',
        'timeframe_parent_id' => 'string',
        'ordinal_order' => 'float',
        'timeframe_weekly_sunday_begin_time_1' => 'string',
        'timeframe_weekly_sunday_end_time_1' => 'string',
        'timeframe_weekly_sunday_begin_time_2' => 'string',
        'timeframe_weekly_sunday_end_time_2' => 'string',
        'timeframe_weekly_monday_begin_time_1' => 'string',
        'timeframe_weekly_monday_end_time_1' => 'string',
        'timeframe_weekly_monday_begin_time_2' => 'string',
        'timeframe_weekly_monday_end_time_2' => 'string',
        'timeframe_weekly_tuesday_begin_time_1' => 'string',
        'timeframe_weekly_tuesday_end_time_1' => 'string',
        'timeframe_weekly_tuesday_begin_time_2' => 'string',
        'timeframe_weekly_tuesday_end_time_2' => 'string',
        'timeframe_weekly_wednesday_begin_time_1' => 'string',
        'timeframe_weekly_wednesday_end_time_1' => 'string',
        'timeframe_weekly_wednesday_begin_time_2' => 'string',
        'timeframe_weekly_wednesday_end_time_2' => 'string',
        'timeframe_weekly_thursday_begin_time_1' => 'string',
        'timeframe_weekly_thursday_end_time_1' => 'string',
        'timeframe_weekly_thursday_begin_time_2' => 'string',
        'timeframe_weekly_thursday_end_time_2' => 'string',
        'timeframe_weekly_friday_begin_time_1' => 'string',
        'timeframe_weekly_friday_end_time_1' => 'string',
        'timeframe_weekly_friday_begin_time_2' => 'string',
        'timeframe_weekly_friday_end_time_2' => 'string',
        'timeframe_weekly_saturday_begin_time_1' => 'string',
        'timeframe_weekly_saturday_end_time_1' => 'string',
        'timeframe_weekly_saturday_begin_time_2' => 'string',
        'timeframe_weekly_saturday_end_time_2' => 'string',
        'timeframe_recurrence_type' => 'string',
        'timeframe_recurrence_begin_date' => 'string',
        'timeframe_recurrence_custom_interval' => 'string',
        'timeframe_recurrence_custom_interval_count' => 'string',
        'timeframe_recurrence_custom_interval_option' => 'string',
        'timeframe_recurrence_end_option' => 'string',
        'timeframe_recurrence_end_date' => 'string',
        'timeframe_expiry_datetime' => 'string',
        'domain' => 'string',
        'timeframe_next_observance_datetime' => 'float[]',
        'timeframe_recurrence_rrule' => 'string',
        'timeframe_is_v1' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'timeframe_id' => null,
        'timeframe_parent_id' => null,
        'ordinal_order' => null,
        'timeframe_weekly_sunday_begin_time_1' => null,
        'timeframe_weekly_sunday_end_time_1' => null,
        'timeframe_weekly_sunday_begin_time_2' => null,
        'timeframe_weekly_sunday_end_time_2' => null,
        'timeframe_weekly_monday_begin_time_1' => null,
        'timeframe_weekly_monday_end_time_1' => null,
        'timeframe_weekly_monday_begin_time_2' => null,
        'timeframe_weekly_monday_end_time_2' => null,
        'timeframe_weekly_tuesday_begin_time_1' => null,
        'timeframe_weekly_tuesday_end_time_1' => null,
        'timeframe_weekly_tuesday_begin_time_2' => null,
        'timeframe_weekly_tuesday_end_time_2' => null,
        'timeframe_weekly_wednesday_begin_time_1' => null,
        'timeframe_weekly_wednesday_end_time_1' => null,
        'timeframe_weekly_wednesday_begin_time_2' => null,
        'timeframe_weekly_wednesday_end_time_2' => null,
        'timeframe_weekly_thursday_begin_time_1' => null,
        'timeframe_weekly_thursday_end_time_1' => null,
        'timeframe_weekly_thursday_begin_time_2' => null,
        'timeframe_weekly_thursday_end_time_2' => null,
        'timeframe_weekly_friday_begin_time_1' => null,
        'timeframe_weekly_friday_end_time_1' => null,
        'timeframe_weekly_friday_begin_time_2' => null,
        'timeframe_weekly_friday_end_time_2' => null,
        'timeframe_weekly_saturday_begin_time_1' => null,
        'timeframe_weekly_saturday_end_time_1' => null,
        'timeframe_weekly_saturday_begin_time_2' => null,
        'timeframe_weekly_saturday_end_time_2' => null,
        'timeframe_recurrence_type' => null,
        'timeframe_recurrence_begin_date' => null,
        'timeframe_recurrence_custom_interval' => null,
        'timeframe_recurrence_custom_interval_count' => null,
        'timeframe_recurrence_custom_interval_option' => null,
        'timeframe_recurrence_end_option' => null,
        'timeframe_recurrence_end_date' => null,
        'timeframe_expiry_datetime' => null,
        'domain' => null,
        'timeframe_next_observance_datetime' => null,
        'timeframe_recurrence_rrule' => null,
        'timeframe_is_v1' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'timeframe_id' => false,
        'timeframe_parent_id' => false,
        'ordinal_order' => false,
        'timeframe_weekly_sunday_begin_time_1' => false,
        'timeframe_weekly_sunday_end_time_1' => false,
        'timeframe_weekly_sunday_begin_time_2' => false,
        'timeframe_weekly_sunday_end_time_2' => false,
        'timeframe_weekly_monday_begin_time_1' => false,
        'timeframe_weekly_monday_end_time_1' => false,
        'timeframe_weekly_monday_begin_time_2' => false,
        'timeframe_weekly_monday_end_time_2' => false,
        'timeframe_weekly_tuesday_begin_time_1' => false,
        'timeframe_weekly_tuesday_end_time_1' => false,
        'timeframe_weekly_tuesday_begin_time_2' => false,
        'timeframe_weekly_tuesday_end_time_2' => false,
        'timeframe_weekly_wednesday_begin_time_1' => false,
        'timeframe_weekly_wednesday_end_time_1' => false,
        'timeframe_weekly_wednesday_begin_time_2' => false,
        'timeframe_weekly_wednesday_end_time_2' => false,
        'timeframe_weekly_thursday_begin_time_1' => false,
        'timeframe_weekly_thursday_end_time_1' => false,
        'timeframe_weekly_thursday_begin_time_2' => false,
        'timeframe_weekly_thursday_end_time_2' => false,
        'timeframe_weekly_friday_begin_time_1' => false,
        'timeframe_weekly_friday_end_time_1' => false,
        'timeframe_weekly_friday_begin_time_2' => false,
        'timeframe_weekly_friday_end_time_2' => false,
        'timeframe_weekly_saturday_begin_time_1' => false,
        'timeframe_weekly_saturday_end_time_1' => false,
        'timeframe_weekly_saturday_begin_time_2' => false,
        'timeframe_weekly_saturday_end_time_2' => false,
        'timeframe_recurrence_type' => false,
        'timeframe_recurrence_begin_date' => false,
        'timeframe_recurrence_custom_interval' => false,
        'timeframe_recurrence_custom_interval_count' => false,
        'timeframe_recurrence_custom_interval_option' => false,
        'timeframe_recurrence_end_option' => false,
        'timeframe_recurrence_end_date' => false,
        'timeframe_expiry_datetime' => false,
        'domain' => false,
        'timeframe_next_observance_datetime' => false,
        'timeframe_recurrence_rrule' => true,
        'timeframe_is_v1' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timeframe_id' => 'timeframe-id',
        'timeframe_parent_id' => 'timeframe-parent-id',
        'ordinal_order' => 'ordinal-order',
        'timeframe_weekly_sunday_begin_time_1' => 'timeframe-weekly-sunday-begin-time-1',
        'timeframe_weekly_sunday_end_time_1' => 'timeframe-weekly-sunday-end-time-1',
        'timeframe_weekly_sunday_begin_time_2' => 'timeframe-weekly-sunday-begin-time-2',
        'timeframe_weekly_sunday_end_time_2' => 'timeframe-weekly-sunday-end-time-2',
        'timeframe_weekly_monday_begin_time_1' => 'timeframe-weekly-monday-begin-time-1',
        'timeframe_weekly_monday_end_time_1' => 'timeframe-weekly-monday-end-time-1',
        'timeframe_weekly_monday_begin_time_2' => 'timeframe-weekly-monday-begin-time-2',
        'timeframe_weekly_monday_end_time_2' => 'timeframe-weekly-monday-end-time-2',
        'timeframe_weekly_tuesday_begin_time_1' => 'timeframe-weekly-tuesday-begin-time-1',
        'timeframe_weekly_tuesday_end_time_1' => 'timeframe-weekly-tuesday-end-time-1',
        'timeframe_weekly_tuesday_begin_time_2' => 'timeframe-weekly-tuesday-begin-time-2',
        'timeframe_weekly_tuesday_end_time_2' => 'timeframe-weekly-tuesday-end-time-2',
        'timeframe_weekly_wednesday_begin_time_1' => 'timeframe-weekly-wednesday-begin-time-1',
        'timeframe_weekly_wednesday_end_time_1' => 'timeframe-weekly-wednesday-end-time-1',
        'timeframe_weekly_wednesday_begin_time_2' => 'timeframe-weekly-wednesday-begin-time-2',
        'timeframe_weekly_wednesday_end_time_2' => 'timeframe-weekly-wednesday-end-time-2',
        'timeframe_weekly_thursday_begin_time_1' => 'timeframe-weekly-thursday-begin-time-1',
        'timeframe_weekly_thursday_end_time_1' => 'timeframe-weekly-thursday-end-time-1',
        'timeframe_weekly_thursday_begin_time_2' => 'timeframe-weekly-thursday-begin-time-2',
        'timeframe_weekly_thursday_end_time_2' => 'timeframe-weekly-thursday-end-time-2',
        'timeframe_weekly_friday_begin_time_1' => 'timeframe-weekly-friday-begin-time-1',
        'timeframe_weekly_friday_end_time_1' => 'timeframe-weekly-friday-end-time-1',
        'timeframe_weekly_friday_begin_time_2' => 'timeframe-weekly-friday-begin-time-2',
        'timeframe_weekly_friday_end_time_2' => 'timeframe-weekly-friday-end-time-2',
        'timeframe_weekly_saturday_begin_time_1' => 'timeframe-weekly-saturday-begin-time-1',
        'timeframe_weekly_saturday_end_time_1' => 'timeframe-weekly-saturday-end-time-1',
        'timeframe_weekly_saturday_begin_time_2' => 'timeframe-weekly-saturday-begin-time-2',
        'timeframe_weekly_saturday_end_time_2' => 'timeframe-weekly-saturday-end-time-2',
        'timeframe_recurrence_type' => 'timeframe-recurrence-type',
        'timeframe_recurrence_begin_date' => 'timeframe-recurrence-begin-date',
        'timeframe_recurrence_custom_interval' => 'timeframe-recurrence-custom-interval',
        'timeframe_recurrence_custom_interval_count' => 'timeframe-recurrence-custom-interval-count',
        'timeframe_recurrence_custom_interval_option' => 'timeframe-recurrence-custom-interval-option',
        'timeframe_recurrence_end_option' => 'timeframe-recurrence-end-option',
        'timeframe_recurrence_end_date' => 'timeframe-recurrence-end-date',
        'timeframe_expiry_datetime' => 'timeframe-expiry-datetime',
        'domain' => 'domain',
        'timeframe_next_observance_datetime' => 'timeframe-next-observance-datetime',
        'timeframe_recurrence_rrule' => 'timeframe-recurrence-rrule',
        'timeframe_is_v1' => 'timeframe-is-v1'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timeframe_id' => 'setTimeframeId',
        'timeframe_parent_id' => 'setTimeframeParentId',
        'ordinal_order' => 'setOrdinalOrder',
        'timeframe_weekly_sunday_begin_time_1' => 'setTimeframeWeeklySundayBeginTime1',
        'timeframe_weekly_sunday_end_time_1' => 'setTimeframeWeeklySundayEndTime1',
        'timeframe_weekly_sunday_begin_time_2' => 'setTimeframeWeeklySundayBeginTime2',
        'timeframe_weekly_sunday_end_time_2' => 'setTimeframeWeeklySundayEndTime2',
        'timeframe_weekly_monday_begin_time_1' => 'setTimeframeWeeklyMondayBeginTime1',
        'timeframe_weekly_monday_end_time_1' => 'setTimeframeWeeklyMondayEndTime1',
        'timeframe_weekly_monday_begin_time_2' => 'setTimeframeWeeklyMondayBeginTime2',
        'timeframe_weekly_monday_end_time_2' => 'setTimeframeWeeklyMondayEndTime2',
        'timeframe_weekly_tuesday_begin_time_1' => 'setTimeframeWeeklyTuesdayBeginTime1',
        'timeframe_weekly_tuesday_end_time_1' => 'setTimeframeWeeklyTuesdayEndTime1',
        'timeframe_weekly_tuesday_begin_time_2' => 'setTimeframeWeeklyTuesdayBeginTime2',
        'timeframe_weekly_tuesday_end_time_2' => 'setTimeframeWeeklyTuesdayEndTime2',
        'timeframe_weekly_wednesday_begin_time_1' => 'setTimeframeWeeklyWednesdayBeginTime1',
        'timeframe_weekly_wednesday_end_time_1' => 'setTimeframeWeeklyWednesdayEndTime1',
        'timeframe_weekly_wednesday_begin_time_2' => 'setTimeframeWeeklyWednesdayBeginTime2',
        'timeframe_weekly_wednesday_end_time_2' => 'setTimeframeWeeklyWednesdayEndTime2',
        'timeframe_weekly_thursday_begin_time_1' => 'setTimeframeWeeklyThursdayBeginTime1',
        'timeframe_weekly_thursday_end_time_1' => 'setTimeframeWeeklyThursdayEndTime1',
        'timeframe_weekly_thursday_begin_time_2' => 'setTimeframeWeeklyThursdayBeginTime2',
        'timeframe_weekly_thursday_end_time_2' => 'setTimeframeWeeklyThursdayEndTime2',
        'timeframe_weekly_friday_begin_time_1' => 'setTimeframeWeeklyFridayBeginTime1',
        'timeframe_weekly_friday_end_time_1' => 'setTimeframeWeeklyFridayEndTime1',
        'timeframe_weekly_friday_begin_time_2' => 'setTimeframeWeeklyFridayBeginTime2',
        'timeframe_weekly_friday_end_time_2' => 'setTimeframeWeeklyFridayEndTime2',
        'timeframe_weekly_saturday_begin_time_1' => 'setTimeframeWeeklySaturdayBeginTime1',
        'timeframe_weekly_saturday_end_time_1' => 'setTimeframeWeeklySaturdayEndTime1',
        'timeframe_weekly_saturday_begin_time_2' => 'setTimeframeWeeklySaturdayBeginTime2',
        'timeframe_weekly_saturday_end_time_2' => 'setTimeframeWeeklySaturdayEndTime2',
        'timeframe_recurrence_type' => 'setTimeframeRecurrenceType',
        'timeframe_recurrence_begin_date' => 'setTimeframeRecurrenceBeginDate',
        'timeframe_recurrence_custom_interval' => 'setTimeframeRecurrenceCustomInterval',
        'timeframe_recurrence_custom_interval_count' => 'setTimeframeRecurrenceCustomIntervalCount',
        'timeframe_recurrence_custom_interval_option' => 'setTimeframeRecurrenceCustomIntervalOption',
        'timeframe_recurrence_end_option' => 'setTimeframeRecurrenceEndOption',
        'timeframe_recurrence_end_date' => 'setTimeframeRecurrenceEndDate',
        'timeframe_expiry_datetime' => 'setTimeframeExpiryDatetime',
        'domain' => 'setDomain',
        'timeframe_next_observance_datetime' => 'setTimeframeNextObservanceDatetime',
        'timeframe_recurrence_rrule' => 'setTimeframeRecurrenceRrule',
        'timeframe_is_v1' => 'setTimeframeIsV1'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timeframe_id' => 'getTimeframeId',
        'timeframe_parent_id' => 'getTimeframeParentId',
        'ordinal_order' => 'getOrdinalOrder',
        'timeframe_weekly_sunday_begin_time_1' => 'getTimeframeWeeklySundayBeginTime1',
        'timeframe_weekly_sunday_end_time_1' => 'getTimeframeWeeklySundayEndTime1',
        'timeframe_weekly_sunday_begin_time_2' => 'getTimeframeWeeklySundayBeginTime2',
        'timeframe_weekly_sunday_end_time_2' => 'getTimeframeWeeklySundayEndTime2',
        'timeframe_weekly_monday_begin_time_1' => 'getTimeframeWeeklyMondayBeginTime1',
        'timeframe_weekly_monday_end_time_1' => 'getTimeframeWeeklyMondayEndTime1',
        'timeframe_weekly_monday_begin_time_2' => 'getTimeframeWeeklyMondayBeginTime2',
        'timeframe_weekly_monday_end_time_2' => 'getTimeframeWeeklyMondayEndTime2',
        'timeframe_weekly_tuesday_begin_time_1' => 'getTimeframeWeeklyTuesdayBeginTime1',
        'timeframe_weekly_tuesday_end_time_1' => 'getTimeframeWeeklyTuesdayEndTime1',
        'timeframe_weekly_tuesday_begin_time_2' => 'getTimeframeWeeklyTuesdayBeginTime2',
        'timeframe_weekly_tuesday_end_time_2' => 'getTimeframeWeeklyTuesdayEndTime2',
        'timeframe_weekly_wednesday_begin_time_1' => 'getTimeframeWeeklyWednesdayBeginTime1',
        'timeframe_weekly_wednesday_end_time_1' => 'getTimeframeWeeklyWednesdayEndTime1',
        'timeframe_weekly_wednesday_begin_time_2' => 'getTimeframeWeeklyWednesdayBeginTime2',
        'timeframe_weekly_wednesday_end_time_2' => 'getTimeframeWeeklyWednesdayEndTime2',
        'timeframe_weekly_thursday_begin_time_1' => 'getTimeframeWeeklyThursdayBeginTime1',
        'timeframe_weekly_thursday_end_time_1' => 'getTimeframeWeeklyThursdayEndTime1',
        'timeframe_weekly_thursday_begin_time_2' => 'getTimeframeWeeklyThursdayBeginTime2',
        'timeframe_weekly_thursday_end_time_2' => 'getTimeframeWeeklyThursdayEndTime2',
        'timeframe_weekly_friday_begin_time_1' => 'getTimeframeWeeklyFridayBeginTime1',
        'timeframe_weekly_friday_end_time_1' => 'getTimeframeWeeklyFridayEndTime1',
        'timeframe_weekly_friday_begin_time_2' => 'getTimeframeWeeklyFridayBeginTime2',
        'timeframe_weekly_friday_end_time_2' => 'getTimeframeWeeklyFridayEndTime2',
        'timeframe_weekly_saturday_begin_time_1' => 'getTimeframeWeeklySaturdayBeginTime1',
        'timeframe_weekly_saturday_end_time_1' => 'getTimeframeWeeklySaturdayEndTime1',
        'timeframe_weekly_saturday_begin_time_2' => 'getTimeframeWeeklySaturdayBeginTime2',
        'timeframe_weekly_saturday_end_time_2' => 'getTimeframeWeeklySaturdayEndTime2',
        'timeframe_recurrence_type' => 'getTimeframeRecurrenceType',
        'timeframe_recurrence_begin_date' => 'getTimeframeRecurrenceBeginDate',
        'timeframe_recurrence_custom_interval' => 'getTimeframeRecurrenceCustomInterval',
        'timeframe_recurrence_custom_interval_count' => 'getTimeframeRecurrenceCustomIntervalCount',
        'timeframe_recurrence_custom_interval_option' => 'getTimeframeRecurrenceCustomIntervalOption',
        'timeframe_recurrence_end_option' => 'getTimeframeRecurrenceEndOption',
        'timeframe_recurrence_end_date' => 'getTimeframeRecurrenceEndDate',
        'timeframe_expiry_datetime' => 'getTimeframeExpiryDatetime',
        'domain' => 'getDomain',
        'timeframe_next_observance_datetime' => 'getTimeframeNextObservanceDatetime',
        'timeframe_recurrence_rrule' => 'getTimeframeRecurrenceRrule',
        'timeframe_is_v1' => 'getTimeframeIsV1'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('timeframe_id', $data ?? [], null);
        $this->setIfExists('timeframe_parent_id', $data ?? [], null);
        $this->setIfExists('ordinal_order', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_sunday_begin_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_sunday_end_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_sunday_begin_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_sunday_end_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_monday_begin_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_monday_end_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_monday_begin_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_monday_end_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_tuesday_begin_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_tuesday_end_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_tuesday_begin_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_tuesday_end_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_wednesday_begin_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_wednesday_end_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_wednesday_begin_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_wednesday_end_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_thursday_begin_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_thursday_end_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_thursday_begin_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_thursday_end_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_friday_begin_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_friday_end_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_friday_begin_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_friday_end_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_saturday_begin_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_saturday_end_time_1', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_saturday_begin_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_weekly_saturday_end_time_2', $data ?? [], null);
        $this->setIfExists('timeframe_recurrence_type', $data ?? [], null);
        $this->setIfExists('timeframe_recurrence_begin_date', $data ?? [], null);
        $this->setIfExists('timeframe_recurrence_custom_interval', $data ?? [], null);
        $this->setIfExists('timeframe_recurrence_custom_interval_count', $data ?? [], null);
        $this->setIfExists('timeframe_recurrence_custom_interval_option', $data ?? [], null);
        $this->setIfExists('timeframe_recurrence_end_option', $data ?? [], null);
        $this->setIfExists('timeframe_recurrence_end_date', $data ?? [], null);
        $this->setIfExists('timeframe_expiry_datetime', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('timeframe_next_observance_datetime', $data ?? [], null);
        $this->setIfExists('timeframe_recurrence_rrule', $data ?? [], null);
        $this->setIfExists('timeframe_is_v1', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timeframe_recurrence_type'] === null) {
            $invalidProperties[] = "'timeframe_recurrence_type' can't be null";
        }
        if ($this->container['timeframe_recurrence_begin_date'] === null) {
            $invalidProperties[] = "'timeframe_recurrence_begin_date' can't be null";
        }
        if ($this->container['timeframe_recurrence_custom_interval'] === null) {
            $invalidProperties[] = "'timeframe_recurrence_custom_interval' can't be null";
        }
        if ($this->container['timeframe_recurrence_custom_interval_count'] === null) {
            $invalidProperties[] = "'timeframe_recurrence_custom_interval_count' can't be null";
        }
        if ($this->container['timeframe_recurrence_custom_interval_option'] === null) {
            $invalidProperties[] = "'timeframe_recurrence_custom_interval_option' can't be null";
        }
        if ($this->container['timeframe_recurrence_end_option'] === null) {
            $invalidProperties[] = "'timeframe_recurrence_end_option' can't be null";
        }
        if ($this->container['timeframe_recurrence_end_date'] === null) {
            $invalidProperties[] = "'timeframe_recurrence_end_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timeframe_id
     *
     * @return string|null
     */
    public function getTimeframeId()
    {
        return $this->container['timeframe_id'];
    }

    /**
     * Sets timeframe_id
     *
     * @param string|null $timeframe_id timeframe_id
     *
     * @return self
     */
    public function setTimeframeId($timeframe_id)
    {
        if (is_null($timeframe_id)) {
            throw new \InvalidArgumentException('non-nullable timeframe_id cannot be null');
        }
        $this->container['timeframe_id'] = $timeframe_id;

        return $this;
    }

    /**
     * Gets timeframe_parent_id
     *
     * @return string|null
     */
    public function getTimeframeParentId()
    {
        return $this->container['timeframe_parent_id'];
    }

    /**
     * Sets timeframe_parent_id
     *
     * @param string|null $timeframe_parent_id timeframe_parent_id
     *
     * @return self
     */
    public function setTimeframeParentId($timeframe_parent_id)
    {
        if (is_null($timeframe_parent_id)) {
            throw new \InvalidArgumentException('non-nullable timeframe_parent_id cannot be null');
        }
        $this->container['timeframe_parent_id'] = $timeframe_parent_id;

        return $this;
    }

    /**
     * Gets ordinal_order
     *
     * @return float|null
     */
    public function getOrdinalOrder()
    {
        return $this->container['ordinal_order'];
    }

    /**
     * Sets ordinal_order
     *
     * @param float|null $ordinal_order ordinal_order
     *
     * @return self
     */
    public function setOrdinalOrder($ordinal_order)
    {
        if (is_null($ordinal_order)) {
            throw new \InvalidArgumentException('non-nullable ordinal_order cannot be null');
        }
        $this->container['ordinal_order'] = $ordinal_order;

        return $this;
    }

    /**
     * Gets timeframe_weekly_sunday_begin_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklySundayBeginTime1()
    {
        return $this->container['timeframe_weekly_sunday_begin_time_1'];
    }

    /**
     * Sets timeframe_weekly_sunday_begin_time_1
     *
     * @param string|null $timeframe_weekly_sunday_begin_time_1 Beginning of the first time period during which the time frame will take effect on Sundays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklySundayBeginTime1($timeframe_weekly_sunday_begin_time_1)
    {
        if (is_null($timeframe_weekly_sunday_begin_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_sunday_begin_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_sunday_begin_time_1'] = $timeframe_weekly_sunday_begin_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_sunday_end_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklySundayEndTime1()
    {
        return $this->container['timeframe_weekly_sunday_end_time_1'];
    }

    /**
     * Sets timeframe_weekly_sunday_end_time_1
     *
     * @param string|null $timeframe_weekly_sunday_end_time_1 End of the first time period during which the time frame will take effect on Sundays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklySundayEndTime1($timeframe_weekly_sunday_end_time_1)
    {
        if (is_null($timeframe_weekly_sunday_end_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_sunday_end_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_sunday_end_time_1'] = $timeframe_weekly_sunday_end_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_sunday_begin_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklySundayBeginTime2()
    {
        return $this->container['timeframe_weekly_sunday_begin_time_2'];
    }

    /**
     * Sets timeframe_weekly_sunday_begin_time_2
     *
     * @param string|null $timeframe_weekly_sunday_begin_time_2 Beginning of the second time period, if there is one, during which the time frame will take effect on Sundays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklySundayBeginTime2($timeframe_weekly_sunday_begin_time_2)
    {
        if (is_null($timeframe_weekly_sunday_begin_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_sunday_begin_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_sunday_begin_time_2'] = $timeframe_weekly_sunday_begin_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_sunday_end_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklySundayEndTime2()
    {
        return $this->container['timeframe_weekly_sunday_end_time_2'];
    }

    /**
     * Sets timeframe_weekly_sunday_end_time_2
     *
     * @param string|null $timeframe_weekly_sunday_end_time_2 End of the second time period, if there is one, during which the time frame will take effect on Sundays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklySundayEndTime2($timeframe_weekly_sunday_end_time_2)
    {
        if (is_null($timeframe_weekly_sunday_end_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_sunday_end_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_sunday_end_time_2'] = $timeframe_weekly_sunday_end_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_monday_begin_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklyMondayBeginTime1()
    {
        return $this->container['timeframe_weekly_monday_begin_time_1'];
    }

    /**
     * Sets timeframe_weekly_monday_begin_time_1
     *
     * @param string|null $timeframe_weekly_monday_begin_time_1 Beginning of the first time period during which the time frame will take effect on Mondays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyMondayBeginTime1($timeframe_weekly_monday_begin_time_1)
    {
        if (is_null($timeframe_weekly_monday_begin_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_monday_begin_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_monday_begin_time_1'] = $timeframe_weekly_monday_begin_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_monday_end_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklyMondayEndTime1()
    {
        return $this->container['timeframe_weekly_monday_end_time_1'];
    }

    /**
     * Sets timeframe_weekly_monday_end_time_1
     *
     * @param string|null $timeframe_weekly_monday_end_time_1 End of the first time period during which the time frame will take effect on Mondays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyMondayEndTime1($timeframe_weekly_monday_end_time_1)
    {
        if (is_null($timeframe_weekly_monday_end_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_monday_end_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_monday_end_time_1'] = $timeframe_weekly_monday_end_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_monday_begin_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklyMondayBeginTime2()
    {
        return $this->container['timeframe_weekly_monday_begin_time_2'];
    }

    /**
     * Sets timeframe_weekly_monday_begin_time_2
     *
     * @param string|null $timeframe_weekly_monday_begin_time_2 Beginning of the second time period, if there is one, during which the time frame will take effect on Mondays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyMondayBeginTime2($timeframe_weekly_monday_begin_time_2)
    {
        if (is_null($timeframe_weekly_monday_begin_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_monday_begin_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_monday_begin_time_2'] = $timeframe_weekly_monday_begin_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_monday_end_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklyMondayEndTime2()
    {
        return $this->container['timeframe_weekly_monday_end_time_2'];
    }

    /**
     * Sets timeframe_weekly_monday_end_time_2
     *
     * @param string|null $timeframe_weekly_monday_end_time_2 End of the second time period, if there is one, during which the time frame will take effect on Mondays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyMondayEndTime2($timeframe_weekly_monday_end_time_2)
    {
        if (is_null($timeframe_weekly_monday_end_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_monday_end_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_monday_end_time_2'] = $timeframe_weekly_monday_end_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_tuesday_begin_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklyTuesdayBeginTime1()
    {
        return $this->container['timeframe_weekly_tuesday_begin_time_1'];
    }

    /**
     * Sets timeframe_weekly_tuesday_begin_time_1
     *
     * @param string|null $timeframe_weekly_tuesday_begin_time_1 Beginning of the first time period during which the time frame will take effect on Tuesdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyTuesdayBeginTime1($timeframe_weekly_tuesday_begin_time_1)
    {
        if (is_null($timeframe_weekly_tuesday_begin_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_tuesday_begin_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_tuesday_begin_time_1'] = $timeframe_weekly_tuesday_begin_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_tuesday_end_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklyTuesdayEndTime1()
    {
        return $this->container['timeframe_weekly_tuesday_end_time_1'];
    }

    /**
     * Sets timeframe_weekly_tuesday_end_time_1
     *
     * @param string|null $timeframe_weekly_tuesday_end_time_1 End of the first time period during which the time frame will take effect on Tuesdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyTuesdayEndTime1($timeframe_weekly_tuesday_end_time_1)
    {
        if (is_null($timeframe_weekly_tuesday_end_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_tuesday_end_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_tuesday_end_time_1'] = $timeframe_weekly_tuesday_end_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_tuesday_begin_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklyTuesdayBeginTime2()
    {
        return $this->container['timeframe_weekly_tuesday_begin_time_2'];
    }

    /**
     * Sets timeframe_weekly_tuesday_begin_time_2
     *
     * @param string|null $timeframe_weekly_tuesday_begin_time_2 Beginning of the second time period, if there is one, during which the time frame will take effect on Tuesdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyTuesdayBeginTime2($timeframe_weekly_tuesday_begin_time_2)
    {
        if (is_null($timeframe_weekly_tuesday_begin_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_tuesday_begin_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_tuesday_begin_time_2'] = $timeframe_weekly_tuesday_begin_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_tuesday_end_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklyTuesdayEndTime2()
    {
        return $this->container['timeframe_weekly_tuesday_end_time_2'];
    }

    /**
     * Sets timeframe_weekly_tuesday_end_time_2
     *
     * @param string|null $timeframe_weekly_tuesday_end_time_2 End of the second time period, if there is one, during which the time frame will take effect on Tuesdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyTuesdayEndTime2($timeframe_weekly_tuesday_end_time_2)
    {
        if (is_null($timeframe_weekly_tuesday_end_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_tuesday_end_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_tuesday_end_time_2'] = $timeframe_weekly_tuesday_end_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_wednesday_begin_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklyWednesdayBeginTime1()
    {
        return $this->container['timeframe_weekly_wednesday_begin_time_1'];
    }

    /**
     * Sets timeframe_weekly_wednesday_begin_time_1
     *
     * @param string|null $timeframe_weekly_wednesday_begin_time_1 Beginning of the first time period during which the time frame will take effect on Wednesdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyWednesdayBeginTime1($timeframe_weekly_wednesday_begin_time_1)
    {
        if (is_null($timeframe_weekly_wednesday_begin_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_wednesday_begin_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_wednesday_begin_time_1'] = $timeframe_weekly_wednesday_begin_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_wednesday_end_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklyWednesdayEndTime1()
    {
        return $this->container['timeframe_weekly_wednesday_end_time_1'];
    }

    /**
     * Sets timeframe_weekly_wednesday_end_time_1
     *
     * @param string|null $timeframe_weekly_wednesday_end_time_1 End of the first time period during which the time frame will take effect on Wednesdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyWednesdayEndTime1($timeframe_weekly_wednesday_end_time_1)
    {
        if (is_null($timeframe_weekly_wednesday_end_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_wednesday_end_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_wednesday_end_time_1'] = $timeframe_weekly_wednesday_end_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_wednesday_begin_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklyWednesdayBeginTime2()
    {
        return $this->container['timeframe_weekly_wednesday_begin_time_2'];
    }

    /**
     * Sets timeframe_weekly_wednesday_begin_time_2
     *
     * @param string|null $timeframe_weekly_wednesday_begin_time_2 Beginning of the second time period, if there is one, during which the time frame will take effect on Wednesdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyWednesdayBeginTime2($timeframe_weekly_wednesday_begin_time_2)
    {
        if (is_null($timeframe_weekly_wednesday_begin_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_wednesday_begin_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_wednesday_begin_time_2'] = $timeframe_weekly_wednesday_begin_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_wednesday_end_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklyWednesdayEndTime2()
    {
        return $this->container['timeframe_weekly_wednesday_end_time_2'];
    }

    /**
     * Sets timeframe_weekly_wednesday_end_time_2
     *
     * @param string|null $timeframe_weekly_wednesday_end_time_2 End of the second time period, if there is one, during which the time frame will take effect on Wednesdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyWednesdayEndTime2($timeframe_weekly_wednesday_end_time_2)
    {
        if (is_null($timeframe_weekly_wednesday_end_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_wednesday_end_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_wednesday_end_time_2'] = $timeframe_weekly_wednesday_end_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_thursday_begin_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklyThursdayBeginTime1()
    {
        return $this->container['timeframe_weekly_thursday_begin_time_1'];
    }

    /**
     * Sets timeframe_weekly_thursday_begin_time_1
     *
     * @param string|null $timeframe_weekly_thursday_begin_time_1 Beginning of the first time period during which the time frame will take effect on Thursdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyThursdayBeginTime1($timeframe_weekly_thursday_begin_time_1)
    {
        if (is_null($timeframe_weekly_thursday_begin_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_thursday_begin_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_thursday_begin_time_1'] = $timeframe_weekly_thursday_begin_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_thursday_end_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklyThursdayEndTime1()
    {
        return $this->container['timeframe_weekly_thursday_end_time_1'];
    }

    /**
     * Sets timeframe_weekly_thursday_end_time_1
     *
     * @param string|null $timeframe_weekly_thursday_end_time_1 End of the first time period during which the time frame will take effect on Thursdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyThursdayEndTime1($timeframe_weekly_thursday_end_time_1)
    {
        if (is_null($timeframe_weekly_thursday_end_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_thursday_end_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_thursday_end_time_1'] = $timeframe_weekly_thursday_end_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_thursday_begin_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklyThursdayBeginTime2()
    {
        return $this->container['timeframe_weekly_thursday_begin_time_2'];
    }

    /**
     * Sets timeframe_weekly_thursday_begin_time_2
     *
     * @param string|null $timeframe_weekly_thursday_begin_time_2 Beginning of the second time period, if there is one, during which the time frame will take effect on Thursdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyThursdayBeginTime2($timeframe_weekly_thursday_begin_time_2)
    {
        if (is_null($timeframe_weekly_thursday_begin_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_thursday_begin_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_thursday_begin_time_2'] = $timeframe_weekly_thursday_begin_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_thursday_end_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklyThursdayEndTime2()
    {
        return $this->container['timeframe_weekly_thursday_end_time_2'];
    }

    /**
     * Sets timeframe_weekly_thursday_end_time_2
     *
     * @param string|null $timeframe_weekly_thursday_end_time_2 End of the second time period, if there is one, during which the time frame will take effect on Thursdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyThursdayEndTime2($timeframe_weekly_thursday_end_time_2)
    {
        if (is_null($timeframe_weekly_thursday_end_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_thursday_end_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_thursday_end_time_2'] = $timeframe_weekly_thursday_end_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_friday_begin_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklyFridayBeginTime1()
    {
        return $this->container['timeframe_weekly_friday_begin_time_1'];
    }

    /**
     * Sets timeframe_weekly_friday_begin_time_1
     *
     * @param string|null $timeframe_weekly_friday_begin_time_1 Beginning of the first time period during which the time frame will take effect on Fridays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyFridayBeginTime1($timeframe_weekly_friday_begin_time_1)
    {
        if (is_null($timeframe_weekly_friday_begin_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_friday_begin_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_friday_begin_time_1'] = $timeframe_weekly_friday_begin_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_friday_end_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklyFridayEndTime1()
    {
        return $this->container['timeframe_weekly_friday_end_time_1'];
    }

    /**
     * Sets timeframe_weekly_friday_end_time_1
     *
     * @param string|null $timeframe_weekly_friday_end_time_1 End of the first time period during which the time frame will take effect on Fridays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyFridayEndTime1($timeframe_weekly_friday_end_time_1)
    {
        if (is_null($timeframe_weekly_friday_end_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_friday_end_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_friday_end_time_1'] = $timeframe_weekly_friday_end_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_friday_begin_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklyFridayBeginTime2()
    {
        return $this->container['timeframe_weekly_friday_begin_time_2'];
    }

    /**
     * Sets timeframe_weekly_friday_begin_time_2
     *
     * @param string|null $timeframe_weekly_friday_begin_time_2 Beginning of the second time period, if there is one, during which the time frame will take effect on Fridays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyFridayBeginTime2($timeframe_weekly_friday_begin_time_2)
    {
        if (is_null($timeframe_weekly_friday_begin_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_friday_begin_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_friday_begin_time_2'] = $timeframe_weekly_friday_begin_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_friday_end_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklyFridayEndTime2()
    {
        return $this->container['timeframe_weekly_friday_end_time_2'];
    }

    /**
     * Sets timeframe_weekly_friday_end_time_2
     *
     * @param string|null $timeframe_weekly_friday_end_time_2 End of the second time period, if there is one, during which the time frame will take effect on Fridays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklyFridayEndTime2($timeframe_weekly_friday_end_time_2)
    {
        if (is_null($timeframe_weekly_friday_end_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_friday_end_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_friday_end_time_2'] = $timeframe_weekly_friday_end_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_saturday_begin_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklySaturdayBeginTime1()
    {
        return $this->container['timeframe_weekly_saturday_begin_time_1'];
    }

    /**
     * Sets timeframe_weekly_saturday_begin_time_1
     *
     * @param string|null $timeframe_weekly_saturday_begin_time_1 Beginning of the first time period during which the time frame will take effect on Saturdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklySaturdayBeginTime1($timeframe_weekly_saturday_begin_time_1)
    {
        if (is_null($timeframe_weekly_saturday_begin_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_saturday_begin_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_saturday_begin_time_1'] = $timeframe_weekly_saturday_begin_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_saturday_end_time_1
     *
     * @return string|null
     */
    public function getTimeframeWeeklySaturdayEndTime1()
    {
        return $this->container['timeframe_weekly_saturday_end_time_1'];
    }

    /**
     * Sets timeframe_weekly_saturday_end_time_1
     *
     * @param string|null $timeframe_weekly_saturday_end_time_1 End of the first time period during which the time frame will take effect on Saturdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklySaturdayEndTime1($timeframe_weekly_saturday_end_time_1)
    {
        if (is_null($timeframe_weekly_saturday_end_time_1)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_saturday_end_time_1 cannot be null');
        }
        $this->container['timeframe_weekly_saturday_end_time_1'] = $timeframe_weekly_saturday_end_time_1;

        return $this;
    }

    /**
     * Gets timeframe_weekly_saturday_begin_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklySaturdayBeginTime2()
    {
        return $this->container['timeframe_weekly_saturday_begin_time_2'];
    }

    /**
     * Sets timeframe_weekly_saturday_begin_time_2
     *
     * @param string|null $timeframe_weekly_saturday_begin_time_2 Beginning of the second time period, if there is one, during which the time frame will take effect on Saturdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklySaturdayBeginTime2($timeframe_weekly_saturday_begin_time_2)
    {
        if (is_null($timeframe_weekly_saturday_begin_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_saturday_begin_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_saturday_begin_time_2'] = $timeframe_weekly_saturday_begin_time_2;

        return $this;
    }

    /**
     * Gets timeframe_weekly_saturday_end_time_2
     *
     * @return string|null
     */
    public function getTimeframeWeeklySaturdayEndTime2()
    {
        return $this->container['timeframe_weekly_saturday_end_time_2'];
    }

    /**
     * Sets timeframe_weekly_saturday_end_time_2
     *
     * @param string|null $timeframe_weekly_saturday_end_time_2 End of the second time period, if there is one, during which the time frame will take effect on Saturdays - format: hhmm
     *
     * @return self
     */
    public function setTimeframeWeeklySaturdayEndTime2($timeframe_weekly_saturday_end_time_2)
    {
        if (is_null($timeframe_weekly_saturday_end_time_2)) {
            throw new \InvalidArgumentException('non-nullable timeframe_weekly_saturday_end_time_2 cannot be null');
        }
        $this->container['timeframe_weekly_saturday_end_time_2'] = $timeframe_weekly_saturday_end_time_2;

        return $this;
    }

    /**
     * Gets timeframe_recurrence_type
     *
     * @return string
     */
    public function getTimeframeRecurrenceType()
    {
        return $this->container['timeframe_recurrence_type'];
    }

    /**
     * Sets timeframe_recurrence_type
     *
     * @param string $timeframe_recurrence_type ```weekly```: recur every week ```custom```: if this option is selected the fields ```timeframe-recurrence-begin-date```, ```timeframe-recurrence-custom-interval```, ```timeframe-recurrence-custom-interval-option```, and ```timeframe-recurrence-custom-interval-count``` must be set correctly to produce any behavior
     *
     * @return self
     */
    public function setTimeframeRecurrenceType($timeframe_recurrence_type)
    {
        if (is_null($timeframe_recurrence_type)) {
            throw new \InvalidArgumentException('non-nullable timeframe_recurrence_type cannot be null');
        }
        $this->container['timeframe_recurrence_type'] = $timeframe_recurrence_type;

        return $this;
    }

    /**
     * Gets timeframe_recurrence_begin_date
     *
     * @return string
     */
    public function getTimeframeRecurrenceBeginDate()
    {
        return $this->container['timeframe_recurrence_begin_date'];
    }

    /**
     * Sets timeframe_recurrence_begin_date
     *
     * @param string $timeframe_recurrence_begin_date Start date of the recurrence - format: YYYYMMDD - note: this field is only applicable for the ```timeframe-recurrence-type``` option ```custom```
     *
     * @return self
     */
    public function setTimeframeRecurrenceBeginDate($timeframe_recurrence_begin_date)
    {
        if (is_null($timeframe_recurrence_begin_date)) {
            throw new \InvalidArgumentException('non-nullable timeframe_recurrence_begin_date cannot be null');
        }
        $this->container['timeframe_recurrence_begin_date'] = $timeframe_recurrence_begin_date;

        return $this;
    }

    /**
     * Gets timeframe_recurrence_custom_interval
     *
     * @return string
     */
    public function getTimeframeRecurrenceCustomInterval()
    {
        return $this->container['timeframe_recurrence_custom_interval'];
    }

    /**
     * Sets timeframe_recurrence_custom_interval
     *
     * @param string $timeframe_recurrence_custom_interval Must be combined with the field ```timeframe-recurrence-custom-interval-count```  ```weeks```: recur every ```timeframe-recurrence-custom-interval-count``` weeks ```months```: recur every ```timeframe-recurrence-custom-interval-count``` months
     *
     * @return self
     */
    public function setTimeframeRecurrenceCustomInterval($timeframe_recurrence_custom_interval)
    {
        if (is_null($timeframe_recurrence_custom_interval)) {
            throw new \InvalidArgumentException('non-nullable timeframe_recurrence_custom_interval cannot be null');
        }
        $this->container['timeframe_recurrence_custom_interval'] = $timeframe_recurrence_custom_interval;

        return $this;
    }

    /**
     * Gets timeframe_recurrence_custom_interval_count
     *
     * @return string
     */
    public function getTimeframeRecurrenceCustomIntervalCount()
    {
        return $this->container['timeframe_recurrence_custom_interval_count'];
    }

    /**
     * Sets timeframe_recurrence_custom_interval_count
     *
     * @param string $timeframe_recurrence_custom_interval_count Specifies the recurrence count based on the period specified in ```timeframe-recurrence-custom-interval``` e.g. 'every 6 weeks' or 'every 3 months'  If the field ```timeframe-recurrence-custom-interval``` is set to ```months``` this field determines the count in combination with the option set in ```timeframe-recurrence-custom-interval-option```
     *
     * @return self
     */
    public function setTimeframeRecurrenceCustomIntervalCount($timeframe_recurrence_custom_interval_count)
    {
        if (is_null($timeframe_recurrence_custom_interval_count)) {
            throw new \InvalidArgumentException('non-nullable timeframe_recurrence_custom_interval_count cannot be null');
        }
        $this->container['timeframe_recurrence_custom_interval_count'] = $timeframe_recurrence_custom_interval_count;

        return $this;
    }

    /**
     * Gets timeframe_recurrence_custom_interval_option
     *
     * @return string
     */
    public function getTimeframeRecurrenceCustomIntervalOption()
    {
        return $this->container['timeframe_recurrence_custom_interval_option'];
    }

    /**
     * Sets timeframe_recurrence_custom_interval_option
     *
     * @param string $timeframe_recurrence_custom_interval_option If ```timeframe-recurrence-custom-interval``` is set to ```weeks``` this field is not used. This field is for ```months``` only. The following options configure recurrence for the Days of Week period according to the start date defined in ```timeframe-recurrence-begin-date```.  For ```timeframe-recurrence-custom-interval``` of ```months```: ```monthly-same-day```: recur on the same day of the month, e.g.: the 14th day, the 29th day - note: if there are months in which the “day” does not occur, the Days fo Week will not be active during that month, e.g.: the 31st day of February ```monthly-ordinal-weekday```:  recur on any ordinal weekday in the given month e.g. the third Friday, the second Monday ```monthly-first-last-weekday```: recur on the first or last instance of the selected weekday in the month, e.g.: the first Wednesday, the last Tuesday - note: this will produce potentially unexpected behavior if used with a date that is not the first or last occurrence of that particular weekday
     *
     * @return self
     */
    public function setTimeframeRecurrenceCustomIntervalOption($timeframe_recurrence_custom_interval_option)
    {
        if (is_null($timeframe_recurrence_custom_interval_option)) {
            throw new \InvalidArgumentException('non-nullable timeframe_recurrence_custom_interval_option cannot be null');
        }
        $this->container['timeframe_recurrence_custom_interval_option'] = $timeframe_recurrence_custom_interval_option;

        return $this;
    }

    /**
     * Gets timeframe_recurrence_end_option
     *
     * @return string
     */
    public function getTimeframeRecurrenceEndOption()
    {
        return $this->container['timeframe_recurrence_end_option'];
    }

    /**
     * Sets timeframe_recurrence_end_option
     *
     * @param string $timeframe_recurrence_end_option ```never```: recurrence will continue indefinitely ```onADate```: recurrence will end on a date, specified in ```timeframe-recurrence-end-date```
     *
     * @return self
     */
    public function setTimeframeRecurrenceEndOption($timeframe_recurrence_end_option)
    {
        if (is_null($timeframe_recurrence_end_option)) {
            throw new \InvalidArgumentException('non-nullable timeframe_recurrence_end_option cannot be null');
        }
        $this->container['timeframe_recurrence_end_option'] = $timeframe_recurrence_end_option;

        return $this;
    }

    /**
     * Gets timeframe_recurrence_end_date
     *
     * @return string
     */
    public function getTimeframeRecurrenceEndDate()
    {
        return $this->container['timeframe_recurrence_end_date'];
    }

    /**
     * Sets timeframe_recurrence_end_date
     *
     * @param string $timeframe_recurrence_end_date End date of the recurrence - format: YYYYMMDD
     *
     * @return self
     */
    public function setTimeframeRecurrenceEndDate($timeframe_recurrence_end_date)
    {
        if (is_null($timeframe_recurrence_end_date)) {
            throw new \InvalidArgumentException('non-nullable timeframe_recurrence_end_date cannot be null');
        }
        $this->container['timeframe_recurrence_end_date'] = $timeframe_recurrence_end_date;

        return $this;
    }

    /**
     * Gets timeframe_expiry_datetime
     *
     * @return string|null
     */
    public function getTimeframeExpiryDatetime()
    {
        return $this->container['timeframe_expiry_datetime'];
    }

    /**
     * Sets timeframe_expiry_datetime
     *
     * @param string|null $timeframe_expiry_datetime timeframe_expiry_datetime
     *
     * @return self
     */
    public function setTimeframeExpiryDatetime($timeframe_expiry_datetime)
    {
        if (is_null($timeframe_expiry_datetime)) {
            throw new \InvalidArgumentException('non-nullable timeframe_expiry_datetime cannot be null');
        }
        $this->container['timeframe_expiry_datetime'] = $timeframe_expiry_datetime;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets timeframe_next_observance_datetime
     *
     * @return float[]|null
     */
    public function getTimeframeNextObservanceDatetime()
    {
        return $this->container['timeframe_next_observance_datetime'];
    }

    /**
     * Sets timeframe_next_observance_datetime
     *
     * @param float[]|null $timeframe_next_observance_datetime List of the upcoming occurrences of the days of week if ```recurrence``` is configured as ```custom```, formatted as epoch timestamp in seconds
     *
     * @return self
     */
    public function setTimeframeNextObservanceDatetime($timeframe_next_observance_datetime)
    {
        if (is_null($timeframe_next_observance_datetime)) {
            throw new \InvalidArgumentException('non-nullable timeframe_next_observance_datetime cannot be null');
        }
        $this->container['timeframe_next_observance_datetime'] = $timeframe_next_observance_datetime;

        return $this;
    }

    /**
     * Gets timeframe_recurrence_rrule
     *
     * @return string|null
     */
    public function getTimeframeRecurrenceRrule()
    {
        return $this->container['timeframe_recurrence_rrule'];
    }

    /**
     * Sets timeframe_recurrence_rrule
     *
     * @param string|null $timeframe_recurrence_rrule timeframe_recurrence_rrule
     *
     * @return self
     */
    public function setTimeframeRecurrenceRrule($timeframe_recurrence_rrule)
    {
        if (is_null($timeframe_recurrence_rrule)) {
            array_push($this->openAPINullablesSetToNull, 'timeframe_recurrence_rrule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timeframe_recurrence_rrule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timeframe_recurrence_rrule'] = $timeframe_recurrence_rrule;

        return $this;
    }

    /**
     * Gets timeframe_is_v1
     *
     * @return bool|null
     */
    public function getTimeframeIsV1()
    {
        return $this->container['timeframe_is_v1'];
    }

    /**
     * Sets timeframe_is_v1
     *
     * @param bool|null $timeframe_is_v1 timeframe_is_v1
     *
     * @return self
     */
    public function setTimeframeIsV1($timeframe_is_v1)
    {
        if (is_null($timeframe_is_v1)) {
            array_push($this->openAPINullablesSetToNull, 'timeframe_is_v1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timeframe_is_v1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timeframe_is_v1'] = $timeframe_is_v1;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


