<?php
/**
 * CdrR
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * CdrR Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CdrR implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CdrR';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'hostname' => 'string',
        'mac' => 'string',
        'cdr_index' => 'int',
        'orig_callid' => 'string',
        'orig_ip' => 'string',
        'orig_match' => 'string',
        'orig_sub' => 'string',
        'orig_domain' => 'string',
        'orig_group' => 'mixed',
        'orig_from_uri' => 'string',
        'orig_from_name' => 'string',
        'orig_from_user' => 'int',
        'orig_from_host' => 'string',
        'orig_req_uri' => 'string',
        'orig_req_user' => 'string',
        'orig_req_host' => 'string',
        'orig_to_uri' => 'string',
        'orig_to_user' => 'string',
        'orig_to_host' => 'string',
        'by_action' => 'string',
        'by_sub' => 'string',
        'by_domain' => 'string',
        'by_group' => 'mixed',
        'by_uri' => 'string',
        'by_callid' => 'string',
        'term_callid' => 'string',
        'term_ip' => 'string',
        'term_match' => 'string',
        'term_sub' => 'string',
        'term_domain' => 'string',
        'term_to_uri' => 'string',
        'term_group' => 'mixed',
        'time_start' => 'int',
        'time_ringing' => 'mixed',
        'time_answer' => 'int',
        'time_release' => 'int',
        'time_talking' => 'int',
        'time_holding' => 'int',
        'duration' => 'int',
        'time_insert' => 'mixed',
        'time_disp' => 'mixed',
        'release_code' => 'string',
        'release_text' => 'string',
        'codec' => 'string',
        'rly_prt_0' => 'int',
        'rly_prt_a' => 'string',
        'rly_prt_b' => 'string',
        'rly_cnt_a' => 'int',
        'rly_cnt_b' => 'int',
        'image_codec' => 'mixed',
        'image_prt_0' => 'mixed',
        'image_prt_a' => 'mixed',
        'image_prt_b' => 'mixed',
        'image_cnt_a' => 'mixed',
        'image_cnt_b' => 'mixed',
        'video_codec' => 'mixed',
        'video_prt_0' => 'mixed',
        'video_prt_a' => 'mixed',
        'video_prt_b' => 'mixed',
        'video_cnt_a' => 'mixed',
        'video_cnt_b' => 'mixed',
        'disp_type' => 'mixed',
        'disposition' => 'mixed',
        'reason' => 'mixed',
        'notes' => 'mixed',
        'pac' => 'mixed',
        'orig_logi_uri' => 'string',
        'term_logi_uri' => 'string',
        'batch_tim_beg' => 'int',
        'batch_tim_ans' => 'int',
        'batch_hold' => 'int',
        'batch_dura' => 'int',
        'orig_id' => 'int',
        'term_id' => 'int',
        'by_id' => 'int',
        'route_to' => 'string',
        'route_class' => 'int',
        'orig_territory' => 'string',
        'orig_site' => 'string',
        'by_site' => 'string',
        'by_territory' => 'string',
        'term_territory' => 'mixed',
        'term_site' => 'mixed',
        'served_call_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'hostname' => null,
        'mac' => null,
        'cdr_index' => null,
        'orig_callid' => null,
        'orig_ip' => null,
        'orig_match' => null,
        'orig_sub' => null,
        'orig_domain' => null,
        'orig_group' => null,
        'orig_from_uri' => null,
        'orig_from_name' => null,
        'orig_from_user' => null,
        'orig_from_host' => null,
        'orig_req_uri' => null,
        'orig_req_user' => null,
        'orig_req_host' => null,
        'orig_to_uri' => null,
        'orig_to_user' => null,
        'orig_to_host' => null,
        'by_action' => null,
        'by_sub' => null,
        'by_domain' => null,
        'by_group' => null,
        'by_uri' => null,
        'by_callid' => null,
        'term_callid' => null,
        'term_ip' => null,
        'term_match' => null,
        'term_sub' => null,
        'term_domain' => null,
        'term_to_uri' => null,
        'term_group' => null,
        'time_start' => null,
        'time_ringing' => null,
        'time_answer' => null,
        'time_release' => null,
        'time_talking' => null,
        'time_holding' => null,
        'duration' => null,
        'time_insert' => null,
        'time_disp' => null,
        'release_code' => null,
        'release_text' => null,
        'codec' => null,
        'rly_prt_0' => null,
        'rly_prt_a' => null,
        'rly_prt_b' => null,
        'rly_cnt_a' => null,
        'rly_cnt_b' => null,
        'image_codec' => null,
        'image_prt_0' => null,
        'image_prt_a' => null,
        'image_prt_b' => null,
        'image_cnt_a' => null,
        'image_cnt_b' => null,
        'video_codec' => null,
        'video_prt_0' => null,
        'video_prt_a' => null,
        'video_prt_b' => null,
        'video_cnt_a' => null,
        'video_cnt_b' => null,
        'disp_type' => null,
        'disposition' => null,
        'reason' => null,
        'notes' => null,
        'pac' => null,
        'orig_logi_uri' => null,
        'term_logi_uri' => null,
        'batch_tim_beg' => null,
        'batch_tim_ans' => null,
        'batch_hold' => null,
        'batch_dura' => null,
        'orig_id' => null,
        'term_id' => null,
        'by_id' => null,
        'route_to' => null,
        'route_class' => null,
        'orig_territory' => null,
        'orig_site' => null,
        'by_site' => null,
        'by_territory' => null,
        'term_territory' => null,
        'term_site' => null,
        'served_call_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'hostname' => false,
        'mac' => false,
        'cdr_index' => false,
        'orig_callid' => false,
        'orig_ip' => false,
        'orig_match' => false,
        'orig_sub' => false,
        'orig_domain' => false,
        'orig_group' => true,
        'orig_from_uri' => false,
        'orig_from_name' => false,
        'orig_from_user' => false,
        'orig_from_host' => false,
        'orig_req_uri' => false,
        'orig_req_user' => false,
        'orig_req_host' => false,
        'orig_to_uri' => false,
        'orig_to_user' => false,
        'orig_to_host' => false,
        'by_action' => false,
        'by_sub' => false,
        'by_domain' => false,
        'by_group' => true,
        'by_uri' => false,
        'by_callid' => false,
        'term_callid' => false,
        'term_ip' => false,
        'term_match' => false,
        'term_sub' => false,
        'term_domain' => false,
        'term_to_uri' => false,
        'term_group' => true,
        'time_start' => false,
        'time_ringing' => true,
        'time_answer' => false,
        'time_release' => false,
        'time_talking' => false,
        'time_holding' => false,
        'duration' => false,
        'time_insert' => true,
        'time_disp' => true,
        'release_code' => false,
        'release_text' => false,
        'codec' => false,
        'rly_prt_0' => false,
        'rly_prt_a' => false,
        'rly_prt_b' => false,
        'rly_cnt_a' => false,
        'rly_cnt_b' => false,
        'image_codec' => true,
        'image_prt_0' => true,
        'image_prt_a' => true,
        'image_prt_b' => true,
        'image_cnt_a' => true,
        'image_cnt_b' => true,
        'video_codec' => true,
        'video_prt_0' => true,
        'video_prt_a' => true,
        'video_prt_b' => true,
        'video_cnt_a' => true,
        'video_cnt_b' => true,
        'disp_type' => true,
        'disposition' => true,
        'reason' => true,
        'notes' => true,
        'pac' => true,
        'orig_logi_uri' => false,
        'term_logi_uri' => false,
        'batch_tim_beg' => false,
        'batch_tim_ans' => false,
        'batch_hold' => false,
        'batch_dura' => false,
        'orig_id' => false,
        'term_id' => false,
        'by_id' => false,
        'route_to' => false,
        'route_class' => false,
        'orig_territory' => false,
        'orig_site' => false,
        'by_site' => false,
        'by_territory' => false,
        'term_territory' => true,
        'term_site' => true,
        'served_call_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'hostname' => 'hostname',
        'mac' => 'mac',
        'cdr_index' => 'cdr_index',
        'orig_callid' => 'orig_callid',
        'orig_ip' => 'orig_ip',
        'orig_match' => 'orig_match',
        'orig_sub' => 'orig_sub',
        'orig_domain' => 'orig_domain',
        'orig_group' => 'orig_group',
        'orig_from_uri' => 'orig_from_uri',
        'orig_from_name' => 'orig_from_name',
        'orig_from_user' => 'orig_from_user',
        'orig_from_host' => 'orig_from_host',
        'orig_req_uri' => 'orig_req_uri',
        'orig_req_user' => 'orig_req_user',
        'orig_req_host' => 'orig_req_host',
        'orig_to_uri' => 'orig_to_uri',
        'orig_to_user' => 'orig_to_user',
        'orig_to_host' => 'orig_to_host',
        'by_action' => 'by_action',
        'by_sub' => 'by_sub',
        'by_domain' => 'by_domain',
        'by_group' => 'by_group',
        'by_uri' => 'by_uri',
        'by_callid' => 'by_callid',
        'term_callid' => 'term_callid',
        'term_ip' => 'term_ip',
        'term_match' => 'term_match',
        'term_sub' => 'term_sub',
        'term_domain' => 'term_domain',
        'term_to_uri' => 'term_to_uri',
        'term_group' => 'term_group',
        'time_start' => 'time_start',
        'time_ringing' => 'time_ringing',
        'time_answer' => 'time_answer',
        'time_release' => 'time_release',
        'time_talking' => 'time_talking',
        'time_holding' => 'time_holding',
        'duration' => 'duration',
        'time_insert' => 'time_insert',
        'time_disp' => 'time_disp',
        'release_code' => 'release_code',
        'release_text' => 'release_text',
        'codec' => 'codec',
        'rly_prt_0' => 'rly_prt_0',
        'rly_prt_a' => 'rly_prt_a',
        'rly_prt_b' => 'rly_prt_b',
        'rly_cnt_a' => 'rly_cnt_a',
        'rly_cnt_b' => 'rly_cnt_b',
        'image_codec' => 'image_codec',
        'image_prt_0' => 'image_prt_0',
        'image_prt_a' => 'image_prt_a',
        'image_prt_b' => 'image_prt_b',
        'image_cnt_a' => 'image_cnt_a',
        'image_cnt_b' => 'image_cnt_b',
        'video_codec' => 'video_codec',
        'video_prt_0' => 'video_prt_0',
        'video_prt_a' => 'video_prt_a',
        'video_prt_b' => 'video_prt_b',
        'video_cnt_a' => 'video_cnt_a',
        'video_cnt_b' => 'video_cnt_b',
        'disp_type' => 'disp_type',
        'disposition' => 'disposition',
        'reason' => 'reason',
        'notes' => 'notes',
        'pac' => 'pac',
        'orig_logi_uri' => 'orig_logi_uri',
        'term_logi_uri' => 'term_logi_uri',
        'batch_tim_beg' => 'batch_tim_beg',
        'batch_tim_ans' => 'batch_tim_ans',
        'batch_hold' => 'batch_hold',
        'batch_dura' => 'batch_dura',
        'orig_id' => 'orig_id',
        'term_id' => 'term_id',
        'by_id' => 'by_id',
        'route_to' => 'route_to',
        'route_class' => 'route_class',
        'orig_territory' => 'orig_territory',
        'orig_site' => 'orig_site',
        'by_site' => 'by_site',
        'by_territory' => 'by_territory',
        'term_territory' => 'term_territory',
        'term_site' => 'term_site',
        'served_call_id' => 'servedCallId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'hostname' => 'setHostname',
        'mac' => 'setMac',
        'cdr_index' => 'setCdrIndex',
        'orig_callid' => 'setOrigCallid',
        'orig_ip' => 'setOrigIp',
        'orig_match' => 'setOrigMatch',
        'orig_sub' => 'setOrigSub',
        'orig_domain' => 'setOrigDomain',
        'orig_group' => 'setOrigGroup',
        'orig_from_uri' => 'setOrigFromUri',
        'orig_from_name' => 'setOrigFromName',
        'orig_from_user' => 'setOrigFromUser',
        'orig_from_host' => 'setOrigFromHost',
        'orig_req_uri' => 'setOrigReqUri',
        'orig_req_user' => 'setOrigReqUser',
        'orig_req_host' => 'setOrigReqHost',
        'orig_to_uri' => 'setOrigToUri',
        'orig_to_user' => 'setOrigToUser',
        'orig_to_host' => 'setOrigToHost',
        'by_action' => 'setByAction',
        'by_sub' => 'setBySub',
        'by_domain' => 'setByDomain',
        'by_group' => 'setByGroup',
        'by_uri' => 'setByUri',
        'by_callid' => 'setByCallid',
        'term_callid' => 'setTermCallid',
        'term_ip' => 'setTermIp',
        'term_match' => 'setTermMatch',
        'term_sub' => 'setTermSub',
        'term_domain' => 'setTermDomain',
        'term_to_uri' => 'setTermToUri',
        'term_group' => 'setTermGroup',
        'time_start' => 'setTimeStart',
        'time_ringing' => 'setTimeRinging',
        'time_answer' => 'setTimeAnswer',
        'time_release' => 'setTimeRelease',
        'time_talking' => 'setTimeTalking',
        'time_holding' => 'setTimeHolding',
        'duration' => 'setDuration',
        'time_insert' => 'setTimeInsert',
        'time_disp' => 'setTimeDisp',
        'release_code' => 'setReleaseCode',
        'release_text' => 'setReleaseText',
        'codec' => 'setCodec',
        'rly_prt_0' => 'setRlyPrt0',
        'rly_prt_a' => 'setRlyPrtA',
        'rly_prt_b' => 'setRlyPrtB',
        'rly_cnt_a' => 'setRlyCntA',
        'rly_cnt_b' => 'setRlyCntB',
        'image_codec' => 'setImageCodec',
        'image_prt_0' => 'setImagePrt0',
        'image_prt_a' => 'setImagePrtA',
        'image_prt_b' => 'setImagePrtB',
        'image_cnt_a' => 'setImageCntA',
        'image_cnt_b' => 'setImageCntB',
        'video_codec' => 'setVideoCodec',
        'video_prt_0' => 'setVideoPrt0',
        'video_prt_a' => 'setVideoPrtA',
        'video_prt_b' => 'setVideoPrtB',
        'video_cnt_a' => 'setVideoCntA',
        'video_cnt_b' => 'setVideoCntB',
        'disp_type' => 'setDispType',
        'disposition' => 'setDisposition',
        'reason' => 'setReason',
        'notes' => 'setNotes',
        'pac' => 'setPac',
        'orig_logi_uri' => 'setOrigLogiUri',
        'term_logi_uri' => 'setTermLogiUri',
        'batch_tim_beg' => 'setBatchTimBeg',
        'batch_tim_ans' => 'setBatchTimAns',
        'batch_hold' => 'setBatchHold',
        'batch_dura' => 'setBatchDura',
        'orig_id' => 'setOrigId',
        'term_id' => 'setTermId',
        'by_id' => 'setById',
        'route_to' => 'setRouteTo',
        'route_class' => 'setRouteClass',
        'orig_territory' => 'setOrigTerritory',
        'orig_site' => 'setOrigSite',
        'by_site' => 'setBySite',
        'by_territory' => 'setByTerritory',
        'term_territory' => 'setTermTerritory',
        'term_site' => 'setTermSite',
        'served_call_id' => 'setServedCallId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'hostname' => 'getHostname',
        'mac' => 'getMac',
        'cdr_index' => 'getCdrIndex',
        'orig_callid' => 'getOrigCallid',
        'orig_ip' => 'getOrigIp',
        'orig_match' => 'getOrigMatch',
        'orig_sub' => 'getOrigSub',
        'orig_domain' => 'getOrigDomain',
        'orig_group' => 'getOrigGroup',
        'orig_from_uri' => 'getOrigFromUri',
        'orig_from_name' => 'getOrigFromName',
        'orig_from_user' => 'getOrigFromUser',
        'orig_from_host' => 'getOrigFromHost',
        'orig_req_uri' => 'getOrigReqUri',
        'orig_req_user' => 'getOrigReqUser',
        'orig_req_host' => 'getOrigReqHost',
        'orig_to_uri' => 'getOrigToUri',
        'orig_to_user' => 'getOrigToUser',
        'orig_to_host' => 'getOrigToHost',
        'by_action' => 'getByAction',
        'by_sub' => 'getBySub',
        'by_domain' => 'getByDomain',
        'by_group' => 'getByGroup',
        'by_uri' => 'getByUri',
        'by_callid' => 'getByCallid',
        'term_callid' => 'getTermCallid',
        'term_ip' => 'getTermIp',
        'term_match' => 'getTermMatch',
        'term_sub' => 'getTermSub',
        'term_domain' => 'getTermDomain',
        'term_to_uri' => 'getTermToUri',
        'term_group' => 'getTermGroup',
        'time_start' => 'getTimeStart',
        'time_ringing' => 'getTimeRinging',
        'time_answer' => 'getTimeAnswer',
        'time_release' => 'getTimeRelease',
        'time_talking' => 'getTimeTalking',
        'time_holding' => 'getTimeHolding',
        'duration' => 'getDuration',
        'time_insert' => 'getTimeInsert',
        'time_disp' => 'getTimeDisp',
        'release_code' => 'getReleaseCode',
        'release_text' => 'getReleaseText',
        'codec' => 'getCodec',
        'rly_prt_0' => 'getRlyPrt0',
        'rly_prt_a' => 'getRlyPrtA',
        'rly_prt_b' => 'getRlyPrtB',
        'rly_cnt_a' => 'getRlyCntA',
        'rly_cnt_b' => 'getRlyCntB',
        'image_codec' => 'getImageCodec',
        'image_prt_0' => 'getImagePrt0',
        'image_prt_a' => 'getImagePrtA',
        'image_prt_b' => 'getImagePrtB',
        'image_cnt_a' => 'getImageCntA',
        'image_cnt_b' => 'getImageCntB',
        'video_codec' => 'getVideoCodec',
        'video_prt_0' => 'getVideoPrt0',
        'video_prt_a' => 'getVideoPrtA',
        'video_prt_b' => 'getVideoPrtB',
        'video_cnt_a' => 'getVideoCntA',
        'video_cnt_b' => 'getVideoCntB',
        'disp_type' => 'getDispType',
        'disposition' => 'getDisposition',
        'reason' => 'getReason',
        'notes' => 'getNotes',
        'pac' => 'getPac',
        'orig_logi_uri' => 'getOrigLogiUri',
        'term_logi_uri' => 'getTermLogiUri',
        'batch_tim_beg' => 'getBatchTimBeg',
        'batch_tim_ans' => 'getBatchTimAns',
        'batch_hold' => 'getBatchHold',
        'batch_dura' => 'getBatchDura',
        'orig_id' => 'getOrigId',
        'term_id' => 'getTermId',
        'by_id' => 'getById',
        'route_to' => 'getRouteTo',
        'route_class' => 'getRouteClass',
        'orig_territory' => 'getOrigTerritory',
        'orig_site' => 'getOrigSite',
        'by_site' => 'getBySite',
        'by_territory' => 'getByTerritory',
        'term_territory' => 'getTermTerritory',
        'term_site' => 'getTermSite',
        'served_call_id' => 'getServedCallId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('hostname', $data ?? [], null);
        $this->setIfExists('mac', $data ?? [], null);
        $this->setIfExists('cdr_index', $data ?? [], null);
        $this->setIfExists('orig_callid', $data ?? [], null);
        $this->setIfExists('orig_ip', $data ?? [], null);
        $this->setIfExists('orig_match', $data ?? [], null);
        $this->setIfExists('orig_sub', $data ?? [], null);
        $this->setIfExists('orig_domain', $data ?? [], null);
        $this->setIfExists('orig_group', $data ?? [], null);
        $this->setIfExists('orig_from_uri', $data ?? [], null);
        $this->setIfExists('orig_from_name', $data ?? [], null);
        $this->setIfExists('orig_from_user', $data ?? [], null);
        $this->setIfExists('orig_from_host', $data ?? [], null);
        $this->setIfExists('orig_req_uri', $data ?? [], null);
        $this->setIfExists('orig_req_user', $data ?? [], null);
        $this->setIfExists('orig_req_host', $data ?? [], null);
        $this->setIfExists('orig_to_uri', $data ?? [], null);
        $this->setIfExists('orig_to_user', $data ?? [], null);
        $this->setIfExists('orig_to_host', $data ?? [], null);
        $this->setIfExists('by_action', $data ?? [], null);
        $this->setIfExists('by_sub', $data ?? [], null);
        $this->setIfExists('by_domain', $data ?? [], null);
        $this->setIfExists('by_group', $data ?? [], null);
        $this->setIfExists('by_uri', $data ?? [], null);
        $this->setIfExists('by_callid', $data ?? [], null);
        $this->setIfExists('term_callid', $data ?? [], null);
        $this->setIfExists('term_ip', $data ?? [], null);
        $this->setIfExists('term_match', $data ?? [], null);
        $this->setIfExists('term_sub', $data ?? [], null);
        $this->setIfExists('term_domain', $data ?? [], null);
        $this->setIfExists('term_to_uri', $data ?? [], null);
        $this->setIfExists('term_group', $data ?? [], null);
        $this->setIfExists('time_start', $data ?? [], null);
        $this->setIfExists('time_ringing', $data ?? [], null);
        $this->setIfExists('time_answer', $data ?? [], null);
        $this->setIfExists('time_release', $data ?? [], null);
        $this->setIfExists('time_talking', $data ?? [], null);
        $this->setIfExists('time_holding', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('time_insert', $data ?? [], null);
        $this->setIfExists('time_disp', $data ?? [], null);
        $this->setIfExists('release_code', $data ?? [], null);
        $this->setIfExists('release_text', $data ?? [], null);
        $this->setIfExists('codec', $data ?? [], null);
        $this->setIfExists('rly_prt_0', $data ?? [], null);
        $this->setIfExists('rly_prt_a', $data ?? [], null);
        $this->setIfExists('rly_prt_b', $data ?? [], null);
        $this->setIfExists('rly_cnt_a', $data ?? [], null);
        $this->setIfExists('rly_cnt_b', $data ?? [], null);
        $this->setIfExists('image_codec', $data ?? [], null);
        $this->setIfExists('image_prt_0', $data ?? [], null);
        $this->setIfExists('image_prt_a', $data ?? [], null);
        $this->setIfExists('image_prt_b', $data ?? [], null);
        $this->setIfExists('image_cnt_a', $data ?? [], null);
        $this->setIfExists('image_cnt_b', $data ?? [], null);
        $this->setIfExists('video_codec', $data ?? [], null);
        $this->setIfExists('video_prt_0', $data ?? [], null);
        $this->setIfExists('video_prt_a', $data ?? [], null);
        $this->setIfExists('video_prt_b', $data ?? [], null);
        $this->setIfExists('video_cnt_a', $data ?? [], null);
        $this->setIfExists('video_cnt_b', $data ?? [], null);
        $this->setIfExists('disp_type', $data ?? [], null);
        $this->setIfExists('disposition', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('pac', $data ?? [], null);
        $this->setIfExists('orig_logi_uri', $data ?? [], null);
        $this->setIfExists('term_logi_uri', $data ?? [], null);
        $this->setIfExists('batch_tim_beg', $data ?? [], null);
        $this->setIfExists('batch_tim_ans', $data ?? [], null);
        $this->setIfExists('batch_hold', $data ?? [], null);
        $this->setIfExists('batch_dura', $data ?? [], null);
        $this->setIfExists('orig_id', $data ?? [], null);
        $this->setIfExists('term_id', $data ?? [], null);
        $this->setIfExists('by_id', $data ?? [], null);
        $this->setIfExists('route_to', $data ?? [], null);
        $this->setIfExists('route_class', $data ?? [], null);
        $this->setIfExists('orig_territory', $data ?? [], null);
        $this->setIfExists('orig_site', $data ?? [], null);
        $this->setIfExists('by_site', $data ?? [], null);
        $this->setIfExists('by_territory', $data ?? [], null);
        $this->setIfExists('term_territory', $data ?? [], null);
        $this->setIfExists('term_site', $data ?? [], null);
        $this->setIfExists('served_call_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['hostname'] === null) {
            $invalidProperties[] = "'hostname' can't be null";
        }
        if ($this->container['mac'] === null) {
            $invalidProperties[] = "'mac' can't be null";
        }
        if ($this->container['cdr_index'] === null) {
            $invalidProperties[] = "'cdr_index' can't be null";
        }
        if ($this->container['orig_callid'] === null) {
            $invalidProperties[] = "'orig_callid' can't be null";
        }
        if ($this->container['orig_ip'] === null) {
            $invalidProperties[] = "'orig_ip' can't be null";
        }
        if ($this->container['orig_match'] === null) {
            $invalidProperties[] = "'orig_match' can't be null";
        }
        if ($this->container['orig_sub'] === null) {
            $invalidProperties[] = "'orig_sub' can't be null";
        }
        if ($this->container['orig_domain'] === null) {
            $invalidProperties[] = "'orig_domain' can't be null";
        }
        if ($this->container['orig_group'] === null) {
            $invalidProperties[] = "'orig_group' can't be null";
        }
        if ($this->container['orig_from_uri'] === null) {
            $invalidProperties[] = "'orig_from_uri' can't be null";
        }
        if ($this->container['orig_from_name'] === null) {
            $invalidProperties[] = "'orig_from_name' can't be null";
        }
        if ($this->container['orig_from_user'] === null) {
            $invalidProperties[] = "'orig_from_user' can't be null";
        }
        if ($this->container['orig_from_host'] === null) {
            $invalidProperties[] = "'orig_from_host' can't be null";
        }
        if ($this->container['orig_req_uri'] === null) {
            $invalidProperties[] = "'orig_req_uri' can't be null";
        }
        if ($this->container['orig_req_user'] === null) {
            $invalidProperties[] = "'orig_req_user' can't be null";
        }
        if ($this->container['orig_req_host'] === null) {
            $invalidProperties[] = "'orig_req_host' can't be null";
        }
        if ($this->container['orig_to_uri'] === null) {
            $invalidProperties[] = "'orig_to_uri' can't be null";
        }
        if ($this->container['orig_to_user'] === null) {
            $invalidProperties[] = "'orig_to_user' can't be null";
        }
        if ($this->container['orig_to_host'] === null) {
            $invalidProperties[] = "'orig_to_host' can't be null";
        }
        if ($this->container['by_action'] === null) {
            $invalidProperties[] = "'by_action' can't be null";
        }
        if ($this->container['by_sub'] === null) {
            $invalidProperties[] = "'by_sub' can't be null";
        }
        if ($this->container['by_domain'] === null) {
            $invalidProperties[] = "'by_domain' can't be null";
        }
        if ($this->container['by_group'] === null) {
            $invalidProperties[] = "'by_group' can't be null";
        }
        if ($this->container['by_uri'] === null) {
            $invalidProperties[] = "'by_uri' can't be null";
        }
        if ($this->container['by_callid'] === null) {
            $invalidProperties[] = "'by_callid' can't be null";
        }
        if ($this->container['term_callid'] === null) {
            $invalidProperties[] = "'term_callid' can't be null";
        }
        if ($this->container['term_ip'] === null) {
            $invalidProperties[] = "'term_ip' can't be null";
        }
        if ($this->container['term_match'] === null) {
            $invalidProperties[] = "'term_match' can't be null";
        }
        if ($this->container['term_sub'] === null) {
            $invalidProperties[] = "'term_sub' can't be null";
        }
        if ($this->container['term_domain'] === null) {
            $invalidProperties[] = "'term_domain' can't be null";
        }
        if ($this->container['term_to_uri'] === null) {
            $invalidProperties[] = "'term_to_uri' can't be null";
        }
        if ($this->container['term_group'] === null) {
            $invalidProperties[] = "'term_group' can't be null";
        }
        if ($this->container['time_start'] === null) {
            $invalidProperties[] = "'time_start' can't be null";
        }
        if ($this->container['time_ringing'] === null) {
            $invalidProperties[] = "'time_ringing' can't be null";
        }
        if ($this->container['time_answer'] === null) {
            $invalidProperties[] = "'time_answer' can't be null";
        }
        if ($this->container['time_release'] === null) {
            $invalidProperties[] = "'time_release' can't be null";
        }
        if ($this->container['time_talking'] === null) {
            $invalidProperties[] = "'time_talking' can't be null";
        }
        if ($this->container['time_holding'] === null) {
            $invalidProperties[] = "'time_holding' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['time_insert'] === null) {
            $invalidProperties[] = "'time_insert' can't be null";
        }
        if ($this->container['time_disp'] === null) {
            $invalidProperties[] = "'time_disp' can't be null";
        }
        if ($this->container['release_code'] === null) {
            $invalidProperties[] = "'release_code' can't be null";
        }
        if ($this->container['release_text'] === null) {
            $invalidProperties[] = "'release_text' can't be null";
        }
        if ($this->container['codec'] === null) {
            $invalidProperties[] = "'codec' can't be null";
        }
        if ($this->container['rly_prt_0'] === null) {
            $invalidProperties[] = "'rly_prt_0' can't be null";
        }
        if ($this->container['rly_prt_a'] === null) {
            $invalidProperties[] = "'rly_prt_a' can't be null";
        }
        if ($this->container['rly_prt_b'] === null) {
            $invalidProperties[] = "'rly_prt_b' can't be null";
        }
        if ($this->container['rly_cnt_a'] === null) {
            $invalidProperties[] = "'rly_cnt_a' can't be null";
        }
        if ($this->container['rly_cnt_b'] === null) {
            $invalidProperties[] = "'rly_cnt_b' can't be null";
        }
        if ($this->container['image_codec'] === null) {
            $invalidProperties[] = "'image_codec' can't be null";
        }
        if ($this->container['image_prt_0'] === null) {
            $invalidProperties[] = "'image_prt_0' can't be null";
        }
        if ($this->container['image_prt_a'] === null) {
            $invalidProperties[] = "'image_prt_a' can't be null";
        }
        if ($this->container['image_prt_b'] === null) {
            $invalidProperties[] = "'image_prt_b' can't be null";
        }
        if ($this->container['image_cnt_a'] === null) {
            $invalidProperties[] = "'image_cnt_a' can't be null";
        }
        if ($this->container['image_cnt_b'] === null) {
            $invalidProperties[] = "'image_cnt_b' can't be null";
        }
        if ($this->container['video_codec'] === null) {
            $invalidProperties[] = "'video_codec' can't be null";
        }
        if ($this->container['video_prt_0'] === null) {
            $invalidProperties[] = "'video_prt_0' can't be null";
        }
        if ($this->container['video_prt_a'] === null) {
            $invalidProperties[] = "'video_prt_a' can't be null";
        }
        if ($this->container['video_prt_b'] === null) {
            $invalidProperties[] = "'video_prt_b' can't be null";
        }
        if ($this->container['video_cnt_a'] === null) {
            $invalidProperties[] = "'video_cnt_a' can't be null";
        }
        if ($this->container['video_cnt_b'] === null) {
            $invalidProperties[] = "'video_cnt_b' can't be null";
        }
        if ($this->container['disp_type'] === null) {
            $invalidProperties[] = "'disp_type' can't be null";
        }
        if ($this->container['disposition'] === null) {
            $invalidProperties[] = "'disposition' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        if ($this->container['notes'] === null) {
            $invalidProperties[] = "'notes' can't be null";
        }
        if ($this->container['pac'] === null) {
            $invalidProperties[] = "'pac' can't be null";
        }
        if ($this->container['orig_logi_uri'] === null) {
            $invalidProperties[] = "'orig_logi_uri' can't be null";
        }
        if ($this->container['term_logi_uri'] === null) {
            $invalidProperties[] = "'term_logi_uri' can't be null";
        }
        if ($this->container['batch_tim_beg'] === null) {
            $invalidProperties[] = "'batch_tim_beg' can't be null";
        }
        if ($this->container['batch_tim_ans'] === null) {
            $invalidProperties[] = "'batch_tim_ans' can't be null";
        }
        if ($this->container['batch_hold'] === null) {
            $invalidProperties[] = "'batch_hold' can't be null";
        }
        if ($this->container['batch_dura'] === null) {
            $invalidProperties[] = "'batch_dura' can't be null";
        }
        if ($this->container['orig_id'] === null) {
            $invalidProperties[] = "'orig_id' can't be null";
        }
        if ($this->container['term_id'] === null) {
            $invalidProperties[] = "'term_id' can't be null";
        }
        if ($this->container['by_id'] === null) {
            $invalidProperties[] = "'by_id' can't be null";
        }
        if ($this->container['route_to'] === null) {
            $invalidProperties[] = "'route_to' can't be null";
        }
        if ($this->container['route_class'] === null) {
            $invalidProperties[] = "'route_class' can't be null";
        }
        if ($this->container['orig_territory'] === null) {
            $invalidProperties[] = "'orig_territory' can't be null";
        }
        if ($this->container['orig_site'] === null) {
            $invalidProperties[] = "'orig_site' can't be null";
        }
        if ($this->container['by_site'] === null) {
            $invalidProperties[] = "'by_site' can't be null";
        }
        if ($this->container['by_territory'] === null) {
            $invalidProperties[] = "'by_territory' can't be null";
        }
        if ($this->container['term_territory'] === null) {
            $invalidProperties[] = "'term_territory' can't be null";
        }
        if ($this->container['term_site'] === null) {
            $invalidProperties[] = "'term_site' can't be null";
        }
        if ($this->container['served_call_id'] === null) {
            $invalidProperties[] = "'served_call_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        if (is_null($hostname)) {
            throw new \InvalidArgumentException('non-nullable hostname cannot be null');
        }
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets mac
     *
     * @return string
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string $mac mac
     *
     * @return self
     */
    public function setMac($mac)
    {
        if (is_null($mac)) {
            throw new \InvalidArgumentException('non-nullable mac cannot be null');
        }
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets cdr_index
     *
     * @return int
     */
    public function getCdrIndex()
    {
        return $this->container['cdr_index'];
    }

    /**
     * Sets cdr_index
     *
     * @param int $cdr_index cdr_index
     *
     * @return self
     */
    public function setCdrIndex($cdr_index)
    {
        if (is_null($cdr_index)) {
            throw new \InvalidArgumentException('non-nullable cdr_index cannot be null');
        }
        $this->container['cdr_index'] = $cdr_index;

        return $this;
    }

    /**
     * Gets orig_callid
     *
     * @return string
     */
    public function getOrigCallid()
    {
        return $this->container['orig_callid'];
    }

    /**
     * Sets orig_callid
     *
     * @param string $orig_callid orig_callid
     *
     * @return self
     */
    public function setOrigCallid($orig_callid)
    {
        if (is_null($orig_callid)) {
            throw new \InvalidArgumentException('non-nullable orig_callid cannot be null');
        }
        $this->container['orig_callid'] = $orig_callid;

        return $this;
    }

    /**
     * Gets orig_ip
     *
     * @return string
     */
    public function getOrigIp()
    {
        return $this->container['orig_ip'];
    }

    /**
     * Sets orig_ip
     *
     * @param string $orig_ip orig_ip
     *
     * @return self
     */
    public function setOrigIp($orig_ip)
    {
        if (is_null($orig_ip)) {
            throw new \InvalidArgumentException('non-nullable orig_ip cannot be null');
        }
        $this->container['orig_ip'] = $orig_ip;

        return $this;
    }

    /**
     * Gets orig_match
     *
     * @return string
     */
    public function getOrigMatch()
    {
        return $this->container['orig_match'];
    }

    /**
     * Sets orig_match
     *
     * @param string $orig_match orig_match
     *
     * @return self
     */
    public function setOrigMatch($orig_match)
    {
        if (is_null($orig_match)) {
            throw new \InvalidArgumentException('non-nullable orig_match cannot be null');
        }
        $this->container['orig_match'] = $orig_match;

        return $this;
    }

    /**
     * Gets orig_sub
     *
     * @return string
     */
    public function getOrigSub()
    {
        return $this->container['orig_sub'];
    }

    /**
     * Sets orig_sub
     *
     * @param string $orig_sub orig_sub
     *
     * @return self
     */
    public function setOrigSub($orig_sub)
    {
        if (is_null($orig_sub)) {
            throw new \InvalidArgumentException('non-nullable orig_sub cannot be null');
        }
        $this->container['orig_sub'] = $orig_sub;

        return $this;
    }

    /**
     * Gets orig_domain
     *
     * @return string
     */
    public function getOrigDomain()
    {
        return $this->container['orig_domain'];
    }

    /**
     * Sets orig_domain
     *
     * @param string $orig_domain orig_domain
     *
     * @return self
     */
    public function setOrigDomain($orig_domain)
    {
        if (is_null($orig_domain)) {
            throw new \InvalidArgumentException('non-nullable orig_domain cannot be null');
        }
        $this->container['orig_domain'] = $orig_domain;

        return $this;
    }

    /**
     * Gets orig_group
     *
     * @return mixed
     */
    public function getOrigGroup()
    {
        return $this->container['orig_group'];
    }

    /**
     * Sets orig_group
     *
     * @param mixed $orig_group orig_group
     *
     * @return self
     */
    public function setOrigGroup($orig_group)
    {
        if (is_null($orig_group)) {
            array_push($this->openAPINullablesSetToNull, 'orig_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orig_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orig_group'] = $orig_group;

        return $this;
    }

    /**
     * Gets orig_from_uri
     *
     * @return string
     */
    public function getOrigFromUri()
    {
        return $this->container['orig_from_uri'];
    }

    /**
     * Sets orig_from_uri
     *
     * @param string $orig_from_uri orig_from_uri
     *
     * @return self
     */
    public function setOrigFromUri($orig_from_uri)
    {
        if (is_null($orig_from_uri)) {
            throw new \InvalidArgumentException('non-nullable orig_from_uri cannot be null');
        }
        $this->container['orig_from_uri'] = $orig_from_uri;

        return $this;
    }

    /**
     * Gets orig_from_name
     *
     * @return string
     */
    public function getOrigFromName()
    {
        return $this->container['orig_from_name'];
    }

    /**
     * Sets orig_from_name
     *
     * @param string $orig_from_name orig_from_name
     *
     * @return self
     */
    public function setOrigFromName($orig_from_name)
    {
        if (is_null($orig_from_name)) {
            throw new \InvalidArgumentException('non-nullable orig_from_name cannot be null');
        }
        $this->container['orig_from_name'] = $orig_from_name;

        return $this;
    }

    /**
     * Gets orig_from_user
     *
     * @return int
     */
    public function getOrigFromUser()
    {
        return $this->container['orig_from_user'];
    }

    /**
     * Sets orig_from_user
     *
     * @param int $orig_from_user orig_from_user
     *
     * @return self
     */
    public function setOrigFromUser($orig_from_user)
    {
        if (is_null($orig_from_user)) {
            throw new \InvalidArgumentException('non-nullable orig_from_user cannot be null');
        }
        $this->container['orig_from_user'] = $orig_from_user;

        return $this;
    }

    /**
     * Gets orig_from_host
     *
     * @return string
     */
    public function getOrigFromHost()
    {
        return $this->container['orig_from_host'];
    }

    /**
     * Sets orig_from_host
     *
     * @param string $orig_from_host orig_from_host
     *
     * @return self
     */
    public function setOrigFromHost($orig_from_host)
    {
        if (is_null($orig_from_host)) {
            throw new \InvalidArgumentException('non-nullable orig_from_host cannot be null');
        }
        $this->container['orig_from_host'] = $orig_from_host;

        return $this;
    }

    /**
     * Gets orig_req_uri
     *
     * @return string
     */
    public function getOrigReqUri()
    {
        return $this->container['orig_req_uri'];
    }

    /**
     * Sets orig_req_uri
     *
     * @param string $orig_req_uri orig_req_uri
     *
     * @return self
     */
    public function setOrigReqUri($orig_req_uri)
    {
        if (is_null($orig_req_uri)) {
            throw new \InvalidArgumentException('non-nullable orig_req_uri cannot be null');
        }
        $this->container['orig_req_uri'] = $orig_req_uri;

        return $this;
    }

    /**
     * Gets orig_req_user
     *
     * @return string
     */
    public function getOrigReqUser()
    {
        return $this->container['orig_req_user'];
    }

    /**
     * Sets orig_req_user
     *
     * @param string $orig_req_user orig_req_user
     *
     * @return self
     */
    public function setOrigReqUser($orig_req_user)
    {
        if (is_null($orig_req_user)) {
            throw new \InvalidArgumentException('non-nullable orig_req_user cannot be null');
        }
        $this->container['orig_req_user'] = $orig_req_user;

        return $this;
    }

    /**
     * Gets orig_req_host
     *
     * @return string
     */
    public function getOrigReqHost()
    {
        return $this->container['orig_req_host'];
    }

    /**
     * Sets orig_req_host
     *
     * @param string $orig_req_host orig_req_host
     *
     * @return self
     */
    public function setOrigReqHost($orig_req_host)
    {
        if (is_null($orig_req_host)) {
            throw new \InvalidArgumentException('non-nullable orig_req_host cannot be null');
        }
        $this->container['orig_req_host'] = $orig_req_host;

        return $this;
    }

    /**
     * Gets orig_to_uri
     *
     * @return string
     */
    public function getOrigToUri()
    {
        return $this->container['orig_to_uri'];
    }

    /**
     * Sets orig_to_uri
     *
     * @param string $orig_to_uri orig_to_uri
     *
     * @return self
     */
    public function setOrigToUri($orig_to_uri)
    {
        if (is_null($orig_to_uri)) {
            throw new \InvalidArgumentException('non-nullable orig_to_uri cannot be null');
        }
        $this->container['orig_to_uri'] = $orig_to_uri;

        return $this;
    }

    /**
     * Gets orig_to_user
     *
     * @return string
     */
    public function getOrigToUser()
    {
        return $this->container['orig_to_user'];
    }

    /**
     * Sets orig_to_user
     *
     * @param string $orig_to_user orig_to_user
     *
     * @return self
     */
    public function setOrigToUser($orig_to_user)
    {
        if (is_null($orig_to_user)) {
            throw new \InvalidArgumentException('non-nullable orig_to_user cannot be null');
        }
        $this->container['orig_to_user'] = $orig_to_user;

        return $this;
    }

    /**
     * Gets orig_to_host
     *
     * @return string
     */
    public function getOrigToHost()
    {
        return $this->container['orig_to_host'];
    }

    /**
     * Sets orig_to_host
     *
     * @param string $orig_to_host orig_to_host
     *
     * @return self
     */
    public function setOrigToHost($orig_to_host)
    {
        if (is_null($orig_to_host)) {
            throw new \InvalidArgumentException('non-nullable orig_to_host cannot be null');
        }
        $this->container['orig_to_host'] = $orig_to_host;

        return $this;
    }

    /**
     * Gets by_action
     *
     * @return string
     */
    public function getByAction()
    {
        return $this->container['by_action'];
    }

    /**
     * Sets by_action
     *
     * @param string $by_action by_action
     *
     * @return self
     */
    public function setByAction($by_action)
    {
        if (is_null($by_action)) {
            throw new \InvalidArgumentException('non-nullable by_action cannot be null');
        }
        $this->container['by_action'] = $by_action;

        return $this;
    }

    /**
     * Gets by_sub
     *
     * @return string
     */
    public function getBySub()
    {
        return $this->container['by_sub'];
    }

    /**
     * Sets by_sub
     *
     * @param string $by_sub by_sub
     *
     * @return self
     */
    public function setBySub($by_sub)
    {
        if (is_null($by_sub)) {
            throw new \InvalidArgumentException('non-nullable by_sub cannot be null');
        }
        $this->container['by_sub'] = $by_sub;

        return $this;
    }

    /**
     * Gets by_domain
     *
     * @return string
     */
    public function getByDomain()
    {
        return $this->container['by_domain'];
    }

    /**
     * Sets by_domain
     *
     * @param string $by_domain by_domain
     *
     * @return self
     */
    public function setByDomain($by_domain)
    {
        if (is_null($by_domain)) {
            throw new \InvalidArgumentException('non-nullable by_domain cannot be null');
        }
        $this->container['by_domain'] = $by_domain;

        return $this;
    }

    /**
     * Gets by_group
     *
     * @return mixed
     */
    public function getByGroup()
    {
        return $this->container['by_group'];
    }

    /**
     * Sets by_group
     *
     * @param mixed $by_group by_group
     *
     * @return self
     */
    public function setByGroup($by_group)
    {
        if (is_null($by_group)) {
            array_push($this->openAPINullablesSetToNull, 'by_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('by_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['by_group'] = $by_group;

        return $this;
    }

    /**
     * Gets by_uri
     *
     * @return string
     */
    public function getByUri()
    {
        return $this->container['by_uri'];
    }

    /**
     * Sets by_uri
     *
     * @param string $by_uri by_uri
     *
     * @return self
     */
    public function setByUri($by_uri)
    {
        if (is_null($by_uri)) {
            throw new \InvalidArgumentException('non-nullable by_uri cannot be null');
        }
        $this->container['by_uri'] = $by_uri;

        return $this;
    }

    /**
     * Gets by_callid
     *
     * @return string
     */
    public function getByCallid()
    {
        return $this->container['by_callid'];
    }

    /**
     * Sets by_callid
     *
     * @param string $by_callid by_callid
     *
     * @return self
     */
    public function setByCallid($by_callid)
    {
        if (is_null($by_callid)) {
            throw new \InvalidArgumentException('non-nullable by_callid cannot be null');
        }
        $this->container['by_callid'] = $by_callid;

        return $this;
    }

    /**
     * Gets term_callid
     *
     * @return string
     */
    public function getTermCallid()
    {
        return $this->container['term_callid'];
    }

    /**
     * Sets term_callid
     *
     * @param string $term_callid term_callid
     *
     * @return self
     */
    public function setTermCallid($term_callid)
    {
        if (is_null($term_callid)) {
            throw new \InvalidArgumentException('non-nullable term_callid cannot be null');
        }
        $this->container['term_callid'] = $term_callid;

        return $this;
    }

    /**
     * Gets term_ip
     *
     * @return string
     */
    public function getTermIp()
    {
        return $this->container['term_ip'];
    }

    /**
     * Sets term_ip
     *
     * @param string $term_ip term_ip
     *
     * @return self
     */
    public function setTermIp($term_ip)
    {
        if (is_null($term_ip)) {
            throw new \InvalidArgumentException('non-nullable term_ip cannot be null');
        }
        $this->container['term_ip'] = $term_ip;

        return $this;
    }

    /**
     * Gets term_match
     *
     * @return string
     */
    public function getTermMatch()
    {
        return $this->container['term_match'];
    }

    /**
     * Sets term_match
     *
     * @param string $term_match term_match
     *
     * @return self
     */
    public function setTermMatch($term_match)
    {
        if (is_null($term_match)) {
            throw new \InvalidArgumentException('non-nullable term_match cannot be null');
        }
        $this->container['term_match'] = $term_match;

        return $this;
    }

    /**
     * Gets term_sub
     *
     * @return string
     */
    public function getTermSub()
    {
        return $this->container['term_sub'];
    }

    /**
     * Sets term_sub
     *
     * @param string $term_sub term_sub
     *
     * @return self
     */
    public function setTermSub($term_sub)
    {
        if (is_null($term_sub)) {
            throw new \InvalidArgumentException('non-nullable term_sub cannot be null');
        }
        $this->container['term_sub'] = $term_sub;

        return $this;
    }

    /**
     * Gets term_domain
     *
     * @return string
     */
    public function getTermDomain()
    {
        return $this->container['term_domain'];
    }

    /**
     * Sets term_domain
     *
     * @param string $term_domain term_domain
     *
     * @return self
     */
    public function setTermDomain($term_domain)
    {
        if (is_null($term_domain)) {
            throw new \InvalidArgumentException('non-nullable term_domain cannot be null');
        }
        $this->container['term_domain'] = $term_domain;

        return $this;
    }

    /**
     * Gets term_to_uri
     *
     * @return string
     */
    public function getTermToUri()
    {
        return $this->container['term_to_uri'];
    }

    /**
     * Sets term_to_uri
     *
     * @param string $term_to_uri term_to_uri
     *
     * @return self
     */
    public function setTermToUri($term_to_uri)
    {
        if (is_null($term_to_uri)) {
            throw new \InvalidArgumentException('non-nullable term_to_uri cannot be null');
        }
        $this->container['term_to_uri'] = $term_to_uri;

        return $this;
    }

    /**
     * Gets term_group
     *
     * @return mixed
     */
    public function getTermGroup()
    {
        return $this->container['term_group'];
    }

    /**
     * Sets term_group
     *
     * @param mixed $term_group term_group
     *
     * @return self
     */
    public function setTermGroup($term_group)
    {
        if (is_null($term_group)) {
            array_push($this->openAPINullablesSetToNull, 'term_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('term_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['term_group'] = $term_group;

        return $this;
    }

    /**
     * Gets time_start
     *
     * @return int
     */
    public function getTimeStart()
    {
        return $this->container['time_start'];
    }

    /**
     * Sets time_start
     *
     * @param int $time_start time_start
     *
     * @return self
     */
    public function setTimeStart($time_start)
    {
        if (is_null($time_start)) {
            throw new \InvalidArgumentException('non-nullable time_start cannot be null');
        }
        $this->container['time_start'] = $time_start;

        return $this;
    }

    /**
     * Gets time_ringing
     *
     * @return mixed
     */
    public function getTimeRinging()
    {
        return $this->container['time_ringing'];
    }

    /**
     * Sets time_ringing
     *
     * @param mixed $time_ringing time_ringing
     *
     * @return self
     */
    public function setTimeRinging($time_ringing)
    {
        if (is_null($time_ringing)) {
            array_push($this->openAPINullablesSetToNull, 'time_ringing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_ringing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_ringing'] = $time_ringing;

        return $this;
    }

    /**
     * Gets time_answer
     *
     * @return int
     */
    public function getTimeAnswer()
    {
        return $this->container['time_answer'];
    }

    /**
     * Sets time_answer
     *
     * @param int $time_answer time_answer
     *
     * @return self
     */
    public function setTimeAnswer($time_answer)
    {
        if (is_null($time_answer)) {
            throw new \InvalidArgumentException('non-nullable time_answer cannot be null');
        }
        $this->container['time_answer'] = $time_answer;

        return $this;
    }

    /**
     * Gets time_release
     *
     * @return int
     */
    public function getTimeRelease()
    {
        return $this->container['time_release'];
    }

    /**
     * Sets time_release
     *
     * @param int $time_release time_release
     *
     * @return self
     */
    public function setTimeRelease($time_release)
    {
        if (is_null($time_release)) {
            throw new \InvalidArgumentException('non-nullable time_release cannot be null');
        }
        $this->container['time_release'] = $time_release;

        return $this;
    }

    /**
     * Gets time_talking
     *
     * @return int
     */
    public function getTimeTalking()
    {
        return $this->container['time_talking'];
    }

    /**
     * Sets time_talking
     *
     * @param int $time_talking time_talking
     *
     * @return self
     */
    public function setTimeTalking($time_talking)
    {
        if (is_null($time_talking)) {
            throw new \InvalidArgumentException('non-nullable time_talking cannot be null');
        }
        $this->container['time_talking'] = $time_talking;

        return $this;
    }

    /**
     * Gets time_holding
     *
     * @return int
     */
    public function getTimeHolding()
    {
        return $this->container['time_holding'];
    }

    /**
     * Sets time_holding
     *
     * @param int $time_holding time_holding
     *
     * @return self
     */
    public function setTimeHolding($time_holding)
    {
        if (is_null($time_holding)) {
            throw new \InvalidArgumentException('non-nullable time_holding cannot be null');
        }
        $this->container['time_holding'] = $time_holding;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets time_insert
     *
     * @return mixed
     */
    public function getTimeInsert()
    {
        return $this->container['time_insert'];
    }

    /**
     * Sets time_insert
     *
     * @param mixed $time_insert time_insert
     *
     * @return self
     */
    public function setTimeInsert($time_insert)
    {
        if (is_null($time_insert)) {
            array_push($this->openAPINullablesSetToNull, 'time_insert');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_insert', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_insert'] = $time_insert;

        return $this;
    }

    /**
     * Gets time_disp
     *
     * @return mixed
     */
    public function getTimeDisp()
    {
        return $this->container['time_disp'];
    }

    /**
     * Sets time_disp
     *
     * @param mixed $time_disp time_disp
     *
     * @return self
     */
    public function setTimeDisp($time_disp)
    {
        if (is_null($time_disp)) {
            array_push($this->openAPINullablesSetToNull, 'time_disp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_disp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_disp'] = $time_disp;

        return $this;
    }

    /**
     * Gets release_code
     *
     * @return string
     */
    public function getReleaseCode()
    {
        return $this->container['release_code'];
    }

    /**
     * Sets release_code
     *
     * @param string $release_code release_code
     *
     * @return self
     */
    public function setReleaseCode($release_code)
    {
        if (is_null($release_code)) {
            throw new \InvalidArgumentException('non-nullable release_code cannot be null');
        }
        $this->container['release_code'] = $release_code;

        return $this;
    }

    /**
     * Gets release_text
     *
     * @return string
     */
    public function getReleaseText()
    {
        return $this->container['release_text'];
    }

    /**
     * Sets release_text
     *
     * @param string $release_text release_text
     *
     * @return self
     */
    public function setReleaseText($release_text)
    {
        if (is_null($release_text)) {
            throw new \InvalidArgumentException('non-nullable release_text cannot be null');
        }
        $this->container['release_text'] = $release_text;

        return $this;
    }

    /**
     * Gets codec
     *
     * @return string
     */
    public function getCodec()
    {
        return $this->container['codec'];
    }

    /**
     * Sets codec
     *
     * @param string $codec codec
     *
     * @return self
     */
    public function setCodec($codec)
    {
        if (is_null($codec)) {
            throw new \InvalidArgumentException('non-nullable codec cannot be null');
        }
        $this->container['codec'] = $codec;

        return $this;
    }

    /**
     * Gets rly_prt_0
     *
     * @return int
     */
    public function getRlyPrt0()
    {
        return $this->container['rly_prt_0'];
    }

    /**
     * Sets rly_prt_0
     *
     * @param int $rly_prt_0 rly_prt_0
     *
     * @return self
     */
    public function setRlyPrt0($rly_prt_0)
    {
        if (is_null($rly_prt_0)) {
            throw new \InvalidArgumentException('non-nullable rly_prt_0 cannot be null');
        }
        $this->container['rly_prt_0'] = $rly_prt_0;

        return $this;
    }

    /**
     * Gets rly_prt_a
     *
     * @return string
     */
    public function getRlyPrtA()
    {
        return $this->container['rly_prt_a'];
    }

    /**
     * Sets rly_prt_a
     *
     * @param string $rly_prt_a rly_prt_a
     *
     * @return self
     */
    public function setRlyPrtA($rly_prt_a)
    {
        if (is_null($rly_prt_a)) {
            throw new \InvalidArgumentException('non-nullable rly_prt_a cannot be null');
        }
        $this->container['rly_prt_a'] = $rly_prt_a;

        return $this;
    }

    /**
     * Gets rly_prt_b
     *
     * @return string
     */
    public function getRlyPrtB()
    {
        return $this->container['rly_prt_b'];
    }

    /**
     * Sets rly_prt_b
     *
     * @param string $rly_prt_b rly_prt_b
     *
     * @return self
     */
    public function setRlyPrtB($rly_prt_b)
    {
        if (is_null($rly_prt_b)) {
            throw new \InvalidArgumentException('non-nullable rly_prt_b cannot be null');
        }
        $this->container['rly_prt_b'] = $rly_prt_b;

        return $this;
    }

    /**
     * Gets rly_cnt_a
     *
     * @return int
     */
    public function getRlyCntA()
    {
        return $this->container['rly_cnt_a'];
    }

    /**
     * Sets rly_cnt_a
     *
     * @param int $rly_cnt_a rly_cnt_a
     *
     * @return self
     */
    public function setRlyCntA($rly_cnt_a)
    {
        if (is_null($rly_cnt_a)) {
            throw new \InvalidArgumentException('non-nullable rly_cnt_a cannot be null');
        }
        $this->container['rly_cnt_a'] = $rly_cnt_a;

        return $this;
    }

    /**
     * Gets rly_cnt_b
     *
     * @return int
     */
    public function getRlyCntB()
    {
        return $this->container['rly_cnt_b'];
    }

    /**
     * Sets rly_cnt_b
     *
     * @param int $rly_cnt_b rly_cnt_b
     *
     * @return self
     */
    public function setRlyCntB($rly_cnt_b)
    {
        if (is_null($rly_cnt_b)) {
            throw new \InvalidArgumentException('non-nullable rly_cnt_b cannot be null');
        }
        $this->container['rly_cnt_b'] = $rly_cnt_b;

        return $this;
    }

    /**
     * Gets image_codec
     *
     * @return mixed
     */
    public function getImageCodec()
    {
        return $this->container['image_codec'];
    }

    /**
     * Sets image_codec
     *
     * @param mixed $image_codec image_codec
     *
     * @return self
     */
    public function setImageCodec($image_codec)
    {
        if (is_null($image_codec)) {
            array_push($this->openAPINullablesSetToNull, 'image_codec');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_codec', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_codec'] = $image_codec;

        return $this;
    }

    /**
     * Gets image_prt_0
     *
     * @return mixed
     */
    public function getImagePrt0()
    {
        return $this->container['image_prt_0'];
    }

    /**
     * Sets image_prt_0
     *
     * @param mixed $image_prt_0 image_prt_0
     *
     * @return self
     */
    public function setImagePrt0($image_prt_0)
    {
        if (is_null($image_prt_0)) {
            array_push($this->openAPINullablesSetToNull, 'image_prt_0');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_prt_0', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_prt_0'] = $image_prt_0;

        return $this;
    }

    /**
     * Gets image_prt_a
     *
     * @return mixed
     */
    public function getImagePrtA()
    {
        return $this->container['image_prt_a'];
    }

    /**
     * Sets image_prt_a
     *
     * @param mixed $image_prt_a image_prt_a
     *
     * @return self
     */
    public function setImagePrtA($image_prt_a)
    {
        if (is_null($image_prt_a)) {
            array_push($this->openAPINullablesSetToNull, 'image_prt_a');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_prt_a', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_prt_a'] = $image_prt_a;

        return $this;
    }

    /**
     * Gets image_prt_b
     *
     * @return mixed
     */
    public function getImagePrtB()
    {
        return $this->container['image_prt_b'];
    }

    /**
     * Sets image_prt_b
     *
     * @param mixed $image_prt_b image_prt_b
     *
     * @return self
     */
    public function setImagePrtB($image_prt_b)
    {
        if (is_null($image_prt_b)) {
            array_push($this->openAPINullablesSetToNull, 'image_prt_b');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_prt_b', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_prt_b'] = $image_prt_b;

        return $this;
    }

    /**
     * Gets image_cnt_a
     *
     * @return mixed
     */
    public function getImageCntA()
    {
        return $this->container['image_cnt_a'];
    }

    /**
     * Sets image_cnt_a
     *
     * @param mixed $image_cnt_a image_cnt_a
     *
     * @return self
     */
    public function setImageCntA($image_cnt_a)
    {
        if (is_null($image_cnt_a)) {
            array_push($this->openAPINullablesSetToNull, 'image_cnt_a');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_cnt_a', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_cnt_a'] = $image_cnt_a;

        return $this;
    }

    /**
     * Gets image_cnt_b
     *
     * @return mixed
     */
    public function getImageCntB()
    {
        return $this->container['image_cnt_b'];
    }

    /**
     * Sets image_cnt_b
     *
     * @param mixed $image_cnt_b image_cnt_b
     *
     * @return self
     */
    public function setImageCntB($image_cnt_b)
    {
        if (is_null($image_cnt_b)) {
            array_push($this->openAPINullablesSetToNull, 'image_cnt_b');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_cnt_b', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_cnt_b'] = $image_cnt_b;

        return $this;
    }

    /**
     * Gets video_codec
     *
     * @return mixed
     */
    public function getVideoCodec()
    {
        return $this->container['video_codec'];
    }

    /**
     * Sets video_codec
     *
     * @param mixed $video_codec video_codec
     *
     * @return self
     */
    public function setVideoCodec($video_codec)
    {
        if (is_null($video_codec)) {
            array_push($this->openAPINullablesSetToNull, 'video_codec');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_codec', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_codec'] = $video_codec;

        return $this;
    }

    /**
     * Gets video_prt_0
     *
     * @return mixed
     */
    public function getVideoPrt0()
    {
        return $this->container['video_prt_0'];
    }

    /**
     * Sets video_prt_0
     *
     * @param mixed $video_prt_0 video_prt_0
     *
     * @return self
     */
    public function setVideoPrt0($video_prt_0)
    {
        if (is_null($video_prt_0)) {
            array_push($this->openAPINullablesSetToNull, 'video_prt_0');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_prt_0', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_prt_0'] = $video_prt_0;

        return $this;
    }

    /**
     * Gets video_prt_a
     *
     * @return mixed
     */
    public function getVideoPrtA()
    {
        return $this->container['video_prt_a'];
    }

    /**
     * Sets video_prt_a
     *
     * @param mixed $video_prt_a video_prt_a
     *
     * @return self
     */
    public function setVideoPrtA($video_prt_a)
    {
        if (is_null($video_prt_a)) {
            array_push($this->openAPINullablesSetToNull, 'video_prt_a');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_prt_a', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_prt_a'] = $video_prt_a;

        return $this;
    }

    /**
     * Gets video_prt_b
     *
     * @return mixed
     */
    public function getVideoPrtB()
    {
        return $this->container['video_prt_b'];
    }

    /**
     * Sets video_prt_b
     *
     * @param mixed $video_prt_b video_prt_b
     *
     * @return self
     */
    public function setVideoPrtB($video_prt_b)
    {
        if (is_null($video_prt_b)) {
            array_push($this->openAPINullablesSetToNull, 'video_prt_b');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_prt_b', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_prt_b'] = $video_prt_b;

        return $this;
    }

    /**
     * Gets video_cnt_a
     *
     * @return mixed
     */
    public function getVideoCntA()
    {
        return $this->container['video_cnt_a'];
    }

    /**
     * Sets video_cnt_a
     *
     * @param mixed $video_cnt_a video_cnt_a
     *
     * @return self
     */
    public function setVideoCntA($video_cnt_a)
    {
        if (is_null($video_cnt_a)) {
            array_push($this->openAPINullablesSetToNull, 'video_cnt_a');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_cnt_a', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_cnt_a'] = $video_cnt_a;

        return $this;
    }

    /**
     * Gets video_cnt_b
     *
     * @return mixed
     */
    public function getVideoCntB()
    {
        return $this->container['video_cnt_b'];
    }

    /**
     * Sets video_cnt_b
     *
     * @param mixed $video_cnt_b video_cnt_b
     *
     * @return self
     */
    public function setVideoCntB($video_cnt_b)
    {
        if (is_null($video_cnt_b)) {
            array_push($this->openAPINullablesSetToNull, 'video_cnt_b');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_cnt_b', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_cnt_b'] = $video_cnt_b;

        return $this;
    }

    /**
     * Gets disp_type
     *
     * @return mixed
     */
    public function getDispType()
    {
        return $this->container['disp_type'];
    }

    /**
     * Sets disp_type
     *
     * @param mixed $disp_type disp_type
     *
     * @return self
     */
    public function setDispType($disp_type)
    {
        if (is_null($disp_type)) {
            array_push($this->openAPINullablesSetToNull, 'disp_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disp_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disp_type'] = $disp_type;

        return $this;
    }

    /**
     * Gets disposition
     *
     * @return mixed
     */
    public function getDisposition()
    {
        return $this->container['disposition'];
    }

    /**
     * Sets disposition
     *
     * @param mixed $disposition disposition
     *
     * @return self
     */
    public function setDisposition($disposition)
    {
        if (is_null($disposition)) {
            array_push($this->openAPINullablesSetToNull, 'disposition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disposition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disposition'] = $disposition;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return mixed
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param mixed $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            array_push($this->openAPINullablesSetToNull, 'reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return mixed
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param mixed $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            array_push($this->openAPINullablesSetToNull, 'notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets pac
     *
     * @return mixed
     */
    public function getPac()
    {
        return $this->container['pac'];
    }

    /**
     * Sets pac
     *
     * @param mixed $pac pac
     *
     * @return self
     */
    public function setPac($pac)
    {
        if (is_null($pac)) {
            array_push($this->openAPINullablesSetToNull, 'pac');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pac', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pac'] = $pac;

        return $this;
    }

    /**
     * Gets orig_logi_uri
     *
     * @return string
     */
    public function getOrigLogiUri()
    {
        return $this->container['orig_logi_uri'];
    }

    /**
     * Sets orig_logi_uri
     *
     * @param string $orig_logi_uri orig_logi_uri
     *
     * @return self
     */
    public function setOrigLogiUri($orig_logi_uri)
    {
        if (is_null($orig_logi_uri)) {
            throw new \InvalidArgumentException('non-nullable orig_logi_uri cannot be null');
        }
        $this->container['orig_logi_uri'] = $orig_logi_uri;

        return $this;
    }

    /**
     * Gets term_logi_uri
     *
     * @return string
     */
    public function getTermLogiUri()
    {
        return $this->container['term_logi_uri'];
    }

    /**
     * Sets term_logi_uri
     *
     * @param string $term_logi_uri term_logi_uri
     *
     * @return self
     */
    public function setTermLogiUri($term_logi_uri)
    {
        if (is_null($term_logi_uri)) {
            throw new \InvalidArgumentException('non-nullable term_logi_uri cannot be null');
        }
        $this->container['term_logi_uri'] = $term_logi_uri;

        return $this;
    }

    /**
     * Gets batch_tim_beg
     *
     * @return int
     */
    public function getBatchTimBeg()
    {
        return $this->container['batch_tim_beg'];
    }

    /**
     * Sets batch_tim_beg
     *
     * @param int $batch_tim_beg batch_tim_beg
     *
     * @return self
     */
    public function setBatchTimBeg($batch_tim_beg)
    {
        if (is_null($batch_tim_beg)) {
            throw new \InvalidArgumentException('non-nullable batch_tim_beg cannot be null');
        }
        $this->container['batch_tim_beg'] = $batch_tim_beg;

        return $this;
    }

    /**
     * Gets batch_tim_ans
     *
     * @return int
     */
    public function getBatchTimAns()
    {
        return $this->container['batch_tim_ans'];
    }

    /**
     * Sets batch_tim_ans
     *
     * @param int $batch_tim_ans batch_tim_ans
     *
     * @return self
     */
    public function setBatchTimAns($batch_tim_ans)
    {
        if (is_null($batch_tim_ans)) {
            throw new \InvalidArgumentException('non-nullable batch_tim_ans cannot be null');
        }
        $this->container['batch_tim_ans'] = $batch_tim_ans;

        return $this;
    }

    /**
     * Gets batch_hold
     *
     * @return int
     */
    public function getBatchHold()
    {
        return $this->container['batch_hold'];
    }

    /**
     * Sets batch_hold
     *
     * @param int $batch_hold batch_hold
     *
     * @return self
     */
    public function setBatchHold($batch_hold)
    {
        if (is_null($batch_hold)) {
            throw new \InvalidArgumentException('non-nullable batch_hold cannot be null');
        }
        $this->container['batch_hold'] = $batch_hold;

        return $this;
    }

    /**
     * Gets batch_dura
     *
     * @return int
     */
    public function getBatchDura()
    {
        return $this->container['batch_dura'];
    }

    /**
     * Sets batch_dura
     *
     * @param int $batch_dura batch_dura
     *
     * @return self
     */
    public function setBatchDura($batch_dura)
    {
        if (is_null($batch_dura)) {
            throw new \InvalidArgumentException('non-nullable batch_dura cannot be null');
        }
        $this->container['batch_dura'] = $batch_dura;

        return $this;
    }

    /**
     * Gets orig_id
     *
     * @return int
     */
    public function getOrigId()
    {
        return $this->container['orig_id'];
    }

    /**
     * Sets orig_id
     *
     * @param int $orig_id orig_id
     *
     * @return self
     */
    public function setOrigId($orig_id)
    {
        if (is_null($orig_id)) {
            throw new \InvalidArgumentException('non-nullable orig_id cannot be null');
        }
        $this->container['orig_id'] = $orig_id;

        return $this;
    }

    /**
     * Gets term_id
     *
     * @return int
     */
    public function getTermId()
    {
        return $this->container['term_id'];
    }

    /**
     * Sets term_id
     *
     * @param int $term_id term_id
     *
     * @return self
     */
    public function setTermId($term_id)
    {
        if (is_null($term_id)) {
            throw new \InvalidArgumentException('non-nullable term_id cannot be null');
        }
        $this->container['term_id'] = $term_id;

        return $this;
    }

    /**
     * Gets by_id
     *
     * @return int
     */
    public function getById()
    {
        return $this->container['by_id'];
    }

    /**
     * Sets by_id
     *
     * @param int $by_id by_id
     *
     * @return self
     */
    public function setById($by_id)
    {
        if (is_null($by_id)) {
            throw new \InvalidArgumentException('non-nullable by_id cannot be null');
        }
        $this->container['by_id'] = $by_id;

        return $this;
    }

    /**
     * Gets route_to
     *
     * @return string
     */
    public function getRouteTo()
    {
        return $this->container['route_to'];
    }

    /**
     * Sets route_to
     *
     * @param string $route_to route_to
     *
     * @return self
     */
    public function setRouteTo($route_to)
    {
        if (is_null($route_to)) {
            throw new \InvalidArgumentException('non-nullable route_to cannot be null');
        }
        $this->container['route_to'] = $route_to;

        return $this;
    }

    /**
     * Gets route_class
     *
     * @return int
     */
    public function getRouteClass()
    {
        return $this->container['route_class'];
    }

    /**
     * Sets route_class
     *
     * @param int $route_class route_class
     *
     * @return self
     */
    public function setRouteClass($route_class)
    {
        if (is_null($route_class)) {
            throw new \InvalidArgumentException('non-nullable route_class cannot be null');
        }
        $this->container['route_class'] = $route_class;

        return $this;
    }

    /**
     * Gets orig_territory
     *
     * @return string
     */
    public function getOrigTerritory()
    {
        return $this->container['orig_territory'];
    }

    /**
     * Sets orig_territory
     *
     * @param string $orig_territory orig_territory
     *
     * @return self
     */
    public function setOrigTerritory($orig_territory)
    {
        if (is_null($orig_territory)) {
            throw new \InvalidArgumentException('non-nullable orig_territory cannot be null');
        }
        $this->container['orig_territory'] = $orig_territory;

        return $this;
    }

    /**
     * Gets orig_site
     *
     * @return string
     */
    public function getOrigSite()
    {
        return $this->container['orig_site'];
    }

    /**
     * Sets orig_site
     *
     * @param string $orig_site orig_site
     *
     * @return self
     */
    public function setOrigSite($orig_site)
    {
        if (is_null($orig_site)) {
            throw new \InvalidArgumentException('non-nullable orig_site cannot be null');
        }
        $this->container['orig_site'] = $orig_site;

        return $this;
    }

    /**
     * Gets by_site
     *
     * @return string
     */
    public function getBySite()
    {
        return $this->container['by_site'];
    }

    /**
     * Sets by_site
     *
     * @param string $by_site by_site
     *
     * @return self
     */
    public function setBySite($by_site)
    {
        if (is_null($by_site)) {
            throw new \InvalidArgumentException('non-nullable by_site cannot be null');
        }
        $this->container['by_site'] = $by_site;

        return $this;
    }

    /**
     * Gets by_territory
     *
     * @return string
     */
    public function getByTerritory()
    {
        return $this->container['by_territory'];
    }

    /**
     * Sets by_territory
     *
     * @param string $by_territory by_territory
     *
     * @return self
     */
    public function setByTerritory($by_territory)
    {
        if (is_null($by_territory)) {
            throw new \InvalidArgumentException('non-nullable by_territory cannot be null');
        }
        $this->container['by_territory'] = $by_territory;

        return $this;
    }

    /**
     * Gets term_territory
     *
     * @return mixed
     */
    public function getTermTerritory()
    {
        return $this->container['term_territory'];
    }

    /**
     * Sets term_territory
     *
     * @param mixed $term_territory term_territory
     *
     * @return self
     */
    public function setTermTerritory($term_territory)
    {
        if (is_null($term_territory)) {
            array_push($this->openAPINullablesSetToNull, 'term_territory');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('term_territory', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['term_territory'] = $term_territory;

        return $this;
    }

    /**
     * Gets term_site
     *
     * @return mixed
     */
    public function getTermSite()
    {
        return $this->container['term_site'];
    }

    /**
     * Sets term_site
     *
     * @param mixed $term_site term_site
     *
     * @return self
     */
    public function setTermSite($term_site)
    {
        if (is_null($term_site)) {
            array_push($this->openAPINullablesSetToNull, 'term_site');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('term_site', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['term_site'] = $term_site;

        return $this;
    }

    /**
     * Gets served_call_id
     *
     * @return string
     */
    public function getServedCallId()
    {
        return $this->container['served_call_id'];
    }

    /**
     * Sets served_call_id
     *
     * @param string $served_call_id served_call_id
     *
     * @return self
     */
    public function setServedCallId($served_call_id)
    {
        if (is_null($served_call_id)) {
            throw new \InvalidArgumentException('non-nullable served_call_id cannot be null');
        }
        $this->container['served_call_id'] = $served_call_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


