<?php
/**
 * Meeting
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * Meeting Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Meeting implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Meeting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'domain' => 'string',
        'user' => 'string',
        'description' => 'string',
        'current_timestamp' => '\DateTime',
        'meeting_calendar_invite_id' => 'string',
        'meeting_ordinal_sequence' => 'int',
        'core_server' => 'string',
        'chat_session_id' => 'string',
        'meeting_registration_id' => 'string',
        'meeting_instance_id' => 'string',
        'meeting_name' => 'string',
        'meeting_type' => 'string',
        'limits_max_participants' => 'int',
        'meeting_status' => '\SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserMeetingsIdPost200ResponseMeetingStatus',
        'meeting_schedule_start_datetime' => '\DateTime',
        'timezone' => '\SpectrumVoip\\\\NetSapiens\Model\TimeZone',
        'meeting_schedule_duration_minutes' => 'int',
        'meeting_schedule_recurrence_rule' => 'string',
        'meeting_video_allowed_from' => 'string',
        'meeting_audio_allowed_from' => 'string',
        'meeting_chat_enabled' => 'int',
        'meeting_chat_history_enabled' => 'int',
        'meeting_question_answer_enabled' => 'int',
        'meeting_recording_enabled' => 'int',
        'meeting_join_require_invite_enabled' => 'int',
        'meeting_join_require_passcode_enabled' => 'int',
        'meeting_require_host_to_begin_enabled' => 'int',
        'meeting_allow_changes_from_hosts_enabled' => 'int',
        'meeting_hide_attendee_list_enabled' => 'int',
        'meeting_lock_enabled' => 'int',
        'meeting_lock_allowed' => 'string',
        'meeting_room_enabled' => 'int',
        'meeting_dial_in_number_blob' => '\SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserMeetingsIdPost200ResponseMeetingDialInNumberBlob',
        'meeting_passcode' => 'string',
        'meeting_previous_presenter_attendee_id' => 'string',
        'meeting_presenter_attendee_id' => 'string',
        'meeting_video_layout_' => 'string',
        'last_modified_datetime' => '\DateTime',
        'meeting_instance_actual_start_datetime' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'domain' => null,
        'user' => null,
        'description' => null,
        'current_timestamp' => 'date-time',
        'meeting_calendar_invite_id' => null,
        'meeting_ordinal_sequence' => null,
        'core_server' => null,
        'chat_session_id' => null,
        'meeting_registration_id' => null,
        'meeting_instance_id' => null,
        'meeting_name' => null,
        'meeting_type' => null,
        'limits_max_participants' => null,
        'meeting_status' => null,
        'meeting_schedule_start_datetime' => 'date-time',
        'timezone' => null,
        'meeting_schedule_duration_minutes' => null,
        'meeting_schedule_recurrence_rule' => null,
        'meeting_video_allowed_from' => null,
        'meeting_audio_allowed_from' => null,
        'meeting_chat_enabled' => null,
        'meeting_chat_history_enabled' => null,
        'meeting_question_answer_enabled' => null,
        'meeting_recording_enabled' => null,
        'meeting_join_require_invite_enabled' => null,
        'meeting_join_require_passcode_enabled' => null,
        'meeting_require_host_to_begin_enabled' => null,
        'meeting_allow_changes_from_hosts_enabled' => null,
        'meeting_hide_attendee_list_enabled' => null,
        'meeting_lock_enabled' => null,
        'meeting_lock_allowed' => null,
        'meeting_room_enabled' => null,
        'meeting_dial_in_number_blob' => null,
        'meeting_passcode' => null,
        'meeting_previous_presenter_attendee_id' => null,
        'meeting_presenter_attendee_id' => null,
        'meeting_video_layout_' => null,
        'last_modified_datetime' => 'date-time',
        'meeting_instance_actual_start_datetime' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'domain' => false,
        'user' => false,
        'description' => false,
        'current_timestamp' => false,
        'meeting_calendar_invite_id' => false,
        'meeting_ordinal_sequence' => false,
        'core_server' => false,
        'chat_session_id' => false,
        'meeting_registration_id' => false,
        'meeting_instance_id' => false,
        'meeting_name' => false,
        'meeting_type' => false,
        'limits_max_participants' => false,
        'meeting_status' => false,
        'meeting_schedule_start_datetime' => false,
        'timezone' => false,
        'meeting_schedule_duration_minutes' => false,
        'meeting_schedule_recurrence_rule' => false,
        'meeting_video_allowed_from' => false,
        'meeting_audio_allowed_from' => false,
        'meeting_chat_enabled' => false,
        'meeting_chat_history_enabled' => false,
        'meeting_question_answer_enabled' => false,
        'meeting_recording_enabled' => false,
        'meeting_join_require_invite_enabled' => false,
        'meeting_join_require_passcode_enabled' => false,
        'meeting_require_host_to_begin_enabled' => false,
        'meeting_allow_changes_from_hosts_enabled' => false,
        'meeting_hide_attendee_list_enabled' => false,
        'meeting_lock_enabled' => false,
        'meeting_lock_allowed' => false,
        'meeting_room_enabled' => false,
        'meeting_dial_in_number_blob' => false,
        'meeting_passcode' => false,
        'meeting_previous_presenter_attendee_id' => false,
        'meeting_presenter_attendee_id' => false,
        'meeting_video_layout_' => false,
        'last_modified_datetime' => false,
        'meeting_instance_actual_start_datetime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'domain' => 'domain',
        'user' => 'user',
        'description' => 'description',
        'current_timestamp' => 'current_timestamp',
        'meeting_calendar_invite_id' => 'meeting-calendar-invite-id',
        'meeting_ordinal_sequence' => 'meeting-ordinal-sequence',
        'core_server' => 'core-server',
        'chat_session_id' => 'chat-session-id',
        'meeting_registration_id' => 'meeting-registration-id',
        'meeting_instance_id' => 'meeting-instance-id',
        'meeting_name' => 'meeting-name',
        'meeting_type' => 'meeting-type',
        'limits_max_participants' => 'limits-max-participants',
        'meeting_status' => 'meeting-status',
        'meeting_schedule_start_datetime' => 'meeting-schedule-start-datetime',
        'timezone' => 'timezone',
        'meeting_schedule_duration_minutes' => 'meeting-schedule-duration-minutes',
        'meeting_schedule_recurrence_rule' => 'meeting-schedule-recurrence-rule',
        'meeting_video_allowed_from' => 'meeting-video-allowed-from',
        'meeting_audio_allowed_from' => 'meeting-audio-allowed-from',
        'meeting_chat_enabled' => 'meeting-chat-enabled',
        'meeting_chat_history_enabled' => 'meeting-chat-history-enabled',
        'meeting_question_answer_enabled' => 'meeting-question-answer-enabled',
        'meeting_recording_enabled' => 'meeting-recording-enabled',
        'meeting_join_require_invite_enabled' => 'meeting-join-require-invite-enabled',
        'meeting_join_require_passcode_enabled' => 'meeting-join-require-passcode-enabled',
        'meeting_require_host_to_begin_enabled' => 'meeting-require-host-to-begin-enabled',
        'meeting_allow_changes_from_hosts_enabled' => 'meeting-allow-changes-from-hosts-enabled',
        'meeting_hide_attendee_list_enabled' => 'meeting-hide-attendee-list-enabled',
        'meeting_lock_enabled' => 'meeting-lock-enabled',
        'meeting_lock_allowed' => 'meeting-lock-allowed',
        'meeting_room_enabled' => 'meeting-room-enabled',
        'meeting_dial_in_number_blob' => 'meeting-dial-in-number-blob',
        'meeting_passcode' => 'meeting-passcode',
        'meeting_previous_presenter_attendee_id' => 'meeting-previous-presenter-attendee-id',
        'meeting_presenter_attendee_id' => 'meeting-presenter-attendee-id',
        'meeting_video_layout_' => 'meeting-video-layout ',
        'last_modified_datetime' => 'last-modified-datetime',
        'meeting_instance_actual_start_datetime' => 'meeting-instance-actual-start-datetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'domain' => 'setDomain',
        'user' => 'setUser',
        'description' => 'setDescription',
        'current_timestamp' => 'setCurrentTimestamp',
        'meeting_calendar_invite_id' => 'setMeetingCalendarInviteId',
        'meeting_ordinal_sequence' => 'setMeetingOrdinalSequence',
        'core_server' => 'setCoreServer',
        'chat_session_id' => 'setChatSessionId',
        'meeting_registration_id' => 'setMeetingRegistrationId',
        'meeting_instance_id' => 'setMeetingInstanceId',
        'meeting_name' => 'setMeetingName',
        'meeting_type' => 'setMeetingType',
        'limits_max_participants' => 'setLimitsMaxParticipants',
        'meeting_status' => 'setMeetingStatus',
        'meeting_schedule_start_datetime' => 'setMeetingScheduleStartDatetime',
        'timezone' => 'setTimezone',
        'meeting_schedule_duration_minutes' => 'setMeetingScheduleDurationMinutes',
        'meeting_schedule_recurrence_rule' => 'setMeetingScheduleRecurrenceRule',
        'meeting_video_allowed_from' => 'setMeetingVideoAllowedFrom',
        'meeting_audio_allowed_from' => 'setMeetingAudioAllowedFrom',
        'meeting_chat_enabled' => 'setMeetingChatEnabled',
        'meeting_chat_history_enabled' => 'setMeetingChatHistoryEnabled',
        'meeting_question_answer_enabled' => 'setMeetingQuestionAnswerEnabled',
        'meeting_recording_enabled' => 'setMeetingRecordingEnabled',
        'meeting_join_require_invite_enabled' => 'setMeetingJoinRequireInviteEnabled',
        'meeting_join_require_passcode_enabled' => 'setMeetingJoinRequirePasscodeEnabled',
        'meeting_require_host_to_begin_enabled' => 'setMeetingRequireHostToBeginEnabled',
        'meeting_allow_changes_from_hosts_enabled' => 'setMeetingAllowChangesFromHostsEnabled',
        'meeting_hide_attendee_list_enabled' => 'setMeetingHideAttendeeListEnabled',
        'meeting_lock_enabled' => 'setMeetingLockEnabled',
        'meeting_lock_allowed' => 'setMeetingLockAllowed',
        'meeting_room_enabled' => 'setMeetingRoomEnabled',
        'meeting_dial_in_number_blob' => 'setMeetingDialInNumberBlob',
        'meeting_passcode' => 'setMeetingPasscode',
        'meeting_previous_presenter_attendee_id' => 'setMeetingPreviousPresenterAttendeeId',
        'meeting_presenter_attendee_id' => 'setMeetingPresenterAttendeeId',
        'meeting_video_layout_' => 'setMeetingVideoLayout',
        'last_modified_datetime' => 'setLastModifiedDatetime',
        'meeting_instance_actual_start_datetime' => 'setMeetingInstanceActualStartDatetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'domain' => 'getDomain',
        'user' => 'getUser',
        'description' => 'getDescription',
        'current_timestamp' => 'getCurrentTimestamp',
        'meeting_calendar_invite_id' => 'getMeetingCalendarInviteId',
        'meeting_ordinal_sequence' => 'getMeetingOrdinalSequence',
        'core_server' => 'getCoreServer',
        'chat_session_id' => 'getChatSessionId',
        'meeting_registration_id' => 'getMeetingRegistrationId',
        'meeting_instance_id' => 'getMeetingInstanceId',
        'meeting_name' => 'getMeetingName',
        'meeting_type' => 'getMeetingType',
        'limits_max_participants' => 'getLimitsMaxParticipants',
        'meeting_status' => 'getMeetingStatus',
        'meeting_schedule_start_datetime' => 'getMeetingScheduleStartDatetime',
        'timezone' => 'getTimezone',
        'meeting_schedule_duration_minutes' => 'getMeetingScheduleDurationMinutes',
        'meeting_schedule_recurrence_rule' => 'getMeetingScheduleRecurrenceRule',
        'meeting_video_allowed_from' => 'getMeetingVideoAllowedFrom',
        'meeting_audio_allowed_from' => 'getMeetingAudioAllowedFrom',
        'meeting_chat_enabled' => 'getMeetingChatEnabled',
        'meeting_chat_history_enabled' => 'getMeetingChatHistoryEnabled',
        'meeting_question_answer_enabled' => 'getMeetingQuestionAnswerEnabled',
        'meeting_recording_enabled' => 'getMeetingRecordingEnabled',
        'meeting_join_require_invite_enabled' => 'getMeetingJoinRequireInviteEnabled',
        'meeting_join_require_passcode_enabled' => 'getMeetingJoinRequirePasscodeEnabled',
        'meeting_require_host_to_begin_enabled' => 'getMeetingRequireHostToBeginEnabled',
        'meeting_allow_changes_from_hosts_enabled' => 'getMeetingAllowChangesFromHostsEnabled',
        'meeting_hide_attendee_list_enabled' => 'getMeetingHideAttendeeListEnabled',
        'meeting_lock_enabled' => 'getMeetingLockEnabled',
        'meeting_lock_allowed' => 'getMeetingLockAllowed',
        'meeting_room_enabled' => 'getMeetingRoomEnabled',
        'meeting_dial_in_number_blob' => 'getMeetingDialInNumberBlob',
        'meeting_passcode' => 'getMeetingPasscode',
        'meeting_previous_presenter_attendee_id' => 'getMeetingPreviousPresenterAttendeeId',
        'meeting_presenter_attendee_id' => 'getMeetingPresenterAttendeeId',
        'meeting_video_layout_' => 'getMeetingVideoLayout',
        'last_modified_datetime' => 'getLastModifiedDatetime',
        'meeting_instance_actual_start_datetime' => 'getMeetingInstanceActualStartDatetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MEETING_TYPE_PRESENTATION = 'presentation';
    public const MEETING_TYPE_CONFERENCE = 'conference';
    public const MEETING_VIDEO_ALLOWED_FROM_EVERYONE = 'everyone';
    public const MEETING_VIDEO_ALLOWED_FROM_HOST = 'host';
    public const MEETING_VIDEO_ALLOWED_FROM_PRESENTERS = 'presenters';
    public const MEETING_AUDIO_ALLOWED_FROM_EVERYONE = 'everyone';
    public const MEETING_AUDIO_ALLOWED_FROM_HOST = 'host';
    public const MEETING_AUDIO_ALLOWED_FROM_PRESENTERS = 'presenters';
    public const MEETING_VIDEO_LAYOUT__SPOTLIGHT = 'spotlight';
    public const MEETING_VIDEO_LAYOUT__CONVERSATION = 'conversation';
    public const MEETING_VIDEO_LAYOUT__GRID = 'grid';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeetingTypeAllowableValues()
    {
        return [
            self::MEETING_TYPE_PRESENTATION,
            self::MEETING_TYPE_CONFERENCE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeetingVideoAllowedFromAllowableValues()
    {
        return [
            self::MEETING_VIDEO_ALLOWED_FROM_EVERYONE,
            self::MEETING_VIDEO_ALLOWED_FROM_HOST,
            self::MEETING_VIDEO_ALLOWED_FROM_PRESENTERS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeetingAudioAllowedFromAllowableValues()
    {
        return [
            self::MEETING_AUDIO_ALLOWED_FROM_EVERYONE,
            self::MEETING_AUDIO_ALLOWED_FROM_HOST,
            self::MEETING_AUDIO_ALLOWED_FROM_PRESENTERS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeetingVideoLayoutAllowableValues()
    {
        return [
            self::MEETING_VIDEO_LAYOUT__SPOTLIGHT,
            self::MEETING_VIDEO_LAYOUT__CONVERSATION,
            self::MEETING_VIDEO_LAYOUT__GRID,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('current_timestamp', $data ?? [], null);
        $this->setIfExists('meeting_calendar_invite_id', $data ?? [], null);
        $this->setIfExists('meeting_ordinal_sequence', $data ?? [], null);
        $this->setIfExists('core_server', $data ?? [], null);
        $this->setIfExists('chat_session_id', $data ?? [], null);
        $this->setIfExists('meeting_registration_id', $data ?? [], null);
        $this->setIfExists('meeting_instance_id', $data ?? [], null);
        $this->setIfExists('meeting_name', $data ?? [], null);
        $this->setIfExists('meeting_type', $data ?? [], 'conference');
        $this->setIfExists('limits_max_participants', $data ?? [], null);
        $this->setIfExists('meeting_status', $data ?? [], null);
        $this->setIfExists('meeting_schedule_start_datetime', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('meeting_schedule_duration_minutes', $data ?? [], null);
        $this->setIfExists('meeting_schedule_recurrence_rule', $data ?? [], null);
        $this->setIfExists('meeting_video_allowed_from', $data ?? [], null);
        $this->setIfExists('meeting_audio_allowed_from', $data ?? [], null);
        $this->setIfExists('meeting_chat_enabled', $data ?? [], 1);
        $this->setIfExists('meeting_chat_history_enabled', $data ?? [], 1);
        $this->setIfExists('meeting_question_answer_enabled', $data ?? [], 0);
        $this->setIfExists('meeting_recording_enabled', $data ?? [], 0);
        $this->setIfExists('meeting_join_require_invite_enabled', $data ?? [], 0);
        $this->setIfExists('meeting_join_require_passcode_enabled', $data ?? [], 0);
        $this->setIfExists('meeting_require_host_to_begin_enabled', $data ?? [], 0);
        $this->setIfExists('meeting_allow_changes_from_hosts_enabled', $data ?? [], 1);
        $this->setIfExists('meeting_hide_attendee_list_enabled', $data ?? [], 0);
        $this->setIfExists('meeting_lock_enabled', $data ?? [], 0);
        $this->setIfExists('meeting_lock_allowed', $data ?? [], null);
        $this->setIfExists('meeting_room_enabled', $data ?? [], 0);
        $this->setIfExists('meeting_dial_in_number_blob', $data ?? [], null);
        $this->setIfExists('meeting_passcode', $data ?? [], null);
        $this->setIfExists('meeting_previous_presenter_attendee_id', $data ?? [], null);
        $this->setIfExists('meeting_presenter_attendee_id', $data ?? [], null);
        $this->setIfExists('meeting_video_layout_', $data ?? [], null);
        $this->setIfExists('last_modified_datetime', $data ?? [], null);
        $this->setIfExists('meeting_instance_actual_start_datetime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ((mb_strlen($this->container['domain']) > 64)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 64.";
        }

        if (!preg_match("/^[A-Za-z0-9._-]+|\\*/", $this->container['domain'])) {
            $invalidProperties[] = "invalid value for 'domain', must be conform to the pattern /^[A-Za-z0-9._-]+|\\*/.";
        }

        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['current_timestamp'] === null) {
            $invalidProperties[] = "'current_timestamp' can't be null";
        }
        $allowedValues = $this->getMeetingTypeAllowableValues();
        if (!is_null($this->container['meeting_type']) && !in_array($this->container['meeting_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'meeting_type', must be one of '%s'",
                $this->container['meeting_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['meeting_status'] === null) {
            $invalidProperties[] = "'meeting_status' can't be null";
        }
        if ($this->container['meeting_schedule_start_datetime'] === null) {
            $invalidProperties[] = "'meeting_schedule_start_datetime' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        $allowedValues = $this->getMeetingVideoAllowedFromAllowableValues();
        if (!is_null($this->container['meeting_video_allowed_from']) && !in_array($this->container['meeting_video_allowed_from'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'meeting_video_allowed_from', must be one of '%s'",
                $this->container['meeting_video_allowed_from'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMeetingAudioAllowedFromAllowableValues();
        if (!is_null($this->container['meeting_audio_allowed_from']) && !in_array($this->container['meeting_audio_allowed_from'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'meeting_audio_allowed_from', must be one of '%s'",
                $this->container['meeting_audio_allowed_from'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['meeting_room_enabled'] === null) {
            $invalidProperties[] = "'meeting_room_enabled' can't be null";
        }
        $allowedValues = $this->getMeetingVideoLayoutAllowableValues();
        if (!is_null($this->container['meeting_video_layout_']) && !in_array($this->container['meeting_video_layout_'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'meeting_video_layout_', must be one of '%s'",
                $this->container['meeting_video_layout_'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The meeting id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain This is the main organization name. This is used to link resource to its group/tenant/organization/enterprise. ~ and * can be used alone in special cases to mean My Domain (~) and All Domains (\\*).
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        if ((mb_strlen($domain) > 64)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling Meeting., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[A-Za-z0-9._-]+|\\*/", ObjectSerializer::toString($domain)))) {
            throw new \InvalidArgumentException("invalid value for \$domain when calling Meeting., must conform to the pattern /^[A-Za-z0-9._-]+|\\*/.");
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user This is the main user extension for the user account.
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description about the meeting
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets current_timestamp
     *
     * @return \DateTime
     */
    public function getCurrentTimestamp()
    {
        return $this->container['current_timestamp'];
    }

    /**
     * Sets current_timestamp
     *
     * @param \DateTime $current_timestamp The current timestamp value of the meeting
     *
     * @return self
     */
    public function setCurrentTimestamp($current_timestamp)
    {
        if (is_null($current_timestamp)) {
            throw new \InvalidArgumentException('non-nullable current_timestamp cannot be null');
        }
        $this->container['current_timestamp'] = $current_timestamp;

        return $this;
    }

    /**
     * Gets meeting_calendar_invite_id
     *
     * @return string|null
     */
    public function getMeetingCalendarInviteId()
    {
        return $this->container['meeting_calendar_invite_id'];
    }

    /**
     * Sets meeting_calendar_invite_id
     *
     * @param string|null $meeting_calendar_invite_id The read only value for the meeting to use with calendar integration
     *
     * @return self
     */
    public function setMeetingCalendarInviteId($meeting_calendar_invite_id)
    {
        if (is_null($meeting_calendar_invite_id)) {
            throw new \InvalidArgumentException('non-nullable meeting_calendar_invite_id cannot be null');
        }
        $this->container['meeting_calendar_invite_id'] = $meeting_calendar_invite_id;

        return $this;
    }

    /**
     * Gets meeting_ordinal_sequence
     *
     * @return int|null
     */
    public function getMeetingOrdinalSequence()
    {
        return $this->container['meeting_ordinal_sequence'];
    }

    /**
     * Sets meeting_ordinal_sequence
     *
     * @param int|null $meeting_ordinal_sequence The read only value for the meeting with manage the calendar integrations
     *
     * @return self
     */
    public function setMeetingOrdinalSequence($meeting_ordinal_sequence)
    {
        if (is_null($meeting_ordinal_sequence)) {
            throw new \InvalidArgumentException('non-nullable meeting_ordinal_sequence cannot be null');
        }
        $this->container['meeting_ordinal_sequence'] = $meeting_ordinal_sequence;

        return $this;
    }

    /**
     * Gets core_server
     *
     * @return string|null
     */
    public function getCoreServer()
    {
        return $this->container['core_server'];
    }

    /**
     * Sets core_server
     *
     * @param string|null $core_server The core server which the meeting was created on and events are driven from
     *
     * @return self
     */
    public function setCoreServer($core_server)
    {
        if (is_null($core_server)) {
            throw new \InvalidArgumentException('non-nullable core_server cannot be null');
        }
        $this->container['core_server'] = $core_server;

        return $this;
    }

    /**
     * Gets chat_session_id
     *
     * @return string|null
     */
    public function getChatSessionId()
    {
        return $this->container['chat_session_id'];
    }

    /**
     * Sets chat_session_id
     *
     * @param string|null $chat_session_id The read only value identifying the meeting chat room session
     *
     * @return self
     */
    public function setChatSessionId($chat_session_id)
    {
        if (is_null($chat_session_id)) {
            throw new \InvalidArgumentException('non-nullable chat_session_id cannot be null');
        }
        $this->container['chat_session_id'] = $chat_session_id;

        return $this;
    }

    /**
     * Gets meeting_registration_id
     *
     * @return string|null
     */
    public function getMeetingRegistrationId()
    {
        return $this->container['meeting_registration_id'];
    }

    /**
     * Sets meeting_registration_id
     *
     * @param string|null $meeting_registration_id The token value for guest to use to register for a webinar
     *
     * @return self
     */
    public function setMeetingRegistrationId($meeting_registration_id)
    {
        if (is_null($meeting_registration_id)) {
            throw new \InvalidArgumentException('non-nullable meeting_registration_id cannot be null');
        }
        $this->container['meeting_registration_id'] = $meeting_registration_id;

        return $this;
    }

    /**
     * Gets meeting_instance_id
     *
     * @return string|null
     */
    public function getMeetingInstanceId()
    {
        return $this->container['meeting_instance_id'];
    }

    /**
     * Sets meeting_instance_id
     *
     * @param string|null $meeting_instance_id The instance value of a meeting with used to associate with a recording or differentiating recurring meetings
     *
     * @return self
     */
    public function setMeetingInstanceId($meeting_instance_id)
    {
        if (is_null($meeting_instance_id)) {
            throw new \InvalidArgumentException('non-nullable meeting_instance_id cannot be null');
        }
        $this->container['meeting_instance_id'] = $meeting_instance_id;

        return $this;
    }

    /**
     * Gets meeting_name
     *
     * @return string|null
     */
    public function getMeetingName()
    {
        return $this->container['meeting_name'];
    }

    /**
     * Sets meeting_name
     *
     * @param string|null $meeting_name The descriptive name of the meeting
     *
     * @return self
     */
    public function setMeetingName($meeting_name)
    {
        if (is_null($meeting_name)) {
            throw new \InvalidArgumentException('non-nullable meeting_name cannot be null');
        }
        $this->container['meeting_name'] = $meeting_name;

        return $this;
    }

    /**
     * Gets meeting_type
     *
     * @return string|null
     */
    public function getMeetingType()
    {
        return $this->container['meeting_type'];
    }

    /**
     * Sets meeting_type
     *
     * @param string|null $meeting_type The meeting category either the standard meeting 'conference' or a webinar style meeting by using 'presentation'
     *
     * @return self
     */
    public function setMeetingType($meeting_type)
    {
        if (is_null($meeting_type)) {
            throw new \InvalidArgumentException('non-nullable meeting_type cannot be null');
        }
        $allowedValues = $this->getMeetingTypeAllowableValues();
        if (!in_array($meeting_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'meeting_type', must be one of '%s'",
                    $meeting_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['meeting_type'] = $meeting_type;

        return $this;
    }

    /**
     * Gets limits_max_participants
     *
     * @return int|null
     */
    public function getLimitsMaxParticipants()
    {
        return $this->container['limits_max_participants'];
    }

    /**
     * Sets limits_max_participants
     *
     * @param int|null $limits_max_participants The maximum number of participants allows in the meeting
     *
     * @return self
     */
    public function setLimitsMaxParticipants($limits_max_participants)
    {
        if (is_null($limits_max_participants)) {
            throw new \InvalidArgumentException('non-nullable limits_max_participants cannot be null');
        }
        $this->container['limits_max_participants'] = $limits_max_participants;

        return $this;
    }

    /**
     * Gets meeting_status
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserMeetingsIdPost200ResponseMeetingStatus
     */
    public function getMeetingStatus()
    {
        return $this->container['meeting_status'];
    }

    /**
     * Sets meeting_status
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserMeetingsIdPost200ResponseMeetingStatus $meeting_status meeting_status
     *
     * @return self
     */
    public function setMeetingStatus($meeting_status)
    {
        if (is_null($meeting_status)) {
            throw new \InvalidArgumentException('non-nullable meeting_status cannot be null');
        }
        $this->container['meeting_status'] = $meeting_status;

        return $this;
    }

    /**
     * Gets meeting_schedule_start_datetime
     *
     * @return \DateTime
     */
    public function getMeetingScheduleStartDatetime()
    {
        return $this->container['meeting_schedule_start_datetime'];
    }

    /**
     * Sets meeting_schedule_start_datetime
     *
     * @param \DateTime $meeting_schedule_start_datetime The scheduled start time for the meeting
     *
     * @return self
     */
    public function setMeetingScheduleStartDatetime($meeting_schedule_start_datetime)
    {
        if (is_null($meeting_schedule_start_datetime)) {
            throw new \InvalidArgumentException('non-nullable meeting_schedule_start_datetime cannot be null');
        }
        $this->container['meeting_schedule_start_datetime'] = $meeting_schedule_start_datetime;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\TimeZone
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\TimeZone $timezone The timezone which the meeting was created with
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets meeting_schedule_duration_minutes
     *
     * @return int|null
     */
    public function getMeetingScheduleDurationMinutes()
    {
        return $this->container['meeting_schedule_duration_minutes'];
    }

    /**
     * Sets meeting_schedule_duration_minutes
     *
     * @param int|null $meeting_schedule_duration_minutes The scheduled length of the meeting
     *
     * @return self
     */
    public function setMeetingScheduleDurationMinutes($meeting_schedule_duration_minutes)
    {
        if (is_null($meeting_schedule_duration_minutes)) {
            throw new \InvalidArgumentException('non-nullable meeting_schedule_duration_minutes cannot be null');
        }
        $this->container['meeting_schedule_duration_minutes'] = $meeting_schedule_duration_minutes;

        return $this;
    }

    /**
     * Gets meeting_schedule_recurrence_rule
     *
     * @return string|null
     */
    public function getMeetingScheduleRecurrenceRule()
    {
        return $this->container['meeting_schedule_recurrence_rule'];
    }

    /**
     * Sets meeting_schedule_recurrence_rule
     *
     * @param string|null $meeting_schedule_recurrence_rule The read only value describing the recuring nature of the meeting using RFC 5545
     *
     * @return self
     */
    public function setMeetingScheduleRecurrenceRule($meeting_schedule_recurrence_rule)
    {
        if (is_null($meeting_schedule_recurrence_rule)) {
            throw new \InvalidArgumentException('non-nullable meeting_schedule_recurrence_rule cannot be null');
        }
        $this->container['meeting_schedule_recurrence_rule'] = $meeting_schedule_recurrence_rule;

        return $this;
    }

    /**
     * Gets meeting_video_allowed_from
     *
     * @return string|null
     */
    public function getMeetingVideoAllowedFrom()
    {
        return $this->container['meeting_video_allowed_from'];
    }

    /**
     * Sets meeting_video_allowed_from
     *
     * @param string|null $meeting_video_allowed_from The value indicating which attendee types can share video
     *
     * @return self
     */
    public function setMeetingVideoAllowedFrom($meeting_video_allowed_from)
    {
        if (is_null($meeting_video_allowed_from)) {
            throw new \InvalidArgumentException('non-nullable meeting_video_allowed_from cannot be null');
        }
        $allowedValues = $this->getMeetingVideoAllowedFromAllowableValues();
        if (!in_array($meeting_video_allowed_from, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'meeting_video_allowed_from', must be one of '%s'",
                    $meeting_video_allowed_from,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['meeting_video_allowed_from'] = $meeting_video_allowed_from;

        return $this;
    }

    /**
     * Gets meeting_audio_allowed_from
     *
     * @return string|null
     */
    public function getMeetingAudioAllowedFrom()
    {
        return $this->container['meeting_audio_allowed_from'];
    }

    /**
     * Sets meeting_audio_allowed_from
     *
     * @param string|null $meeting_audio_allowed_from The value indicating which attendee types can share audio
     *
     * @return self
     */
    public function setMeetingAudioAllowedFrom($meeting_audio_allowed_from)
    {
        if (is_null($meeting_audio_allowed_from)) {
            throw new \InvalidArgumentException('non-nullable meeting_audio_allowed_from cannot be null');
        }
        $allowedValues = $this->getMeetingAudioAllowedFromAllowableValues();
        if (!in_array($meeting_audio_allowed_from, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'meeting_audio_allowed_from', must be one of '%s'",
                    $meeting_audio_allowed_from,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['meeting_audio_allowed_from'] = $meeting_audio_allowed_from;

        return $this;
    }

    /**
     * Gets meeting_chat_enabled
     *
     * @return int|null
     */
    public function getMeetingChatEnabled()
    {
        return $this->container['meeting_chat_enabled'];
    }

    /**
     * Sets meeting_chat_enabled
     *
     * @param int|null $meeting_chat_enabled meeting_chat_enabled
     *
     * @return self
     */
    public function setMeetingChatEnabled($meeting_chat_enabled)
    {
        if (is_null($meeting_chat_enabled)) {
            throw new \InvalidArgumentException('non-nullable meeting_chat_enabled cannot be null');
        }
        $this->container['meeting_chat_enabled'] = $meeting_chat_enabled;

        return $this;
    }

    /**
     * Gets meeting_chat_history_enabled
     *
     * @return int|null
     */
    public function getMeetingChatHistoryEnabled()
    {
        return $this->container['meeting_chat_history_enabled'];
    }

    /**
     * Sets meeting_chat_history_enabled
     *
     * @param int|null $meeting_chat_history_enabled meeting_chat_history_enabled
     *
     * @return self
     */
    public function setMeetingChatHistoryEnabled($meeting_chat_history_enabled)
    {
        if (is_null($meeting_chat_history_enabled)) {
            throw new \InvalidArgumentException('non-nullable meeting_chat_history_enabled cannot be null');
        }
        $this->container['meeting_chat_history_enabled'] = $meeting_chat_history_enabled;

        return $this;
    }

    /**
     * Gets meeting_question_answer_enabled
     *
     * @return int|null
     */
    public function getMeetingQuestionAnswerEnabled()
    {
        return $this->container['meeting_question_answer_enabled'];
    }

    /**
     * Sets meeting_question_answer_enabled
     *
     * @param int|null $meeting_question_answer_enabled meeting_question_answer_enabled
     *
     * @return self
     */
    public function setMeetingQuestionAnswerEnabled($meeting_question_answer_enabled)
    {
        if (is_null($meeting_question_answer_enabled)) {
            throw new \InvalidArgumentException('non-nullable meeting_question_answer_enabled cannot be null');
        }
        $this->container['meeting_question_answer_enabled'] = $meeting_question_answer_enabled;

        return $this;
    }

    /**
     * Gets meeting_recording_enabled
     *
     * @return int|null
     */
    public function getMeetingRecordingEnabled()
    {
        return $this->container['meeting_recording_enabled'];
    }

    /**
     * Sets meeting_recording_enabled
     *
     * @param int|null $meeting_recording_enabled meeting_recording_enabled
     *
     * @return self
     */
    public function setMeetingRecordingEnabled($meeting_recording_enabled)
    {
        if (is_null($meeting_recording_enabled)) {
            throw new \InvalidArgumentException('non-nullable meeting_recording_enabled cannot be null');
        }
        $this->container['meeting_recording_enabled'] = $meeting_recording_enabled;

        return $this;
    }

    /**
     * Gets meeting_join_require_invite_enabled
     *
     * @return int|null
     */
    public function getMeetingJoinRequireInviteEnabled()
    {
        return $this->container['meeting_join_require_invite_enabled'];
    }

    /**
     * Sets meeting_join_require_invite_enabled
     *
     * @param int|null $meeting_join_require_invite_enabled meeting_join_require_invite_enabled
     *
     * @return self
     */
    public function setMeetingJoinRequireInviteEnabled($meeting_join_require_invite_enabled)
    {
        if (is_null($meeting_join_require_invite_enabled)) {
            throw new \InvalidArgumentException('non-nullable meeting_join_require_invite_enabled cannot be null');
        }
        $this->container['meeting_join_require_invite_enabled'] = $meeting_join_require_invite_enabled;

        return $this;
    }

    /**
     * Gets meeting_join_require_passcode_enabled
     *
     * @return int|null
     */
    public function getMeetingJoinRequirePasscodeEnabled()
    {
        return $this->container['meeting_join_require_passcode_enabled'];
    }

    /**
     * Sets meeting_join_require_passcode_enabled
     *
     * @param int|null $meeting_join_require_passcode_enabled meeting_join_require_passcode_enabled
     *
     * @return self
     */
    public function setMeetingJoinRequirePasscodeEnabled($meeting_join_require_passcode_enabled)
    {
        if (is_null($meeting_join_require_passcode_enabled)) {
            throw new \InvalidArgumentException('non-nullable meeting_join_require_passcode_enabled cannot be null');
        }
        $this->container['meeting_join_require_passcode_enabled'] = $meeting_join_require_passcode_enabled;

        return $this;
    }

    /**
     * Gets meeting_require_host_to_begin_enabled
     *
     * @return int|null
     */
    public function getMeetingRequireHostToBeginEnabled()
    {
        return $this->container['meeting_require_host_to_begin_enabled'];
    }

    /**
     * Sets meeting_require_host_to_begin_enabled
     *
     * @param int|null $meeting_require_host_to_begin_enabled meeting_require_host_to_begin_enabled
     *
     * @return self
     */
    public function setMeetingRequireHostToBeginEnabled($meeting_require_host_to_begin_enabled)
    {
        if (is_null($meeting_require_host_to_begin_enabled)) {
            throw new \InvalidArgumentException('non-nullable meeting_require_host_to_begin_enabled cannot be null');
        }
        $this->container['meeting_require_host_to_begin_enabled'] = $meeting_require_host_to_begin_enabled;

        return $this;
    }

    /**
     * Gets meeting_allow_changes_from_hosts_enabled
     *
     * @return int|null
     */
    public function getMeetingAllowChangesFromHostsEnabled()
    {
        return $this->container['meeting_allow_changes_from_hosts_enabled'];
    }

    /**
     * Sets meeting_allow_changes_from_hosts_enabled
     *
     * @param int|null $meeting_allow_changes_from_hosts_enabled meeting_allow_changes_from_hosts_enabled
     *
     * @return self
     */
    public function setMeetingAllowChangesFromHostsEnabled($meeting_allow_changes_from_hosts_enabled)
    {
        if (is_null($meeting_allow_changes_from_hosts_enabled)) {
            throw new \InvalidArgumentException('non-nullable meeting_allow_changes_from_hosts_enabled cannot be null');
        }
        $this->container['meeting_allow_changes_from_hosts_enabled'] = $meeting_allow_changes_from_hosts_enabled;

        return $this;
    }

    /**
     * Gets meeting_hide_attendee_list_enabled
     *
     * @return int|null
     */
    public function getMeetingHideAttendeeListEnabled()
    {
        return $this->container['meeting_hide_attendee_list_enabled'];
    }

    /**
     * Sets meeting_hide_attendee_list_enabled
     *
     * @param int|null $meeting_hide_attendee_list_enabled meeting_hide_attendee_list_enabled
     *
     * @return self
     */
    public function setMeetingHideAttendeeListEnabled($meeting_hide_attendee_list_enabled)
    {
        if (is_null($meeting_hide_attendee_list_enabled)) {
            throw new \InvalidArgumentException('non-nullable meeting_hide_attendee_list_enabled cannot be null');
        }
        $this->container['meeting_hide_attendee_list_enabled'] = $meeting_hide_attendee_list_enabled;

        return $this;
    }

    /**
     * Gets meeting_lock_enabled
     *
     * @return int|null
     */
    public function getMeetingLockEnabled()
    {
        return $this->container['meeting_lock_enabled'];
    }

    /**
     * Sets meeting_lock_enabled
     *
     * @param int|null $meeting_lock_enabled meeting_lock_enabled
     *
     * @return self
     */
    public function setMeetingLockEnabled($meeting_lock_enabled)
    {
        if (is_null($meeting_lock_enabled)) {
            throw new \InvalidArgumentException('non-nullable meeting_lock_enabled cannot be null');
        }
        $this->container['meeting_lock_enabled'] = $meeting_lock_enabled;

        return $this;
    }

    /**
     * Gets meeting_lock_allowed
     *
     * @return string|null
     */
    public function getMeetingLockAllowed()
    {
        return $this->container['meeting_lock_allowed'];
    }

    /**
     * Sets meeting_lock_allowed
     *
     * @param string|null $meeting_lock_allowed The value indicating if the meeting is allowed to be locked
     *
     * @return self
     */
    public function setMeetingLockAllowed($meeting_lock_allowed)
    {
        if (is_null($meeting_lock_allowed)) {
            throw new \InvalidArgumentException('non-nullable meeting_lock_allowed cannot be null');
        }
        $this->container['meeting_lock_allowed'] = $meeting_lock_allowed;

        return $this;
    }

    /**
     * Gets meeting_room_enabled
     *
     * @return int
     */
    public function getMeetingRoomEnabled()
    {
        return $this->container['meeting_room_enabled'];
    }

    /**
     * Sets meeting_room_enabled
     *
     * @param int $meeting_room_enabled meeting_room_enabled
     *
     * @return self
     */
    public function setMeetingRoomEnabled($meeting_room_enabled)
    {
        if (is_null($meeting_room_enabled)) {
            throw new \InvalidArgumentException('non-nullable meeting_room_enabled cannot be null');
        }
        $this->container['meeting_room_enabled'] = $meeting_room_enabled;

        return $this;
    }

    /**
     * Gets meeting_dial_in_number_blob
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserMeetingsIdPost200ResponseMeetingDialInNumberBlob|null
     */
    public function getMeetingDialInNumberBlob()
    {
        return $this->container['meeting_dial_in_number_blob'];
    }

    /**
     * Sets meeting_dial_in_number_blob
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserMeetingsIdPost200ResponseMeetingDialInNumberBlob|null $meeting_dial_in_number_blob meeting_dial_in_number_blob
     *
     * @return self
     */
    public function setMeetingDialInNumberBlob($meeting_dial_in_number_blob)
    {
        if (is_null($meeting_dial_in_number_blob)) {
            throw new \InvalidArgumentException('non-nullable meeting_dial_in_number_blob cannot be null');
        }
        $this->container['meeting_dial_in_number_blob'] = $meeting_dial_in_number_blob;

        return $this;
    }

    /**
     * Gets meeting_passcode
     *
     * @return string|null
     */
    public function getMeetingPasscode()
    {
        return $this->container['meeting_passcode'];
    }

    /**
     * Sets meeting_passcode
     *
     * @param string|null $meeting_passcode The passcode used to enter meeting if it is required
     *
     * @return self
     */
    public function setMeetingPasscode($meeting_passcode)
    {
        if (is_null($meeting_passcode)) {
            throw new \InvalidArgumentException('non-nullable meeting_passcode cannot be null');
        }
        $this->container['meeting_passcode'] = $meeting_passcode;

        return $this;
    }

    /**
     * Gets meeting_previous_presenter_attendee_id
     *
     * @return string|null
     */
    public function getMeetingPreviousPresenterAttendeeId()
    {
        return $this->container['meeting_previous_presenter_attendee_id'];
    }

    /**
     * Sets meeting_previous_presenter_attendee_id
     *
     * @param string|null $meeting_previous_presenter_attendee_id The value of the previous attendee that prsented their screen
     *
     * @return self
     */
    public function setMeetingPreviousPresenterAttendeeId($meeting_previous_presenter_attendee_id)
    {
        if (is_null($meeting_previous_presenter_attendee_id)) {
            throw new \InvalidArgumentException('non-nullable meeting_previous_presenter_attendee_id cannot be null');
        }
        $this->container['meeting_previous_presenter_attendee_id'] = $meeting_previous_presenter_attendee_id;

        return $this;
    }

    /**
     * Gets meeting_presenter_attendee_id
     *
     * @return string|null
     */
    public function getMeetingPresenterAttendeeId()
    {
        return $this->container['meeting_presenter_attendee_id'];
    }

    /**
     * Sets meeting_presenter_attendee_id
     *
     * @param string|null $meeting_presenter_attendee_id The value of the current attendee that is sharing their screen
     *
     * @return self
     */
    public function setMeetingPresenterAttendeeId($meeting_presenter_attendee_id)
    {
        if (is_null($meeting_presenter_attendee_id)) {
            throw new \InvalidArgumentException('non-nullable meeting_presenter_attendee_id cannot be null');
        }
        $this->container['meeting_presenter_attendee_id'] = $meeting_presenter_attendee_id;

        return $this;
    }

    /**
     * Gets meeting_video_layout_
     *
     * @return string|null
     */
    public function getMeetingVideoLayout()
    {
        return $this->container['meeting_video_layout_'];
    }

    /**
     * Sets meeting_video_layout_
     *
     * @param string|null $meeting_video_layout_ The current meeting layout default for entire meeting
     *
     * @return self
     */
    public function setMeetingVideoLayout($meeting_video_layout_)
    {
        if (is_null($meeting_video_layout_)) {
            throw new \InvalidArgumentException('non-nullable meeting_video_layout_ cannot be null');
        }
        $allowedValues = $this->getMeetingVideoLayoutAllowableValues();
        if (!in_array($meeting_video_layout_, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'meeting_video_layout_', must be one of '%s'",
                    $meeting_video_layout_,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['meeting_video_layout_'] = $meeting_video_layout_;

        return $this;
    }

    /**
     * Gets last_modified_datetime
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDatetime()
    {
        return $this->container['last_modified_datetime'];
    }

    /**
     * Sets last_modified_datetime
     *
     * @param \DateTime|null $last_modified_datetime The timestamp of the last time the meeting was modified
     *
     * @return self
     */
    public function setLastModifiedDatetime($last_modified_datetime)
    {
        if (is_null($last_modified_datetime)) {
            throw new \InvalidArgumentException('non-nullable last_modified_datetime cannot be null');
        }
        $this->container['last_modified_datetime'] = $last_modified_datetime;

        return $this;
    }

    /**
     * Gets meeting_instance_actual_start_datetime
     *
     * @return \DateTime|null
     */
    public function getMeetingInstanceActualStartDatetime()
    {
        return $this->container['meeting_instance_actual_start_datetime'];
    }

    /**
     * Sets meeting_instance_actual_start_datetime
     *
     * @param \DateTime|null $meeting_instance_actual_start_datetime The timestamp the current meeting instance was started
     *
     * @return self
     */
    public function setMeetingInstanceActualStartDatetime($meeting_instance_actual_start_datetime)
    {
        if (is_null($meeting_instance_actual_start_datetime)) {
            throw new \InvalidArgumentException('non-nullable meeting_instance_actual_start_datetime cannot be null');
        }
        $this->container['meeting_instance_actual_start_datetime'] = $meeting_instance_actual_start_datetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


