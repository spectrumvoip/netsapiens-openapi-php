<?php
/**
 * CdrD
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * CdrD Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CdrD implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CdrD';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'domain' => 'string',
        'reseller' => 'string',
        'call_account_code' => 'string',
        'call_answer_datetime' => 'string',
        'call_audio_codec' => 'string',
        'call_audio_relay_side_a_local_port' => 'int',
        'call_audio_relay_side_a_packet_count' => 'int',
        'call_audio_relay_side_a_remote_ip' => 'string',
        'call_audio_relay_side_b_packet_count' => 'int',
        'call_audio_relay_side_b_remote_ip' => 'string',
        'call_batch_answer_datetime' => 'string',
        'call_batch_on_hold_duration_seconds' => 'int',
        'call_batch_sequence_marker' => 'string',
        'call_batch_start_datetime' => 'string',
        'call_batch_total_duration_seconds' => 'int',
        'call_direction' => 'int',
        'call_disconnect_datetime' => 'string',
        'call_disconnect_reason_text' => 'string',
        'call_disposition' => 'mixed',
        'call_disposition_notes' => 'mixed',
        'call_disposition_reason' => 'mixed',
        'call_disposition_submitted_datetime' => 'mixed',
        'call_disposition_type' => 'mixed',
        'call_fax_codec' => 'mixed',
        'call_fax_relay_side_a_local_port' => 'mixed',
        'call_fax_relay_side_a_packet_count' => 'mixed',
        'call_fax_relay_side_a_remote_ip' => 'mixed',
        'call_fax_relay_side_b_packet_count' => 'mixed',
        'call_fax_relay_side_b_remote_ip' => 'mixed',
        'call_leg_ordinal_index' => 'int',
        'call_on_hold_duration_seconds' => 'int',
        'call_orig_call_id' => 'string',
        'call_orig_caller_id' => 'int',
        'call_orig_department' => 'string',
        'call_orig_domain' => 'string',
        'call_orig_from_host' => 'string',
        'call_orig_from_name' => 'string',
        'call_orig_from_uri' => 'string',
        'call_orig_from_user' => 'string',
        'call_orig_ip_address' => 'string',
        'call_orig_match_uri' => 'string',
        'call_orig_pre_routing_uri' => 'string',
        'call_orig_request_host' => 'string',
        'call_orig_request_uri' => 'string',
        'call_orig_request_user' => 'string',
        'call_orig_reseller' => 'string',
        'call_orig_site' => 'string',
        'call_orig_to_host' => 'string',
        'call_orig_to_uri' => 'string',
        'call_orig_to_user' => 'string',
        'call_orig_user' => 'int',
        'call_parent_call_id' => 'string',
        'call_parent_cdr_id' => 'string',
        'call_record_creation_datetime' => 'mixed',
        'call_ringing_datetime' => 'mixed',
        'call_routing_class' => 'int',
        'call_routing_match_uri' => 'string',
        'call_start_datetime' => 'string',
        'call_tag' => 'string',
        'call_talking_duration_seconds' => 'int',
        'call_term_call_id' => 'string',
        'call_term_caller_id' => 'string',
        'call_term_department' => 'mixed',
        'call_term_domain' => 'string',
        'call_term_ip_address' => 'string',
        'call_term_match_uri' => 'string',
        'call_term_pre_reouting_uri' => 'string',
        'call_term_reseller' => 'mixed',
        'call_term_site' => 'mixed',
        'call_term_to_uri' => 'string',
        'call_term_user' => 'mixed',
        'call_through_action' => 'string',
        'call_through_call_id' => 'mixed',
        'call_through_caller_id' => 'mixed',
        'call_through_department' => 'mixed',
        'call_through_domain' => 'mixed',
        'call_through_reseller' => 'mixed',
        'call_through_site' => 'mixed',
        'call_through_uri' => 'mixed',
        'call_through_user' => 'mixed',
        'call_total_duration_seconds' => 'int',
        'call_video_codec' => 'mixed',
        'call_video_relay_side_a_local_port' => 'mixed',
        'call_video_relay_side_a_packet_count' => 'mixed',
        'call_video_relay_side_a_remote_ip' => 'mixed',
        'call_video_relay_side_b_packet_count' => 'mixed',
        'call_video_relay_side_b_remote_ip' => 'mixed',
        'call_server_mac_address' => 'string',
        'core_server' => 'string',
        'hide_from_results' => 'int',
        'is_trace_expected' => 'bool',
        'prefilled_trace_api' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'domain' => null,
        'reseller' => null,
        'call_account_code' => null,
        'call_answer_datetime' => null,
        'call_audio_codec' => null,
        'call_audio_relay_side_a_local_port' => null,
        'call_audio_relay_side_a_packet_count' => null,
        'call_audio_relay_side_a_remote_ip' => null,
        'call_audio_relay_side_b_packet_count' => null,
        'call_audio_relay_side_b_remote_ip' => null,
        'call_batch_answer_datetime' => null,
        'call_batch_on_hold_duration_seconds' => null,
        'call_batch_sequence_marker' => null,
        'call_batch_start_datetime' => null,
        'call_batch_total_duration_seconds' => null,
        'call_direction' => null,
        'call_disconnect_datetime' => null,
        'call_disconnect_reason_text' => null,
        'call_disposition' => null,
        'call_disposition_notes' => null,
        'call_disposition_reason' => null,
        'call_disposition_submitted_datetime' => null,
        'call_disposition_type' => null,
        'call_fax_codec' => null,
        'call_fax_relay_side_a_local_port' => null,
        'call_fax_relay_side_a_packet_count' => null,
        'call_fax_relay_side_a_remote_ip' => null,
        'call_fax_relay_side_b_packet_count' => null,
        'call_fax_relay_side_b_remote_ip' => null,
        'call_leg_ordinal_index' => null,
        'call_on_hold_duration_seconds' => null,
        'call_orig_call_id' => null,
        'call_orig_caller_id' => null,
        'call_orig_department' => null,
        'call_orig_domain' => null,
        'call_orig_from_host' => null,
        'call_orig_from_name' => null,
        'call_orig_from_uri' => null,
        'call_orig_from_user' => null,
        'call_orig_ip_address' => null,
        'call_orig_match_uri' => null,
        'call_orig_pre_routing_uri' => null,
        'call_orig_request_host' => null,
        'call_orig_request_uri' => null,
        'call_orig_request_user' => null,
        'call_orig_reseller' => null,
        'call_orig_site' => null,
        'call_orig_to_host' => null,
        'call_orig_to_uri' => null,
        'call_orig_to_user' => null,
        'call_orig_user' => null,
        'call_parent_call_id' => null,
        'call_parent_cdr_id' => null,
        'call_record_creation_datetime' => null,
        'call_ringing_datetime' => null,
        'call_routing_class' => null,
        'call_routing_match_uri' => null,
        'call_start_datetime' => null,
        'call_tag' => null,
        'call_talking_duration_seconds' => null,
        'call_term_call_id' => null,
        'call_term_caller_id' => null,
        'call_term_department' => null,
        'call_term_domain' => null,
        'call_term_ip_address' => null,
        'call_term_match_uri' => null,
        'call_term_pre_reouting_uri' => null,
        'call_term_reseller' => null,
        'call_term_site' => null,
        'call_term_to_uri' => null,
        'call_term_user' => null,
        'call_through_action' => null,
        'call_through_call_id' => null,
        'call_through_caller_id' => null,
        'call_through_department' => null,
        'call_through_domain' => null,
        'call_through_reseller' => null,
        'call_through_site' => null,
        'call_through_uri' => null,
        'call_through_user' => null,
        'call_total_duration_seconds' => null,
        'call_video_codec' => null,
        'call_video_relay_side_a_local_port' => null,
        'call_video_relay_side_a_packet_count' => null,
        'call_video_relay_side_a_remote_ip' => null,
        'call_video_relay_side_b_packet_count' => null,
        'call_video_relay_side_b_remote_ip' => null,
        'call_server_mac_address' => null,
        'core_server' => null,
        'hide_from_results' => null,
        'is_trace_expected' => null,
        'prefilled_trace_api' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'domain' => false,
        'reseller' => false,
        'call_account_code' => true,
        'call_answer_datetime' => false,
        'call_audio_codec' => false,
        'call_audio_relay_side_a_local_port' => false,
        'call_audio_relay_side_a_packet_count' => false,
        'call_audio_relay_side_a_remote_ip' => false,
        'call_audio_relay_side_b_packet_count' => false,
        'call_audio_relay_side_b_remote_ip' => false,
        'call_batch_answer_datetime' => false,
        'call_batch_on_hold_duration_seconds' => false,
        'call_batch_sequence_marker' => false,
        'call_batch_start_datetime' => false,
        'call_batch_total_duration_seconds' => false,
        'call_direction' => false,
        'call_disconnect_datetime' => false,
        'call_disconnect_reason_text' => false,
        'call_disposition' => true,
        'call_disposition_notes' => true,
        'call_disposition_reason' => true,
        'call_disposition_submitted_datetime' => true,
        'call_disposition_type' => true,
        'call_fax_codec' => true,
        'call_fax_relay_side_a_local_port' => true,
        'call_fax_relay_side_a_packet_count' => true,
        'call_fax_relay_side_a_remote_ip' => true,
        'call_fax_relay_side_b_packet_count' => true,
        'call_fax_relay_side_b_remote_ip' => true,
        'call_leg_ordinal_index' => false,
        'call_on_hold_duration_seconds' => false,
        'call_orig_call_id' => false,
        'call_orig_caller_id' => false,
        'call_orig_department' => false,
        'call_orig_domain' => false,
        'call_orig_from_host' => false,
        'call_orig_from_name' => false,
        'call_orig_from_uri' => false,
        'call_orig_from_user' => false,
        'call_orig_ip_address' => false,
        'call_orig_match_uri' => false,
        'call_orig_pre_routing_uri' => false,
        'call_orig_request_host' => false,
        'call_orig_request_uri' => false,
        'call_orig_request_user' => false,
        'call_orig_reseller' => false,
        'call_orig_site' => false,
        'call_orig_to_host' => false,
        'call_orig_to_uri' => false,
        'call_orig_to_user' => false,
        'call_orig_user' => false,
        'call_parent_call_id' => false,
        'call_parent_cdr_id' => false,
        'call_record_creation_datetime' => true,
        'call_ringing_datetime' => true,
        'call_routing_class' => false,
        'call_routing_match_uri' => false,
        'call_start_datetime' => false,
        'call_tag' => false,
        'call_talking_duration_seconds' => false,
        'call_term_call_id' => false,
        'call_term_caller_id' => false,
        'call_term_department' => true,
        'call_term_domain' => false,
        'call_term_ip_address' => false,
        'call_term_match_uri' => false,
        'call_term_pre_reouting_uri' => false,
        'call_term_reseller' => true,
        'call_term_site' => true,
        'call_term_to_uri' => false,
        'call_term_user' => true,
        'call_through_action' => false,
        'call_through_call_id' => true,
        'call_through_caller_id' => true,
        'call_through_department' => true,
        'call_through_domain' => true,
        'call_through_reseller' => true,
        'call_through_site' => true,
        'call_through_uri' => true,
        'call_through_user' => true,
        'call_total_duration_seconds' => false,
        'call_video_codec' => true,
        'call_video_relay_side_a_local_port' => true,
        'call_video_relay_side_a_packet_count' => true,
        'call_video_relay_side_a_remote_ip' => true,
        'call_video_relay_side_b_packet_count' => true,
        'call_video_relay_side_b_remote_ip' => true,
        'call_server_mac_address' => false,
        'core_server' => false,
        'hide_from_results' => false,
        'is_trace_expected' => false,
        'prefilled_trace_api' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'domain' => 'domain',
        'reseller' => 'reseller',
        'call_account_code' => 'call-account-code',
        'call_answer_datetime' => 'call-answer-datetime',
        'call_audio_codec' => 'call-audio-codec',
        'call_audio_relay_side_a_local_port' => 'call-audio-relay-side-a-local-port',
        'call_audio_relay_side_a_packet_count' => 'call-audio-relay-side-a-packet-count',
        'call_audio_relay_side_a_remote_ip' => 'call-audio-relay-side-a-remote-ip',
        'call_audio_relay_side_b_packet_count' => 'call-audio-relay-side-b-packet-count',
        'call_audio_relay_side_b_remote_ip' => 'call-audio-relay-side-b-remote-ip',
        'call_batch_answer_datetime' => 'call-batch-answer-datetime',
        'call_batch_on_hold_duration_seconds' => 'call-batch-on-hold-duration-seconds',
        'call_batch_sequence_marker' => 'call-batch-sequence-marker',
        'call_batch_start_datetime' => 'call-batch-start-datetime',
        'call_batch_total_duration_seconds' => 'call-batch-total-duration-seconds',
        'call_direction' => 'call-direction',
        'call_disconnect_datetime' => 'call-disconnect-datetime',
        'call_disconnect_reason_text' => 'call-disconnect-reason-text',
        'call_disposition' => 'call-disposition',
        'call_disposition_notes' => 'call-disposition-notes',
        'call_disposition_reason' => 'call-disposition-reason',
        'call_disposition_submitted_datetime' => 'call-disposition-submitted-datetime',
        'call_disposition_type' => 'call-disposition-type',
        'call_fax_codec' => 'call-fax-codec',
        'call_fax_relay_side_a_local_port' => 'call-fax-relay-side-a-local-port',
        'call_fax_relay_side_a_packet_count' => 'call-fax-relay-side-a-packet-count',
        'call_fax_relay_side_a_remote_ip' => 'call-fax-relay-side-a-remote-ip',
        'call_fax_relay_side_b_packet_count' => 'call-fax-relay-side-b-packet-count',
        'call_fax_relay_side_b_remote_ip' => 'call-fax-relay-side-b-remote-ip',
        'call_leg_ordinal_index' => 'call-leg-ordinal-index',
        'call_on_hold_duration_seconds' => 'call-on-hold-duration-seconds',
        'call_orig_call_id' => 'call-orig-call-id',
        'call_orig_caller_id' => 'call-orig-caller-id',
        'call_orig_department' => 'call-orig-department',
        'call_orig_domain' => 'call-orig-domain',
        'call_orig_from_host' => 'call-orig-from-host',
        'call_orig_from_name' => 'call-orig-from-name',
        'call_orig_from_uri' => 'call-orig-from-uri',
        'call_orig_from_user' => 'call-orig-from-user',
        'call_orig_ip_address' => 'call-orig-ip-address',
        'call_orig_match_uri' => 'call-orig-match-uri',
        'call_orig_pre_routing_uri' => 'call-orig-pre-routing-uri',
        'call_orig_request_host' => 'call-orig-request-host',
        'call_orig_request_uri' => 'call-orig-request-uri',
        'call_orig_request_user' => 'call-orig-request-user',
        'call_orig_reseller' => 'call-orig-reseller',
        'call_orig_site' => 'call-orig-site',
        'call_orig_to_host' => 'call-orig-to-host',
        'call_orig_to_uri' => 'call-orig-to-uri',
        'call_orig_to_user' => 'call-orig-to-user',
        'call_orig_user' => 'call-orig-user',
        'call_parent_call_id' => 'call-parent-call-id',
        'call_parent_cdr_id' => 'call-parent-cdr-id',
        'call_record_creation_datetime' => 'call-record-creation-datetime',
        'call_ringing_datetime' => 'call-ringing-datetime',
        'call_routing_class' => 'call-routing-class',
        'call_routing_match_uri' => 'call-routing-match-uri',
        'call_start_datetime' => 'call-start-datetime',
        'call_tag' => 'call-tag',
        'call_talking_duration_seconds' => 'call-talking-duration-seconds',
        'call_term_call_id' => 'call-term-call-id',
        'call_term_caller_id' => 'call-term-caller-id',
        'call_term_department' => 'call-term-department',
        'call_term_domain' => 'call-term-domain',
        'call_term_ip_address' => 'call-term-ip-address',
        'call_term_match_uri' => 'call-term-match-uri',
        'call_term_pre_reouting_uri' => 'call-term-pre-reouting-uri',
        'call_term_reseller' => 'call-term-reseller',
        'call_term_site' => 'call-term-site',
        'call_term_to_uri' => 'call-term-to-uri',
        'call_term_user' => 'call-term-user',
        'call_through_action' => 'call-through-action',
        'call_through_call_id' => 'call-through-call-id',
        'call_through_caller_id' => 'call-through-caller-id',
        'call_through_department' => 'call-through-department',
        'call_through_domain' => 'call-through-domain',
        'call_through_reseller' => 'call-through-reseller',
        'call_through_site' => 'call-through-site',
        'call_through_uri' => 'call-through-uri',
        'call_through_user' => 'call-through-user',
        'call_total_duration_seconds' => 'call-total-duration-seconds',
        'call_video_codec' => 'call-video-codec',
        'call_video_relay_side_a_local_port' => 'call-video-relay-side-a-local-port',
        'call_video_relay_side_a_packet_count' => 'call-video-relay-side-a-packet-count',
        'call_video_relay_side_a_remote_ip' => 'call-video-relay-side-a-remote-ip',
        'call_video_relay_side_b_packet_count' => 'call-video-relay-side-b-packet-count',
        'call_video_relay_side_b_remote_ip' => 'call-video-relay-side-b-remote-ip',
        'call_server_mac_address' => 'call-server-mac-address',
        'core_server' => 'core-server',
        'hide_from_results' => 'hide-from-results',
        'is_trace_expected' => 'is-trace-expected',
        'prefilled_trace_api' => 'prefilled-trace-api'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'domain' => 'setDomain',
        'reseller' => 'setReseller',
        'call_account_code' => 'setCallAccountCode',
        'call_answer_datetime' => 'setCallAnswerDatetime',
        'call_audio_codec' => 'setCallAudioCodec',
        'call_audio_relay_side_a_local_port' => 'setCallAudioRelaySideALocalPort',
        'call_audio_relay_side_a_packet_count' => 'setCallAudioRelaySideAPacketCount',
        'call_audio_relay_side_a_remote_ip' => 'setCallAudioRelaySideARemoteIp',
        'call_audio_relay_side_b_packet_count' => 'setCallAudioRelaySideBPacketCount',
        'call_audio_relay_side_b_remote_ip' => 'setCallAudioRelaySideBRemoteIp',
        'call_batch_answer_datetime' => 'setCallBatchAnswerDatetime',
        'call_batch_on_hold_duration_seconds' => 'setCallBatchOnHoldDurationSeconds',
        'call_batch_sequence_marker' => 'setCallBatchSequenceMarker',
        'call_batch_start_datetime' => 'setCallBatchStartDatetime',
        'call_batch_total_duration_seconds' => 'setCallBatchTotalDurationSeconds',
        'call_direction' => 'setCallDirection',
        'call_disconnect_datetime' => 'setCallDisconnectDatetime',
        'call_disconnect_reason_text' => 'setCallDisconnectReasonText',
        'call_disposition' => 'setCallDisposition',
        'call_disposition_notes' => 'setCallDispositionNotes',
        'call_disposition_reason' => 'setCallDispositionReason',
        'call_disposition_submitted_datetime' => 'setCallDispositionSubmittedDatetime',
        'call_disposition_type' => 'setCallDispositionType',
        'call_fax_codec' => 'setCallFaxCodec',
        'call_fax_relay_side_a_local_port' => 'setCallFaxRelaySideALocalPort',
        'call_fax_relay_side_a_packet_count' => 'setCallFaxRelaySideAPacketCount',
        'call_fax_relay_side_a_remote_ip' => 'setCallFaxRelaySideARemoteIp',
        'call_fax_relay_side_b_packet_count' => 'setCallFaxRelaySideBPacketCount',
        'call_fax_relay_side_b_remote_ip' => 'setCallFaxRelaySideBRemoteIp',
        'call_leg_ordinal_index' => 'setCallLegOrdinalIndex',
        'call_on_hold_duration_seconds' => 'setCallOnHoldDurationSeconds',
        'call_orig_call_id' => 'setCallOrigCallId',
        'call_orig_caller_id' => 'setCallOrigCallerId',
        'call_orig_department' => 'setCallOrigDepartment',
        'call_orig_domain' => 'setCallOrigDomain',
        'call_orig_from_host' => 'setCallOrigFromHost',
        'call_orig_from_name' => 'setCallOrigFromName',
        'call_orig_from_uri' => 'setCallOrigFromUri',
        'call_orig_from_user' => 'setCallOrigFromUser',
        'call_orig_ip_address' => 'setCallOrigIpAddress',
        'call_orig_match_uri' => 'setCallOrigMatchUri',
        'call_orig_pre_routing_uri' => 'setCallOrigPreRoutingUri',
        'call_orig_request_host' => 'setCallOrigRequestHost',
        'call_orig_request_uri' => 'setCallOrigRequestUri',
        'call_orig_request_user' => 'setCallOrigRequestUser',
        'call_orig_reseller' => 'setCallOrigReseller',
        'call_orig_site' => 'setCallOrigSite',
        'call_orig_to_host' => 'setCallOrigToHost',
        'call_orig_to_uri' => 'setCallOrigToUri',
        'call_orig_to_user' => 'setCallOrigToUser',
        'call_orig_user' => 'setCallOrigUser',
        'call_parent_call_id' => 'setCallParentCallId',
        'call_parent_cdr_id' => 'setCallParentCdrId',
        'call_record_creation_datetime' => 'setCallRecordCreationDatetime',
        'call_ringing_datetime' => 'setCallRingingDatetime',
        'call_routing_class' => 'setCallRoutingClass',
        'call_routing_match_uri' => 'setCallRoutingMatchUri',
        'call_start_datetime' => 'setCallStartDatetime',
        'call_tag' => 'setCallTag',
        'call_talking_duration_seconds' => 'setCallTalkingDurationSeconds',
        'call_term_call_id' => 'setCallTermCallId',
        'call_term_caller_id' => 'setCallTermCallerId',
        'call_term_department' => 'setCallTermDepartment',
        'call_term_domain' => 'setCallTermDomain',
        'call_term_ip_address' => 'setCallTermIpAddress',
        'call_term_match_uri' => 'setCallTermMatchUri',
        'call_term_pre_reouting_uri' => 'setCallTermPreReoutingUri',
        'call_term_reseller' => 'setCallTermReseller',
        'call_term_site' => 'setCallTermSite',
        'call_term_to_uri' => 'setCallTermToUri',
        'call_term_user' => 'setCallTermUser',
        'call_through_action' => 'setCallThroughAction',
        'call_through_call_id' => 'setCallThroughCallId',
        'call_through_caller_id' => 'setCallThroughCallerId',
        'call_through_department' => 'setCallThroughDepartment',
        'call_through_domain' => 'setCallThroughDomain',
        'call_through_reseller' => 'setCallThroughReseller',
        'call_through_site' => 'setCallThroughSite',
        'call_through_uri' => 'setCallThroughUri',
        'call_through_user' => 'setCallThroughUser',
        'call_total_duration_seconds' => 'setCallTotalDurationSeconds',
        'call_video_codec' => 'setCallVideoCodec',
        'call_video_relay_side_a_local_port' => 'setCallVideoRelaySideALocalPort',
        'call_video_relay_side_a_packet_count' => 'setCallVideoRelaySideAPacketCount',
        'call_video_relay_side_a_remote_ip' => 'setCallVideoRelaySideARemoteIp',
        'call_video_relay_side_b_packet_count' => 'setCallVideoRelaySideBPacketCount',
        'call_video_relay_side_b_remote_ip' => 'setCallVideoRelaySideBRemoteIp',
        'call_server_mac_address' => 'setCallServerMacAddress',
        'core_server' => 'setCoreServer',
        'hide_from_results' => 'setHideFromResults',
        'is_trace_expected' => 'setIsTraceExpected',
        'prefilled_trace_api' => 'setPrefilledTraceApi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'domain' => 'getDomain',
        'reseller' => 'getReseller',
        'call_account_code' => 'getCallAccountCode',
        'call_answer_datetime' => 'getCallAnswerDatetime',
        'call_audio_codec' => 'getCallAudioCodec',
        'call_audio_relay_side_a_local_port' => 'getCallAudioRelaySideALocalPort',
        'call_audio_relay_side_a_packet_count' => 'getCallAudioRelaySideAPacketCount',
        'call_audio_relay_side_a_remote_ip' => 'getCallAudioRelaySideARemoteIp',
        'call_audio_relay_side_b_packet_count' => 'getCallAudioRelaySideBPacketCount',
        'call_audio_relay_side_b_remote_ip' => 'getCallAudioRelaySideBRemoteIp',
        'call_batch_answer_datetime' => 'getCallBatchAnswerDatetime',
        'call_batch_on_hold_duration_seconds' => 'getCallBatchOnHoldDurationSeconds',
        'call_batch_sequence_marker' => 'getCallBatchSequenceMarker',
        'call_batch_start_datetime' => 'getCallBatchStartDatetime',
        'call_batch_total_duration_seconds' => 'getCallBatchTotalDurationSeconds',
        'call_direction' => 'getCallDirection',
        'call_disconnect_datetime' => 'getCallDisconnectDatetime',
        'call_disconnect_reason_text' => 'getCallDisconnectReasonText',
        'call_disposition' => 'getCallDisposition',
        'call_disposition_notes' => 'getCallDispositionNotes',
        'call_disposition_reason' => 'getCallDispositionReason',
        'call_disposition_submitted_datetime' => 'getCallDispositionSubmittedDatetime',
        'call_disposition_type' => 'getCallDispositionType',
        'call_fax_codec' => 'getCallFaxCodec',
        'call_fax_relay_side_a_local_port' => 'getCallFaxRelaySideALocalPort',
        'call_fax_relay_side_a_packet_count' => 'getCallFaxRelaySideAPacketCount',
        'call_fax_relay_side_a_remote_ip' => 'getCallFaxRelaySideARemoteIp',
        'call_fax_relay_side_b_packet_count' => 'getCallFaxRelaySideBPacketCount',
        'call_fax_relay_side_b_remote_ip' => 'getCallFaxRelaySideBRemoteIp',
        'call_leg_ordinal_index' => 'getCallLegOrdinalIndex',
        'call_on_hold_duration_seconds' => 'getCallOnHoldDurationSeconds',
        'call_orig_call_id' => 'getCallOrigCallId',
        'call_orig_caller_id' => 'getCallOrigCallerId',
        'call_orig_department' => 'getCallOrigDepartment',
        'call_orig_domain' => 'getCallOrigDomain',
        'call_orig_from_host' => 'getCallOrigFromHost',
        'call_orig_from_name' => 'getCallOrigFromName',
        'call_orig_from_uri' => 'getCallOrigFromUri',
        'call_orig_from_user' => 'getCallOrigFromUser',
        'call_orig_ip_address' => 'getCallOrigIpAddress',
        'call_orig_match_uri' => 'getCallOrigMatchUri',
        'call_orig_pre_routing_uri' => 'getCallOrigPreRoutingUri',
        'call_orig_request_host' => 'getCallOrigRequestHost',
        'call_orig_request_uri' => 'getCallOrigRequestUri',
        'call_orig_request_user' => 'getCallOrigRequestUser',
        'call_orig_reseller' => 'getCallOrigReseller',
        'call_orig_site' => 'getCallOrigSite',
        'call_orig_to_host' => 'getCallOrigToHost',
        'call_orig_to_uri' => 'getCallOrigToUri',
        'call_orig_to_user' => 'getCallOrigToUser',
        'call_orig_user' => 'getCallOrigUser',
        'call_parent_call_id' => 'getCallParentCallId',
        'call_parent_cdr_id' => 'getCallParentCdrId',
        'call_record_creation_datetime' => 'getCallRecordCreationDatetime',
        'call_ringing_datetime' => 'getCallRingingDatetime',
        'call_routing_class' => 'getCallRoutingClass',
        'call_routing_match_uri' => 'getCallRoutingMatchUri',
        'call_start_datetime' => 'getCallStartDatetime',
        'call_tag' => 'getCallTag',
        'call_talking_duration_seconds' => 'getCallTalkingDurationSeconds',
        'call_term_call_id' => 'getCallTermCallId',
        'call_term_caller_id' => 'getCallTermCallerId',
        'call_term_department' => 'getCallTermDepartment',
        'call_term_domain' => 'getCallTermDomain',
        'call_term_ip_address' => 'getCallTermIpAddress',
        'call_term_match_uri' => 'getCallTermMatchUri',
        'call_term_pre_reouting_uri' => 'getCallTermPreReoutingUri',
        'call_term_reseller' => 'getCallTermReseller',
        'call_term_site' => 'getCallTermSite',
        'call_term_to_uri' => 'getCallTermToUri',
        'call_term_user' => 'getCallTermUser',
        'call_through_action' => 'getCallThroughAction',
        'call_through_call_id' => 'getCallThroughCallId',
        'call_through_caller_id' => 'getCallThroughCallerId',
        'call_through_department' => 'getCallThroughDepartment',
        'call_through_domain' => 'getCallThroughDomain',
        'call_through_reseller' => 'getCallThroughReseller',
        'call_through_site' => 'getCallThroughSite',
        'call_through_uri' => 'getCallThroughUri',
        'call_through_user' => 'getCallThroughUser',
        'call_total_duration_seconds' => 'getCallTotalDurationSeconds',
        'call_video_codec' => 'getCallVideoCodec',
        'call_video_relay_side_a_local_port' => 'getCallVideoRelaySideALocalPort',
        'call_video_relay_side_a_packet_count' => 'getCallVideoRelaySideAPacketCount',
        'call_video_relay_side_a_remote_ip' => 'getCallVideoRelaySideARemoteIp',
        'call_video_relay_side_b_packet_count' => 'getCallVideoRelaySideBPacketCount',
        'call_video_relay_side_b_remote_ip' => 'getCallVideoRelaySideBRemoteIp',
        'call_server_mac_address' => 'getCallServerMacAddress',
        'core_server' => 'getCoreServer',
        'hide_from_results' => 'getHideFromResults',
        'is_trace_expected' => 'getIsTraceExpected',
        'prefilled_trace_api' => 'getPrefilledTraceApi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('reseller', $data ?? [], null);
        $this->setIfExists('call_account_code', $data ?? [], null);
        $this->setIfExists('call_answer_datetime', $data ?? [], null);
        $this->setIfExists('call_audio_codec', $data ?? [], null);
        $this->setIfExists('call_audio_relay_side_a_local_port', $data ?? [], null);
        $this->setIfExists('call_audio_relay_side_a_packet_count', $data ?? [], null);
        $this->setIfExists('call_audio_relay_side_a_remote_ip', $data ?? [], null);
        $this->setIfExists('call_audio_relay_side_b_packet_count', $data ?? [], null);
        $this->setIfExists('call_audio_relay_side_b_remote_ip', $data ?? [], null);
        $this->setIfExists('call_batch_answer_datetime', $data ?? [], null);
        $this->setIfExists('call_batch_on_hold_duration_seconds', $data ?? [], null);
        $this->setIfExists('call_batch_sequence_marker', $data ?? [], null);
        $this->setIfExists('call_batch_start_datetime', $data ?? [], null);
        $this->setIfExists('call_batch_total_duration_seconds', $data ?? [], null);
        $this->setIfExists('call_direction', $data ?? [], null);
        $this->setIfExists('call_disconnect_datetime', $data ?? [], null);
        $this->setIfExists('call_disconnect_reason_text', $data ?? [], null);
        $this->setIfExists('call_disposition', $data ?? [], null);
        $this->setIfExists('call_disposition_notes', $data ?? [], null);
        $this->setIfExists('call_disposition_reason', $data ?? [], null);
        $this->setIfExists('call_disposition_submitted_datetime', $data ?? [], null);
        $this->setIfExists('call_disposition_type', $data ?? [], null);
        $this->setIfExists('call_fax_codec', $data ?? [], null);
        $this->setIfExists('call_fax_relay_side_a_local_port', $data ?? [], null);
        $this->setIfExists('call_fax_relay_side_a_packet_count', $data ?? [], null);
        $this->setIfExists('call_fax_relay_side_a_remote_ip', $data ?? [], null);
        $this->setIfExists('call_fax_relay_side_b_packet_count', $data ?? [], null);
        $this->setIfExists('call_fax_relay_side_b_remote_ip', $data ?? [], null);
        $this->setIfExists('call_leg_ordinal_index', $data ?? [], null);
        $this->setIfExists('call_on_hold_duration_seconds', $data ?? [], null);
        $this->setIfExists('call_orig_call_id', $data ?? [], null);
        $this->setIfExists('call_orig_caller_id', $data ?? [], null);
        $this->setIfExists('call_orig_department', $data ?? [], null);
        $this->setIfExists('call_orig_domain', $data ?? [], null);
        $this->setIfExists('call_orig_from_host', $data ?? [], null);
        $this->setIfExists('call_orig_from_name', $data ?? [], null);
        $this->setIfExists('call_orig_from_uri', $data ?? [], null);
        $this->setIfExists('call_orig_from_user', $data ?? [], null);
        $this->setIfExists('call_orig_ip_address', $data ?? [], null);
        $this->setIfExists('call_orig_match_uri', $data ?? [], null);
        $this->setIfExists('call_orig_pre_routing_uri', $data ?? [], null);
        $this->setIfExists('call_orig_request_host', $data ?? [], null);
        $this->setIfExists('call_orig_request_uri', $data ?? [], null);
        $this->setIfExists('call_orig_request_user', $data ?? [], null);
        $this->setIfExists('call_orig_reseller', $data ?? [], null);
        $this->setIfExists('call_orig_site', $data ?? [], null);
        $this->setIfExists('call_orig_to_host', $data ?? [], null);
        $this->setIfExists('call_orig_to_uri', $data ?? [], null);
        $this->setIfExists('call_orig_to_user', $data ?? [], null);
        $this->setIfExists('call_orig_user', $data ?? [], null);
        $this->setIfExists('call_parent_call_id', $data ?? [], null);
        $this->setIfExists('call_parent_cdr_id', $data ?? [], null);
        $this->setIfExists('call_record_creation_datetime', $data ?? [], null);
        $this->setIfExists('call_ringing_datetime', $data ?? [], null);
        $this->setIfExists('call_routing_class', $data ?? [], null);
        $this->setIfExists('call_routing_match_uri', $data ?? [], null);
        $this->setIfExists('call_start_datetime', $data ?? [], null);
        $this->setIfExists('call_tag', $data ?? [], null);
        $this->setIfExists('call_talking_duration_seconds', $data ?? [], null);
        $this->setIfExists('call_term_call_id', $data ?? [], null);
        $this->setIfExists('call_term_caller_id', $data ?? [], null);
        $this->setIfExists('call_term_department', $data ?? [], null);
        $this->setIfExists('call_term_domain', $data ?? [], null);
        $this->setIfExists('call_term_ip_address', $data ?? [], null);
        $this->setIfExists('call_term_match_uri', $data ?? [], null);
        $this->setIfExists('call_term_pre_reouting_uri', $data ?? [], null);
        $this->setIfExists('call_term_reseller', $data ?? [], null);
        $this->setIfExists('call_term_site', $data ?? [], null);
        $this->setIfExists('call_term_to_uri', $data ?? [], null);
        $this->setIfExists('call_term_user', $data ?? [], null);
        $this->setIfExists('call_through_action', $data ?? [], null);
        $this->setIfExists('call_through_call_id', $data ?? [], null);
        $this->setIfExists('call_through_caller_id', $data ?? [], null);
        $this->setIfExists('call_through_department', $data ?? [], null);
        $this->setIfExists('call_through_domain', $data ?? [], null);
        $this->setIfExists('call_through_reseller', $data ?? [], null);
        $this->setIfExists('call_through_site', $data ?? [], null);
        $this->setIfExists('call_through_uri', $data ?? [], null);
        $this->setIfExists('call_through_user', $data ?? [], null);
        $this->setIfExists('call_total_duration_seconds', $data ?? [], null);
        $this->setIfExists('call_video_codec', $data ?? [], null);
        $this->setIfExists('call_video_relay_side_a_local_port', $data ?? [], null);
        $this->setIfExists('call_video_relay_side_a_packet_count', $data ?? [], null);
        $this->setIfExists('call_video_relay_side_a_remote_ip', $data ?? [], null);
        $this->setIfExists('call_video_relay_side_b_packet_count', $data ?? [], null);
        $this->setIfExists('call_video_relay_side_b_remote_ip', $data ?? [], null);
        $this->setIfExists('call_server_mac_address', $data ?? [], null);
        $this->setIfExists('core_server', $data ?? [], null);
        $this->setIfExists('hide_from_results', $data ?? [], null);
        $this->setIfExists('is_trace_expected', $data ?? [], null);
        $this->setIfExists('prefilled_trace_api', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['reseller'] === null) {
            $invalidProperties[] = "'reseller' can't be null";
        }
        if ($this->container['call_account_code'] === null) {
            $invalidProperties[] = "'call_account_code' can't be null";
        }
        if ($this->container['call_answer_datetime'] === null) {
            $invalidProperties[] = "'call_answer_datetime' can't be null";
        }
        if ($this->container['call_audio_codec'] === null) {
            $invalidProperties[] = "'call_audio_codec' can't be null";
        }
        if ($this->container['call_audio_relay_side_a_local_port'] === null) {
            $invalidProperties[] = "'call_audio_relay_side_a_local_port' can't be null";
        }
        if ($this->container['call_audio_relay_side_a_packet_count'] === null) {
            $invalidProperties[] = "'call_audio_relay_side_a_packet_count' can't be null";
        }
        if ($this->container['call_audio_relay_side_a_remote_ip'] === null) {
            $invalidProperties[] = "'call_audio_relay_side_a_remote_ip' can't be null";
        }
        if ($this->container['call_audio_relay_side_b_packet_count'] === null) {
            $invalidProperties[] = "'call_audio_relay_side_b_packet_count' can't be null";
        }
        if ($this->container['call_audio_relay_side_b_remote_ip'] === null) {
            $invalidProperties[] = "'call_audio_relay_side_b_remote_ip' can't be null";
        }
        if ($this->container['call_batch_answer_datetime'] === null) {
            $invalidProperties[] = "'call_batch_answer_datetime' can't be null";
        }
        if ($this->container['call_batch_on_hold_duration_seconds'] === null) {
            $invalidProperties[] = "'call_batch_on_hold_duration_seconds' can't be null";
        }
        if ($this->container['call_batch_sequence_marker'] === null) {
            $invalidProperties[] = "'call_batch_sequence_marker' can't be null";
        }
        if ($this->container['call_batch_start_datetime'] === null) {
            $invalidProperties[] = "'call_batch_start_datetime' can't be null";
        }
        if ($this->container['call_batch_total_duration_seconds'] === null) {
            $invalidProperties[] = "'call_batch_total_duration_seconds' can't be null";
        }
        if ($this->container['call_direction'] === null) {
            $invalidProperties[] = "'call_direction' can't be null";
        }
        if ($this->container['call_disconnect_datetime'] === null) {
            $invalidProperties[] = "'call_disconnect_datetime' can't be null";
        }
        if ($this->container['call_disconnect_reason_text'] === null) {
            $invalidProperties[] = "'call_disconnect_reason_text' can't be null";
        }
        if ($this->container['call_disposition'] === null) {
            $invalidProperties[] = "'call_disposition' can't be null";
        }
        if ($this->container['call_disposition_notes'] === null) {
            $invalidProperties[] = "'call_disposition_notes' can't be null";
        }
        if ($this->container['call_disposition_reason'] === null) {
            $invalidProperties[] = "'call_disposition_reason' can't be null";
        }
        if ($this->container['call_disposition_submitted_datetime'] === null) {
            $invalidProperties[] = "'call_disposition_submitted_datetime' can't be null";
        }
        if ($this->container['call_disposition_type'] === null) {
            $invalidProperties[] = "'call_disposition_type' can't be null";
        }
        if ($this->container['call_fax_codec'] === null) {
            $invalidProperties[] = "'call_fax_codec' can't be null";
        }
        if ($this->container['call_fax_relay_side_a_local_port'] === null) {
            $invalidProperties[] = "'call_fax_relay_side_a_local_port' can't be null";
        }
        if ($this->container['call_fax_relay_side_a_packet_count'] === null) {
            $invalidProperties[] = "'call_fax_relay_side_a_packet_count' can't be null";
        }
        if ($this->container['call_fax_relay_side_a_remote_ip'] === null) {
            $invalidProperties[] = "'call_fax_relay_side_a_remote_ip' can't be null";
        }
        if ($this->container['call_fax_relay_side_b_packet_count'] === null) {
            $invalidProperties[] = "'call_fax_relay_side_b_packet_count' can't be null";
        }
        if ($this->container['call_fax_relay_side_b_remote_ip'] === null) {
            $invalidProperties[] = "'call_fax_relay_side_b_remote_ip' can't be null";
        }
        if ($this->container['call_leg_ordinal_index'] === null) {
            $invalidProperties[] = "'call_leg_ordinal_index' can't be null";
        }
        if ($this->container['call_on_hold_duration_seconds'] === null) {
            $invalidProperties[] = "'call_on_hold_duration_seconds' can't be null";
        }
        if ($this->container['call_orig_call_id'] === null) {
            $invalidProperties[] = "'call_orig_call_id' can't be null";
        }
        if ($this->container['call_orig_caller_id'] === null) {
            $invalidProperties[] = "'call_orig_caller_id' can't be null";
        }
        if ($this->container['call_orig_department'] === null) {
            $invalidProperties[] = "'call_orig_department' can't be null";
        }
        if ($this->container['call_orig_domain'] === null) {
            $invalidProperties[] = "'call_orig_domain' can't be null";
        }
        if ($this->container['call_orig_from_host'] === null) {
            $invalidProperties[] = "'call_orig_from_host' can't be null";
        }
        if ($this->container['call_orig_from_name'] === null) {
            $invalidProperties[] = "'call_orig_from_name' can't be null";
        }
        if ($this->container['call_orig_from_uri'] === null) {
            $invalidProperties[] = "'call_orig_from_uri' can't be null";
        }
        if ($this->container['call_orig_from_user'] === null) {
            $invalidProperties[] = "'call_orig_from_user' can't be null";
        }
        if ($this->container['call_orig_ip_address'] === null) {
            $invalidProperties[] = "'call_orig_ip_address' can't be null";
        }
        if ($this->container['call_orig_match_uri'] === null) {
            $invalidProperties[] = "'call_orig_match_uri' can't be null";
        }
        if ($this->container['call_orig_pre_routing_uri'] === null) {
            $invalidProperties[] = "'call_orig_pre_routing_uri' can't be null";
        }
        if ($this->container['call_orig_request_host'] === null) {
            $invalidProperties[] = "'call_orig_request_host' can't be null";
        }
        if ($this->container['call_orig_request_uri'] === null) {
            $invalidProperties[] = "'call_orig_request_uri' can't be null";
        }
        if ($this->container['call_orig_request_user'] === null) {
            $invalidProperties[] = "'call_orig_request_user' can't be null";
        }
        if ($this->container['call_orig_reseller'] === null) {
            $invalidProperties[] = "'call_orig_reseller' can't be null";
        }
        if ($this->container['call_orig_site'] === null) {
            $invalidProperties[] = "'call_orig_site' can't be null";
        }
        if ($this->container['call_orig_to_host'] === null) {
            $invalidProperties[] = "'call_orig_to_host' can't be null";
        }
        if ($this->container['call_orig_to_uri'] === null) {
            $invalidProperties[] = "'call_orig_to_uri' can't be null";
        }
        if ($this->container['call_orig_to_user'] === null) {
            $invalidProperties[] = "'call_orig_to_user' can't be null";
        }
        if ($this->container['call_orig_user'] === null) {
            $invalidProperties[] = "'call_orig_user' can't be null";
        }
        if ($this->container['call_parent_call_id'] === null) {
            $invalidProperties[] = "'call_parent_call_id' can't be null";
        }
        if ($this->container['call_parent_cdr_id'] === null) {
            $invalidProperties[] = "'call_parent_cdr_id' can't be null";
        }
        if ($this->container['call_record_creation_datetime'] === null) {
            $invalidProperties[] = "'call_record_creation_datetime' can't be null";
        }
        if ($this->container['call_ringing_datetime'] === null) {
            $invalidProperties[] = "'call_ringing_datetime' can't be null";
        }
        if ($this->container['call_routing_class'] === null) {
            $invalidProperties[] = "'call_routing_class' can't be null";
        }
        if ($this->container['call_routing_match_uri'] === null) {
            $invalidProperties[] = "'call_routing_match_uri' can't be null";
        }
        if ($this->container['call_start_datetime'] === null) {
            $invalidProperties[] = "'call_start_datetime' can't be null";
        }
        if ($this->container['call_tag'] === null) {
            $invalidProperties[] = "'call_tag' can't be null";
        }
        if ($this->container['call_talking_duration_seconds'] === null) {
            $invalidProperties[] = "'call_talking_duration_seconds' can't be null";
        }
        if ($this->container['call_term_call_id'] === null) {
            $invalidProperties[] = "'call_term_call_id' can't be null";
        }
        if ($this->container['call_term_caller_id'] === null) {
            $invalidProperties[] = "'call_term_caller_id' can't be null";
        }
        if ($this->container['call_term_department'] === null) {
            $invalidProperties[] = "'call_term_department' can't be null";
        }
        if ($this->container['call_term_domain'] === null) {
            $invalidProperties[] = "'call_term_domain' can't be null";
        }
        if ($this->container['call_term_ip_address'] === null) {
            $invalidProperties[] = "'call_term_ip_address' can't be null";
        }
        if ($this->container['call_term_match_uri'] === null) {
            $invalidProperties[] = "'call_term_match_uri' can't be null";
        }
        if ($this->container['call_term_pre_reouting_uri'] === null) {
            $invalidProperties[] = "'call_term_pre_reouting_uri' can't be null";
        }
        if ($this->container['call_term_reseller'] === null) {
            $invalidProperties[] = "'call_term_reseller' can't be null";
        }
        if ($this->container['call_term_site'] === null) {
            $invalidProperties[] = "'call_term_site' can't be null";
        }
        if ($this->container['call_term_to_uri'] === null) {
            $invalidProperties[] = "'call_term_to_uri' can't be null";
        }
        if ($this->container['call_term_user'] === null) {
            $invalidProperties[] = "'call_term_user' can't be null";
        }
        if ($this->container['call_through_action'] === null) {
            $invalidProperties[] = "'call_through_action' can't be null";
        }
        if ($this->container['call_through_call_id'] === null) {
            $invalidProperties[] = "'call_through_call_id' can't be null";
        }
        if ($this->container['call_through_caller_id'] === null) {
            $invalidProperties[] = "'call_through_caller_id' can't be null";
        }
        if ($this->container['call_through_department'] === null) {
            $invalidProperties[] = "'call_through_department' can't be null";
        }
        if ($this->container['call_through_domain'] === null) {
            $invalidProperties[] = "'call_through_domain' can't be null";
        }
        if ($this->container['call_through_reseller'] === null) {
            $invalidProperties[] = "'call_through_reseller' can't be null";
        }
        if ($this->container['call_through_site'] === null) {
            $invalidProperties[] = "'call_through_site' can't be null";
        }
        if ($this->container['call_through_uri'] === null) {
            $invalidProperties[] = "'call_through_uri' can't be null";
        }
        if ($this->container['call_through_user'] === null) {
            $invalidProperties[] = "'call_through_user' can't be null";
        }
        if ($this->container['call_total_duration_seconds'] === null) {
            $invalidProperties[] = "'call_total_duration_seconds' can't be null";
        }
        if ($this->container['call_video_codec'] === null) {
            $invalidProperties[] = "'call_video_codec' can't be null";
        }
        if ($this->container['call_video_relay_side_a_local_port'] === null) {
            $invalidProperties[] = "'call_video_relay_side_a_local_port' can't be null";
        }
        if ($this->container['call_video_relay_side_a_packet_count'] === null) {
            $invalidProperties[] = "'call_video_relay_side_a_packet_count' can't be null";
        }
        if ($this->container['call_video_relay_side_a_remote_ip'] === null) {
            $invalidProperties[] = "'call_video_relay_side_a_remote_ip' can't be null";
        }
        if ($this->container['call_video_relay_side_b_packet_count'] === null) {
            $invalidProperties[] = "'call_video_relay_side_b_packet_count' can't be null";
        }
        if ($this->container['call_video_relay_side_b_remote_ip'] === null) {
            $invalidProperties[] = "'call_video_relay_side_b_remote_ip' can't be null";
        }
        if ($this->container['call_server_mac_address'] === null) {
            $invalidProperties[] = "'call_server_mac_address' can't be null";
        }
        if ($this->container['core_server'] === null) {
            $invalidProperties[] = "'core_server' can't be null";
        }
        if ($this->container['hide_from_results'] === null) {
            $invalidProperties[] = "'hide_from_results' can't be null";
        }
        if ($this->container['is_trace_expected'] === null) {
            $invalidProperties[] = "'is_trace_expected' can't be null";
        }
        if ($this->container['prefilled_trace_api'] === null) {
            $invalidProperties[] = "'prefilled_trace_api' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets reseller
     *
     * @return string
     */
    public function getReseller()
    {
        return $this->container['reseller'];
    }

    /**
     * Sets reseller
     *
     * @param string $reseller reseller
     *
     * @return self
     */
    public function setReseller($reseller)
    {
        if (is_null($reseller)) {
            throw new \InvalidArgumentException('non-nullable reseller cannot be null');
        }
        $this->container['reseller'] = $reseller;

        return $this;
    }

    /**
     * Gets call_account_code
     *
     * @return string
     */
    public function getCallAccountCode()
    {
        return $this->container['call_account_code'];
    }

    /**
     * Sets call_account_code
     *
     * @param string $call_account_code call_account_code
     *
     * @return self
     */
    public function setCallAccountCode($call_account_code)
    {
        if (is_null($call_account_code)) {
            array_push($this->openAPINullablesSetToNull, 'call_account_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_account_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_account_code'] = $call_account_code;

        return $this;
    }

    /**
     * Gets call_answer_datetime
     *
     * @return string
     */
    public function getCallAnswerDatetime()
    {
        return $this->container['call_answer_datetime'];
    }

    /**
     * Sets call_answer_datetime
     *
     * @param string $call_answer_datetime call_answer_datetime
     *
     * @return self
     */
    public function setCallAnswerDatetime($call_answer_datetime)
    {
        if (is_null($call_answer_datetime)) {
            throw new \InvalidArgumentException('non-nullable call_answer_datetime cannot be null');
        }
        $this->container['call_answer_datetime'] = $call_answer_datetime;

        return $this;
    }

    /**
     * Gets call_audio_codec
     *
     * @return string
     */
    public function getCallAudioCodec()
    {
        return $this->container['call_audio_codec'];
    }

    /**
     * Sets call_audio_codec
     *
     * @param string $call_audio_codec call_audio_codec
     *
     * @return self
     */
    public function setCallAudioCodec($call_audio_codec)
    {
        if (is_null($call_audio_codec)) {
            throw new \InvalidArgumentException('non-nullable call_audio_codec cannot be null');
        }
        $this->container['call_audio_codec'] = $call_audio_codec;

        return $this;
    }

    /**
     * Gets call_audio_relay_side_a_local_port
     *
     * @return int
     */
    public function getCallAudioRelaySideALocalPort()
    {
        return $this->container['call_audio_relay_side_a_local_port'];
    }

    /**
     * Sets call_audio_relay_side_a_local_port
     *
     * @param int $call_audio_relay_side_a_local_port call_audio_relay_side_a_local_port
     *
     * @return self
     */
    public function setCallAudioRelaySideALocalPort($call_audio_relay_side_a_local_port)
    {
        if (is_null($call_audio_relay_side_a_local_port)) {
            throw new \InvalidArgumentException('non-nullable call_audio_relay_side_a_local_port cannot be null');
        }
        $this->container['call_audio_relay_side_a_local_port'] = $call_audio_relay_side_a_local_port;

        return $this;
    }

    /**
     * Gets call_audio_relay_side_a_packet_count
     *
     * @return int
     */
    public function getCallAudioRelaySideAPacketCount()
    {
        return $this->container['call_audio_relay_side_a_packet_count'];
    }

    /**
     * Sets call_audio_relay_side_a_packet_count
     *
     * @param int $call_audio_relay_side_a_packet_count call_audio_relay_side_a_packet_count
     *
     * @return self
     */
    public function setCallAudioRelaySideAPacketCount($call_audio_relay_side_a_packet_count)
    {
        if (is_null($call_audio_relay_side_a_packet_count)) {
            throw new \InvalidArgumentException('non-nullable call_audio_relay_side_a_packet_count cannot be null');
        }
        $this->container['call_audio_relay_side_a_packet_count'] = $call_audio_relay_side_a_packet_count;

        return $this;
    }

    /**
     * Gets call_audio_relay_side_a_remote_ip
     *
     * @return string
     */
    public function getCallAudioRelaySideARemoteIp()
    {
        return $this->container['call_audio_relay_side_a_remote_ip'];
    }

    /**
     * Sets call_audio_relay_side_a_remote_ip
     *
     * @param string $call_audio_relay_side_a_remote_ip call_audio_relay_side_a_remote_ip
     *
     * @return self
     */
    public function setCallAudioRelaySideARemoteIp($call_audio_relay_side_a_remote_ip)
    {
        if (is_null($call_audio_relay_side_a_remote_ip)) {
            throw new \InvalidArgumentException('non-nullable call_audio_relay_side_a_remote_ip cannot be null');
        }
        $this->container['call_audio_relay_side_a_remote_ip'] = $call_audio_relay_side_a_remote_ip;

        return $this;
    }

    /**
     * Gets call_audio_relay_side_b_packet_count
     *
     * @return int
     */
    public function getCallAudioRelaySideBPacketCount()
    {
        return $this->container['call_audio_relay_side_b_packet_count'];
    }

    /**
     * Sets call_audio_relay_side_b_packet_count
     *
     * @param int $call_audio_relay_side_b_packet_count call_audio_relay_side_b_packet_count
     *
     * @return self
     */
    public function setCallAudioRelaySideBPacketCount($call_audio_relay_side_b_packet_count)
    {
        if (is_null($call_audio_relay_side_b_packet_count)) {
            throw new \InvalidArgumentException('non-nullable call_audio_relay_side_b_packet_count cannot be null');
        }
        $this->container['call_audio_relay_side_b_packet_count'] = $call_audio_relay_side_b_packet_count;

        return $this;
    }

    /**
     * Gets call_audio_relay_side_b_remote_ip
     *
     * @return string
     */
    public function getCallAudioRelaySideBRemoteIp()
    {
        return $this->container['call_audio_relay_side_b_remote_ip'];
    }

    /**
     * Sets call_audio_relay_side_b_remote_ip
     *
     * @param string $call_audio_relay_side_b_remote_ip call_audio_relay_side_b_remote_ip
     *
     * @return self
     */
    public function setCallAudioRelaySideBRemoteIp($call_audio_relay_side_b_remote_ip)
    {
        if (is_null($call_audio_relay_side_b_remote_ip)) {
            throw new \InvalidArgumentException('non-nullable call_audio_relay_side_b_remote_ip cannot be null');
        }
        $this->container['call_audio_relay_side_b_remote_ip'] = $call_audio_relay_side_b_remote_ip;

        return $this;
    }

    /**
     * Gets call_batch_answer_datetime
     *
     * @return string
     */
    public function getCallBatchAnswerDatetime()
    {
        return $this->container['call_batch_answer_datetime'];
    }

    /**
     * Sets call_batch_answer_datetime
     *
     * @param string $call_batch_answer_datetime call_batch_answer_datetime
     *
     * @return self
     */
    public function setCallBatchAnswerDatetime($call_batch_answer_datetime)
    {
        if (is_null($call_batch_answer_datetime)) {
            throw new \InvalidArgumentException('non-nullable call_batch_answer_datetime cannot be null');
        }
        $this->container['call_batch_answer_datetime'] = $call_batch_answer_datetime;

        return $this;
    }

    /**
     * Gets call_batch_on_hold_duration_seconds
     *
     * @return int
     */
    public function getCallBatchOnHoldDurationSeconds()
    {
        return $this->container['call_batch_on_hold_duration_seconds'];
    }

    /**
     * Sets call_batch_on_hold_duration_seconds
     *
     * @param int $call_batch_on_hold_duration_seconds call_batch_on_hold_duration_seconds
     *
     * @return self
     */
    public function setCallBatchOnHoldDurationSeconds($call_batch_on_hold_duration_seconds)
    {
        if (is_null($call_batch_on_hold_duration_seconds)) {
            throw new \InvalidArgumentException('non-nullable call_batch_on_hold_duration_seconds cannot be null');
        }
        $this->container['call_batch_on_hold_duration_seconds'] = $call_batch_on_hold_duration_seconds;

        return $this;
    }

    /**
     * Gets call_batch_sequence_marker
     *
     * @return string
     */
    public function getCallBatchSequenceMarker()
    {
        return $this->container['call_batch_sequence_marker'];
    }

    /**
     * Sets call_batch_sequence_marker
     *
     * @param string $call_batch_sequence_marker call_batch_sequence_marker
     *
     * @return self
     */
    public function setCallBatchSequenceMarker($call_batch_sequence_marker)
    {
        if (is_null($call_batch_sequence_marker)) {
            throw new \InvalidArgumentException('non-nullable call_batch_sequence_marker cannot be null');
        }
        $this->container['call_batch_sequence_marker'] = $call_batch_sequence_marker;

        return $this;
    }

    /**
     * Gets call_batch_start_datetime
     *
     * @return string
     */
    public function getCallBatchStartDatetime()
    {
        return $this->container['call_batch_start_datetime'];
    }

    /**
     * Sets call_batch_start_datetime
     *
     * @param string $call_batch_start_datetime call_batch_start_datetime
     *
     * @return self
     */
    public function setCallBatchStartDatetime($call_batch_start_datetime)
    {
        if (is_null($call_batch_start_datetime)) {
            throw new \InvalidArgumentException('non-nullable call_batch_start_datetime cannot be null');
        }
        $this->container['call_batch_start_datetime'] = $call_batch_start_datetime;

        return $this;
    }

    /**
     * Gets call_batch_total_duration_seconds
     *
     * @return int
     */
    public function getCallBatchTotalDurationSeconds()
    {
        return $this->container['call_batch_total_duration_seconds'];
    }

    /**
     * Sets call_batch_total_duration_seconds
     *
     * @param int $call_batch_total_duration_seconds call_batch_total_duration_seconds
     *
     * @return self
     */
    public function setCallBatchTotalDurationSeconds($call_batch_total_duration_seconds)
    {
        if (is_null($call_batch_total_duration_seconds)) {
            throw new \InvalidArgumentException('non-nullable call_batch_total_duration_seconds cannot be null');
        }
        $this->container['call_batch_total_duration_seconds'] = $call_batch_total_duration_seconds;

        return $this;
    }

    /**
     * Gets call_direction
     *
     * @return int
     */
    public function getCallDirection()
    {
        return $this->container['call_direction'];
    }

    /**
     * Sets call_direction
     *
     * @param int $call_direction call_direction
     *
     * @return self
     */
    public function setCallDirection($call_direction)
    {
        if (is_null($call_direction)) {
            throw new \InvalidArgumentException('non-nullable call_direction cannot be null');
        }
        $this->container['call_direction'] = $call_direction;

        return $this;
    }

    /**
     * Gets call_disconnect_datetime
     *
     * @return string
     */
    public function getCallDisconnectDatetime()
    {
        return $this->container['call_disconnect_datetime'];
    }

    /**
     * Sets call_disconnect_datetime
     *
     * @param string $call_disconnect_datetime call_disconnect_datetime
     *
     * @return self
     */
    public function setCallDisconnectDatetime($call_disconnect_datetime)
    {
        if (is_null($call_disconnect_datetime)) {
            throw new \InvalidArgumentException('non-nullable call_disconnect_datetime cannot be null');
        }
        $this->container['call_disconnect_datetime'] = $call_disconnect_datetime;

        return $this;
    }

    /**
     * Gets call_disconnect_reason_text
     *
     * @return string
     */
    public function getCallDisconnectReasonText()
    {
        return $this->container['call_disconnect_reason_text'];
    }

    /**
     * Sets call_disconnect_reason_text
     *
     * @param string $call_disconnect_reason_text call_disconnect_reason_text
     *
     * @return self
     */
    public function setCallDisconnectReasonText($call_disconnect_reason_text)
    {
        if (is_null($call_disconnect_reason_text)) {
            throw new \InvalidArgumentException('non-nullable call_disconnect_reason_text cannot be null');
        }
        $this->container['call_disconnect_reason_text'] = $call_disconnect_reason_text;

        return $this;
    }

    /**
     * Gets call_disposition
     *
     * @return mixed
     */
    public function getCallDisposition()
    {
        return $this->container['call_disposition'];
    }

    /**
     * Sets call_disposition
     *
     * @param mixed $call_disposition call_disposition
     *
     * @return self
     */
    public function setCallDisposition($call_disposition)
    {
        if (is_null($call_disposition)) {
            array_push($this->openAPINullablesSetToNull, 'call_disposition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_disposition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_disposition'] = $call_disposition;

        return $this;
    }

    /**
     * Gets call_disposition_notes
     *
     * @return mixed
     */
    public function getCallDispositionNotes()
    {
        return $this->container['call_disposition_notes'];
    }

    /**
     * Sets call_disposition_notes
     *
     * @param mixed $call_disposition_notes call_disposition_notes
     *
     * @return self
     */
    public function setCallDispositionNotes($call_disposition_notes)
    {
        if (is_null($call_disposition_notes)) {
            array_push($this->openAPINullablesSetToNull, 'call_disposition_notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_disposition_notes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_disposition_notes'] = $call_disposition_notes;

        return $this;
    }

    /**
     * Gets call_disposition_reason
     *
     * @return mixed
     */
    public function getCallDispositionReason()
    {
        return $this->container['call_disposition_reason'];
    }

    /**
     * Sets call_disposition_reason
     *
     * @param mixed $call_disposition_reason call_disposition_reason
     *
     * @return self
     */
    public function setCallDispositionReason($call_disposition_reason)
    {
        if (is_null($call_disposition_reason)) {
            array_push($this->openAPINullablesSetToNull, 'call_disposition_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_disposition_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_disposition_reason'] = $call_disposition_reason;

        return $this;
    }

    /**
     * Gets call_disposition_submitted_datetime
     *
     * @return mixed
     */
    public function getCallDispositionSubmittedDatetime()
    {
        return $this->container['call_disposition_submitted_datetime'];
    }

    /**
     * Sets call_disposition_submitted_datetime
     *
     * @param mixed $call_disposition_submitted_datetime call_disposition_submitted_datetime
     *
     * @return self
     */
    public function setCallDispositionSubmittedDatetime($call_disposition_submitted_datetime)
    {
        if (is_null($call_disposition_submitted_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'call_disposition_submitted_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_disposition_submitted_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_disposition_submitted_datetime'] = $call_disposition_submitted_datetime;

        return $this;
    }

    /**
     * Gets call_disposition_type
     *
     * @return mixed
     */
    public function getCallDispositionType()
    {
        return $this->container['call_disposition_type'];
    }

    /**
     * Sets call_disposition_type
     *
     * @param mixed $call_disposition_type call_disposition_type
     *
     * @return self
     */
    public function setCallDispositionType($call_disposition_type)
    {
        if (is_null($call_disposition_type)) {
            array_push($this->openAPINullablesSetToNull, 'call_disposition_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_disposition_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_disposition_type'] = $call_disposition_type;

        return $this;
    }

    /**
     * Gets call_fax_codec
     *
     * @return mixed
     */
    public function getCallFaxCodec()
    {
        return $this->container['call_fax_codec'];
    }

    /**
     * Sets call_fax_codec
     *
     * @param mixed $call_fax_codec call_fax_codec
     *
     * @return self
     */
    public function setCallFaxCodec($call_fax_codec)
    {
        if (is_null($call_fax_codec)) {
            array_push($this->openAPINullablesSetToNull, 'call_fax_codec');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_fax_codec', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_fax_codec'] = $call_fax_codec;

        return $this;
    }

    /**
     * Gets call_fax_relay_side_a_local_port
     *
     * @return mixed
     */
    public function getCallFaxRelaySideALocalPort()
    {
        return $this->container['call_fax_relay_side_a_local_port'];
    }

    /**
     * Sets call_fax_relay_side_a_local_port
     *
     * @param mixed $call_fax_relay_side_a_local_port call_fax_relay_side_a_local_port
     *
     * @return self
     */
    public function setCallFaxRelaySideALocalPort($call_fax_relay_side_a_local_port)
    {
        if (is_null($call_fax_relay_side_a_local_port)) {
            array_push($this->openAPINullablesSetToNull, 'call_fax_relay_side_a_local_port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_fax_relay_side_a_local_port', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_fax_relay_side_a_local_port'] = $call_fax_relay_side_a_local_port;

        return $this;
    }

    /**
     * Gets call_fax_relay_side_a_packet_count
     *
     * @return mixed
     */
    public function getCallFaxRelaySideAPacketCount()
    {
        return $this->container['call_fax_relay_side_a_packet_count'];
    }

    /**
     * Sets call_fax_relay_side_a_packet_count
     *
     * @param mixed $call_fax_relay_side_a_packet_count call_fax_relay_side_a_packet_count
     *
     * @return self
     */
    public function setCallFaxRelaySideAPacketCount($call_fax_relay_side_a_packet_count)
    {
        if (is_null($call_fax_relay_side_a_packet_count)) {
            array_push($this->openAPINullablesSetToNull, 'call_fax_relay_side_a_packet_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_fax_relay_side_a_packet_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_fax_relay_side_a_packet_count'] = $call_fax_relay_side_a_packet_count;

        return $this;
    }

    /**
     * Gets call_fax_relay_side_a_remote_ip
     *
     * @return mixed
     */
    public function getCallFaxRelaySideARemoteIp()
    {
        return $this->container['call_fax_relay_side_a_remote_ip'];
    }

    /**
     * Sets call_fax_relay_side_a_remote_ip
     *
     * @param mixed $call_fax_relay_side_a_remote_ip call_fax_relay_side_a_remote_ip
     *
     * @return self
     */
    public function setCallFaxRelaySideARemoteIp($call_fax_relay_side_a_remote_ip)
    {
        if (is_null($call_fax_relay_side_a_remote_ip)) {
            array_push($this->openAPINullablesSetToNull, 'call_fax_relay_side_a_remote_ip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_fax_relay_side_a_remote_ip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_fax_relay_side_a_remote_ip'] = $call_fax_relay_side_a_remote_ip;

        return $this;
    }

    /**
     * Gets call_fax_relay_side_b_packet_count
     *
     * @return mixed
     */
    public function getCallFaxRelaySideBPacketCount()
    {
        return $this->container['call_fax_relay_side_b_packet_count'];
    }

    /**
     * Sets call_fax_relay_side_b_packet_count
     *
     * @param mixed $call_fax_relay_side_b_packet_count call_fax_relay_side_b_packet_count
     *
     * @return self
     */
    public function setCallFaxRelaySideBPacketCount($call_fax_relay_side_b_packet_count)
    {
        if (is_null($call_fax_relay_side_b_packet_count)) {
            array_push($this->openAPINullablesSetToNull, 'call_fax_relay_side_b_packet_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_fax_relay_side_b_packet_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_fax_relay_side_b_packet_count'] = $call_fax_relay_side_b_packet_count;

        return $this;
    }

    /**
     * Gets call_fax_relay_side_b_remote_ip
     *
     * @return mixed
     */
    public function getCallFaxRelaySideBRemoteIp()
    {
        return $this->container['call_fax_relay_side_b_remote_ip'];
    }

    /**
     * Sets call_fax_relay_side_b_remote_ip
     *
     * @param mixed $call_fax_relay_side_b_remote_ip call_fax_relay_side_b_remote_ip
     *
     * @return self
     */
    public function setCallFaxRelaySideBRemoteIp($call_fax_relay_side_b_remote_ip)
    {
        if (is_null($call_fax_relay_side_b_remote_ip)) {
            array_push($this->openAPINullablesSetToNull, 'call_fax_relay_side_b_remote_ip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_fax_relay_side_b_remote_ip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_fax_relay_side_b_remote_ip'] = $call_fax_relay_side_b_remote_ip;

        return $this;
    }

    /**
     * Gets call_leg_ordinal_index
     *
     * @return int
     */
    public function getCallLegOrdinalIndex()
    {
        return $this->container['call_leg_ordinal_index'];
    }

    /**
     * Sets call_leg_ordinal_index
     *
     * @param int $call_leg_ordinal_index call_leg_ordinal_index
     *
     * @return self
     */
    public function setCallLegOrdinalIndex($call_leg_ordinal_index)
    {
        if (is_null($call_leg_ordinal_index)) {
            throw new \InvalidArgumentException('non-nullable call_leg_ordinal_index cannot be null');
        }
        $this->container['call_leg_ordinal_index'] = $call_leg_ordinal_index;

        return $this;
    }

    /**
     * Gets call_on_hold_duration_seconds
     *
     * @return int
     */
    public function getCallOnHoldDurationSeconds()
    {
        return $this->container['call_on_hold_duration_seconds'];
    }

    /**
     * Sets call_on_hold_duration_seconds
     *
     * @param int $call_on_hold_duration_seconds call_on_hold_duration_seconds
     *
     * @return self
     */
    public function setCallOnHoldDurationSeconds($call_on_hold_duration_seconds)
    {
        if (is_null($call_on_hold_duration_seconds)) {
            throw new \InvalidArgumentException('non-nullable call_on_hold_duration_seconds cannot be null');
        }
        $this->container['call_on_hold_duration_seconds'] = $call_on_hold_duration_seconds;

        return $this;
    }

    /**
     * Gets call_orig_call_id
     *
     * @return string
     */
    public function getCallOrigCallId()
    {
        return $this->container['call_orig_call_id'];
    }

    /**
     * Sets call_orig_call_id
     *
     * @param string $call_orig_call_id call_orig_call_id
     *
     * @return self
     */
    public function setCallOrigCallId($call_orig_call_id)
    {
        if (is_null($call_orig_call_id)) {
            throw new \InvalidArgumentException('non-nullable call_orig_call_id cannot be null');
        }
        $this->container['call_orig_call_id'] = $call_orig_call_id;

        return $this;
    }

    /**
     * Gets call_orig_caller_id
     *
     * @return int
     */
    public function getCallOrigCallerId()
    {
        return $this->container['call_orig_caller_id'];
    }

    /**
     * Sets call_orig_caller_id
     *
     * @param int $call_orig_caller_id call_orig_caller_id
     *
     * @return self
     */
    public function setCallOrigCallerId($call_orig_caller_id)
    {
        if (is_null($call_orig_caller_id)) {
            throw new \InvalidArgumentException('non-nullable call_orig_caller_id cannot be null');
        }
        $this->container['call_orig_caller_id'] = $call_orig_caller_id;

        return $this;
    }

    /**
     * Gets call_orig_department
     *
     * @return string
     */
    public function getCallOrigDepartment()
    {
        return $this->container['call_orig_department'];
    }

    /**
     * Sets call_orig_department
     *
     * @param string $call_orig_department call_orig_department
     *
     * @return self
     */
    public function setCallOrigDepartment($call_orig_department)
    {
        if (is_null($call_orig_department)) {
            throw new \InvalidArgumentException('non-nullable call_orig_department cannot be null');
        }
        $this->container['call_orig_department'] = $call_orig_department;

        return $this;
    }

    /**
     * Gets call_orig_domain
     *
     * @return string
     */
    public function getCallOrigDomain()
    {
        return $this->container['call_orig_domain'];
    }

    /**
     * Sets call_orig_domain
     *
     * @param string $call_orig_domain call_orig_domain
     *
     * @return self
     */
    public function setCallOrigDomain($call_orig_domain)
    {
        if (is_null($call_orig_domain)) {
            throw new \InvalidArgumentException('non-nullable call_orig_domain cannot be null');
        }
        $this->container['call_orig_domain'] = $call_orig_domain;

        return $this;
    }

    /**
     * Gets call_orig_from_host
     *
     * @return string
     */
    public function getCallOrigFromHost()
    {
        return $this->container['call_orig_from_host'];
    }

    /**
     * Sets call_orig_from_host
     *
     * @param string $call_orig_from_host call_orig_from_host
     *
     * @return self
     */
    public function setCallOrigFromHost($call_orig_from_host)
    {
        if (is_null($call_orig_from_host)) {
            throw new \InvalidArgumentException('non-nullable call_orig_from_host cannot be null');
        }
        $this->container['call_orig_from_host'] = $call_orig_from_host;

        return $this;
    }

    /**
     * Gets call_orig_from_name
     *
     * @return string
     */
    public function getCallOrigFromName()
    {
        return $this->container['call_orig_from_name'];
    }

    /**
     * Sets call_orig_from_name
     *
     * @param string $call_orig_from_name call_orig_from_name
     *
     * @return self
     */
    public function setCallOrigFromName($call_orig_from_name)
    {
        if (is_null($call_orig_from_name)) {
            throw new \InvalidArgumentException('non-nullable call_orig_from_name cannot be null');
        }
        $this->container['call_orig_from_name'] = $call_orig_from_name;

        return $this;
    }

    /**
     * Gets call_orig_from_uri
     *
     * @return string
     */
    public function getCallOrigFromUri()
    {
        return $this->container['call_orig_from_uri'];
    }

    /**
     * Sets call_orig_from_uri
     *
     * @param string $call_orig_from_uri call_orig_from_uri
     *
     * @return self
     */
    public function setCallOrigFromUri($call_orig_from_uri)
    {
        if (is_null($call_orig_from_uri)) {
            throw new \InvalidArgumentException('non-nullable call_orig_from_uri cannot be null');
        }
        $this->container['call_orig_from_uri'] = $call_orig_from_uri;

        return $this;
    }

    /**
     * Gets call_orig_from_user
     *
     * @return string
     */
    public function getCallOrigFromUser()
    {
        return $this->container['call_orig_from_user'];
    }

    /**
     * Sets call_orig_from_user
     *
     * @param string $call_orig_from_user call_orig_from_user
     *
     * @return self
     */
    public function setCallOrigFromUser($call_orig_from_user)
    {
        if (is_null($call_orig_from_user)) {
            throw new \InvalidArgumentException('non-nullable call_orig_from_user cannot be null');
        }
        $this->container['call_orig_from_user'] = $call_orig_from_user;

        return $this;
    }

    /**
     * Gets call_orig_ip_address
     *
     * @return string
     */
    public function getCallOrigIpAddress()
    {
        return $this->container['call_orig_ip_address'];
    }

    /**
     * Sets call_orig_ip_address
     *
     * @param string $call_orig_ip_address call_orig_ip_address
     *
     * @return self
     */
    public function setCallOrigIpAddress($call_orig_ip_address)
    {
        if (is_null($call_orig_ip_address)) {
            throw new \InvalidArgumentException('non-nullable call_orig_ip_address cannot be null');
        }
        $this->container['call_orig_ip_address'] = $call_orig_ip_address;

        return $this;
    }

    /**
     * Gets call_orig_match_uri
     *
     * @return string
     */
    public function getCallOrigMatchUri()
    {
        return $this->container['call_orig_match_uri'];
    }

    /**
     * Sets call_orig_match_uri
     *
     * @param string $call_orig_match_uri call_orig_match_uri
     *
     * @return self
     */
    public function setCallOrigMatchUri($call_orig_match_uri)
    {
        if (is_null($call_orig_match_uri)) {
            throw new \InvalidArgumentException('non-nullable call_orig_match_uri cannot be null');
        }
        $this->container['call_orig_match_uri'] = $call_orig_match_uri;

        return $this;
    }

    /**
     * Gets call_orig_pre_routing_uri
     *
     * @return string
     */
    public function getCallOrigPreRoutingUri()
    {
        return $this->container['call_orig_pre_routing_uri'];
    }

    /**
     * Sets call_orig_pre_routing_uri
     *
     * @param string $call_orig_pre_routing_uri call_orig_pre_routing_uri
     *
     * @return self
     */
    public function setCallOrigPreRoutingUri($call_orig_pre_routing_uri)
    {
        if (is_null($call_orig_pre_routing_uri)) {
            throw new \InvalidArgumentException('non-nullable call_orig_pre_routing_uri cannot be null');
        }
        $this->container['call_orig_pre_routing_uri'] = $call_orig_pre_routing_uri;

        return $this;
    }

    /**
     * Gets call_orig_request_host
     *
     * @return string
     */
    public function getCallOrigRequestHost()
    {
        return $this->container['call_orig_request_host'];
    }

    /**
     * Sets call_orig_request_host
     *
     * @param string $call_orig_request_host call_orig_request_host
     *
     * @return self
     */
    public function setCallOrigRequestHost($call_orig_request_host)
    {
        if (is_null($call_orig_request_host)) {
            throw new \InvalidArgumentException('non-nullable call_orig_request_host cannot be null');
        }
        $this->container['call_orig_request_host'] = $call_orig_request_host;

        return $this;
    }

    /**
     * Gets call_orig_request_uri
     *
     * @return string
     */
    public function getCallOrigRequestUri()
    {
        return $this->container['call_orig_request_uri'];
    }

    /**
     * Sets call_orig_request_uri
     *
     * @param string $call_orig_request_uri call_orig_request_uri
     *
     * @return self
     */
    public function setCallOrigRequestUri($call_orig_request_uri)
    {
        if (is_null($call_orig_request_uri)) {
            throw new \InvalidArgumentException('non-nullable call_orig_request_uri cannot be null');
        }
        $this->container['call_orig_request_uri'] = $call_orig_request_uri;

        return $this;
    }

    /**
     * Gets call_orig_request_user
     *
     * @return string
     */
    public function getCallOrigRequestUser()
    {
        return $this->container['call_orig_request_user'];
    }

    /**
     * Sets call_orig_request_user
     *
     * @param string $call_orig_request_user call_orig_request_user
     *
     * @return self
     */
    public function setCallOrigRequestUser($call_orig_request_user)
    {
        if (is_null($call_orig_request_user)) {
            throw new \InvalidArgumentException('non-nullable call_orig_request_user cannot be null');
        }
        $this->container['call_orig_request_user'] = $call_orig_request_user;

        return $this;
    }

    /**
     * Gets call_orig_reseller
     *
     * @return string
     */
    public function getCallOrigReseller()
    {
        return $this->container['call_orig_reseller'];
    }

    /**
     * Sets call_orig_reseller
     *
     * @param string $call_orig_reseller call_orig_reseller
     *
     * @return self
     */
    public function setCallOrigReseller($call_orig_reseller)
    {
        if (is_null($call_orig_reseller)) {
            throw new \InvalidArgumentException('non-nullable call_orig_reseller cannot be null');
        }
        $this->container['call_orig_reseller'] = $call_orig_reseller;

        return $this;
    }

    /**
     * Gets call_orig_site
     *
     * @return string
     */
    public function getCallOrigSite()
    {
        return $this->container['call_orig_site'];
    }

    /**
     * Sets call_orig_site
     *
     * @param string $call_orig_site call_orig_site
     *
     * @return self
     */
    public function setCallOrigSite($call_orig_site)
    {
        if (is_null($call_orig_site)) {
            throw new \InvalidArgumentException('non-nullable call_orig_site cannot be null');
        }
        $this->container['call_orig_site'] = $call_orig_site;

        return $this;
    }

    /**
     * Gets call_orig_to_host
     *
     * @return string
     */
    public function getCallOrigToHost()
    {
        return $this->container['call_orig_to_host'];
    }

    /**
     * Sets call_orig_to_host
     *
     * @param string $call_orig_to_host call_orig_to_host
     *
     * @return self
     */
    public function setCallOrigToHost($call_orig_to_host)
    {
        if (is_null($call_orig_to_host)) {
            throw new \InvalidArgumentException('non-nullable call_orig_to_host cannot be null');
        }
        $this->container['call_orig_to_host'] = $call_orig_to_host;

        return $this;
    }

    /**
     * Gets call_orig_to_uri
     *
     * @return string
     */
    public function getCallOrigToUri()
    {
        return $this->container['call_orig_to_uri'];
    }

    /**
     * Sets call_orig_to_uri
     *
     * @param string $call_orig_to_uri call_orig_to_uri
     *
     * @return self
     */
    public function setCallOrigToUri($call_orig_to_uri)
    {
        if (is_null($call_orig_to_uri)) {
            throw new \InvalidArgumentException('non-nullable call_orig_to_uri cannot be null');
        }
        $this->container['call_orig_to_uri'] = $call_orig_to_uri;

        return $this;
    }

    /**
     * Gets call_orig_to_user
     *
     * @return string
     */
    public function getCallOrigToUser()
    {
        return $this->container['call_orig_to_user'];
    }

    /**
     * Sets call_orig_to_user
     *
     * @param string $call_orig_to_user call_orig_to_user
     *
     * @return self
     */
    public function setCallOrigToUser($call_orig_to_user)
    {
        if (is_null($call_orig_to_user)) {
            throw new \InvalidArgumentException('non-nullable call_orig_to_user cannot be null');
        }
        $this->container['call_orig_to_user'] = $call_orig_to_user;

        return $this;
    }

    /**
     * Gets call_orig_user
     *
     * @return int
     */
    public function getCallOrigUser()
    {
        return $this->container['call_orig_user'];
    }

    /**
     * Sets call_orig_user
     *
     * @param int $call_orig_user call_orig_user
     *
     * @return self
     */
    public function setCallOrigUser($call_orig_user)
    {
        if (is_null($call_orig_user)) {
            throw new \InvalidArgumentException('non-nullable call_orig_user cannot be null');
        }
        $this->container['call_orig_user'] = $call_orig_user;

        return $this;
    }

    /**
     * Gets call_parent_call_id
     *
     * @return string
     */
    public function getCallParentCallId()
    {
        return $this->container['call_parent_call_id'];
    }

    /**
     * Sets call_parent_call_id
     *
     * @param string $call_parent_call_id call_parent_call_id
     *
     * @return self
     */
    public function setCallParentCallId($call_parent_call_id)
    {
        if (is_null($call_parent_call_id)) {
            throw new \InvalidArgumentException('non-nullable call_parent_call_id cannot be null');
        }
        $this->container['call_parent_call_id'] = $call_parent_call_id;

        return $this;
    }

    /**
     * Gets call_parent_cdr_id
     *
     * @return string
     */
    public function getCallParentCdrId()
    {
        return $this->container['call_parent_cdr_id'];
    }

    /**
     * Sets call_parent_cdr_id
     *
     * @param string $call_parent_cdr_id call_parent_cdr_id
     *
     * @return self
     */
    public function setCallParentCdrId($call_parent_cdr_id)
    {
        if (is_null($call_parent_cdr_id)) {
            throw new \InvalidArgumentException('non-nullable call_parent_cdr_id cannot be null');
        }
        $this->container['call_parent_cdr_id'] = $call_parent_cdr_id;

        return $this;
    }

    /**
     * Gets call_record_creation_datetime
     *
     * @return mixed
     */
    public function getCallRecordCreationDatetime()
    {
        return $this->container['call_record_creation_datetime'];
    }

    /**
     * Sets call_record_creation_datetime
     *
     * @param mixed $call_record_creation_datetime call_record_creation_datetime
     *
     * @return self
     */
    public function setCallRecordCreationDatetime($call_record_creation_datetime)
    {
        if (is_null($call_record_creation_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'call_record_creation_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_record_creation_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_record_creation_datetime'] = $call_record_creation_datetime;

        return $this;
    }

    /**
     * Gets call_ringing_datetime
     *
     * @return mixed
     */
    public function getCallRingingDatetime()
    {
        return $this->container['call_ringing_datetime'];
    }

    /**
     * Sets call_ringing_datetime
     *
     * @param mixed $call_ringing_datetime call_ringing_datetime
     *
     * @return self
     */
    public function setCallRingingDatetime($call_ringing_datetime)
    {
        if (is_null($call_ringing_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'call_ringing_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_ringing_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_ringing_datetime'] = $call_ringing_datetime;

        return $this;
    }

    /**
     * Gets call_routing_class
     *
     * @return int
     */
    public function getCallRoutingClass()
    {
        return $this->container['call_routing_class'];
    }

    /**
     * Sets call_routing_class
     *
     * @param int $call_routing_class call_routing_class
     *
     * @return self
     */
    public function setCallRoutingClass($call_routing_class)
    {
        if (is_null($call_routing_class)) {
            throw new \InvalidArgumentException('non-nullable call_routing_class cannot be null');
        }
        $this->container['call_routing_class'] = $call_routing_class;

        return $this;
    }

    /**
     * Gets call_routing_match_uri
     *
     * @return string
     */
    public function getCallRoutingMatchUri()
    {
        return $this->container['call_routing_match_uri'];
    }

    /**
     * Sets call_routing_match_uri
     *
     * @param string $call_routing_match_uri call_routing_match_uri
     *
     * @return self
     */
    public function setCallRoutingMatchUri($call_routing_match_uri)
    {
        if (is_null($call_routing_match_uri)) {
            throw new \InvalidArgumentException('non-nullable call_routing_match_uri cannot be null');
        }
        $this->container['call_routing_match_uri'] = $call_routing_match_uri;

        return $this;
    }

    /**
     * Gets call_start_datetime
     *
     * @return string
     */
    public function getCallStartDatetime()
    {
        return $this->container['call_start_datetime'];
    }

    /**
     * Sets call_start_datetime
     *
     * @param string $call_start_datetime call_start_datetime
     *
     * @return self
     */
    public function setCallStartDatetime($call_start_datetime)
    {
        if (is_null($call_start_datetime)) {
            throw new \InvalidArgumentException('non-nullable call_start_datetime cannot be null');
        }
        $this->container['call_start_datetime'] = $call_start_datetime;

        return $this;
    }

    /**
     * Gets call_tag
     *
     * @return string
     */
    public function getCallTag()
    {
        return $this->container['call_tag'];
    }

    /**
     * Sets call_tag
     *
     * @param string $call_tag call_tag
     *
     * @return self
     */
    public function setCallTag($call_tag)
    {
        if (is_null($call_tag)) {
            throw new \InvalidArgumentException('non-nullable call_tag cannot be null');
        }
        $this->container['call_tag'] = $call_tag;

        return $this;
    }

    /**
     * Gets call_talking_duration_seconds
     *
     * @return int
     */
    public function getCallTalkingDurationSeconds()
    {
        return $this->container['call_talking_duration_seconds'];
    }

    /**
     * Sets call_talking_duration_seconds
     *
     * @param int $call_talking_duration_seconds call_talking_duration_seconds
     *
     * @return self
     */
    public function setCallTalkingDurationSeconds($call_talking_duration_seconds)
    {
        if (is_null($call_talking_duration_seconds)) {
            throw new \InvalidArgumentException('non-nullable call_talking_duration_seconds cannot be null');
        }
        $this->container['call_talking_duration_seconds'] = $call_talking_duration_seconds;

        return $this;
    }

    /**
     * Gets call_term_call_id
     *
     * @return string
     */
    public function getCallTermCallId()
    {
        return $this->container['call_term_call_id'];
    }

    /**
     * Sets call_term_call_id
     *
     * @param string $call_term_call_id call_term_call_id
     *
     * @return self
     */
    public function setCallTermCallId($call_term_call_id)
    {
        if (is_null($call_term_call_id)) {
            throw new \InvalidArgumentException('non-nullable call_term_call_id cannot be null');
        }
        $this->container['call_term_call_id'] = $call_term_call_id;

        return $this;
    }

    /**
     * Gets call_term_caller_id
     *
     * @return string
     */
    public function getCallTermCallerId()
    {
        return $this->container['call_term_caller_id'];
    }

    /**
     * Sets call_term_caller_id
     *
     * @param string $call_term_caller_id call_term_caller_id
     *
     * @return self
     */
    public function setCallTermCallerId($call_term_caller_id)
    {
        if (is_null($call_term_caller_id)) {
            throw new \InvalidArgumentException('non-nullable call_term_caller_id cannot be null');
        }
        $this->container['call_term_caller_id'] = $call_term_caller_id;

        return $this;
    }

    /**
     * Gets call_term_department
     *
     * @return mixed
     */
    public function getCallTermDepartment()
    {
        return $this->container['call_term_department'];
    }

    /**
     * Sets call_term_department
     *
     * @param mixed $call_term_department call_term_department
     *
     * @return self
     */
    public function setCallTermDepartment($call_term_department)
    {
        if (is_null($call_term_department)) {
            array_push($this->openAPINullablesSetToNull, 'call_term_department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_term_department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_term_department'] = $call_term_department;

        return $this;
    }

    /**
     * Gets call_term_domain
     *
     * @return string
     */
    public function getCallTermDomain()
    {
        return $this->container['call_term_domain'];
    }

    /**
     * Sets call_term_domain
     *
     * @param string $call_term_domain call_term_domain
     *
     * @return self
     */
    public function setCallTermDomain($call_term_domain)
    {
        if (is_null($call_term_domain)) {
            throw new \InvalidArgumentException('non-nullable call_term_domain cannot be null');
        }
        $this->container['call_term_domain'] = $call_term_domain;

        return $this;
    }

    /**
     * Gets call_term_ip_address
     *
     * @return string
     */
    public function getCallTermIpAddress()
    {
        return $this->container['call_term_ip_address'];
    }

    /**
     * Sets call_term_ip_address
     *
     * @param string $call_term_ip_address call_term_ip_address
     *
     * @return self
     */
    public function setCallTermIpAddress($call_term_ip_address)
    {
        if (is_null($call_term_ip_address)) {
            throw new \InvalidArgumentException('non-nullable call_term_ip_address cannot be null');
        }
        $this->container['call_term_ip_address'] = $call_term_ip_address;

        return $this;
    }

    /**
     * Gets call_term_match_uri
     *
     * @return string
     */
    public function getCallTermMatchUri()
    {
        return $this->container['call_term_match_uri'];
    }

    /**
     * Sets call_term_match_uri
     *
     * @param string $call_term_match_uri call_term_match_uri
     *
     * @return self
     */
    public function setCallTermMatchUri($call_term_match_uri)
    {
        if (is_null($call_term_match_uri)) {
            throw new \InvalidArgumentException('non-nullable call_term_match_uri cannot be null');
        }
        $this->container['call_term_match_uri'] = $call_term_match_uri;

        return $this;
    }

    /**
     * Gets call_term_pre_reouting_uri
     *
     * @return string
     */
    public function getCallTermPreReoutingUri()
    {
        return $this->container['call_term_pre_reouting_uri'];
    }

    /**
     * Sets call_term_pre_reouting_uri
     *
     * @param string $call_term_pre_reouting_uri call_term_pre_reouting_uri
     *
     * @return self
     */
    public function setCallTermPreReoutingUri($call_term_pre_reouting_uri)
    {
        if (is_null($call_term_pre_reouting_uri)) {
            throw new \InvalidArgumentException('non-nullable call_term_pre_reouting_uri cannot be null');
        }
        $this->container['call_term_pre_reouting_uri'] = $call_term_pre_reouting_uri;

        return $this;
    }

    /**
     * Gets call_term_reseller
     *
     * @return mixed
     */
    public function getCallTermReseller()
    {
        return $this->container['call_term_reseller'];
    }

    /**
     * Sets call_term_reseller
     *
     * @param mixed $call_term_reseller call_term_reseller
     *
     * @return self
     */
    public function setCallTermReseller($call_term_reseller)
    {
        if (is_null($call_term_reseller)) {
            array_push($this->openAPINullablesSetToNull, 'call_term_reseller');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_term_reseller', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_term_reseller'] = $call_term_reseller;

        return $this;
    }

    /**
     * Gets call_term_site
     *
     * @return mixed
     */
    public function getCallTermSite()
    {
        return $this->container['call_term_site'];
    }

    /**
     * Sets call_term_site
     *
     * @param mixed $call_term_site call_term_site
     *
     * @return self
     */
    public function setCallTermSite($call_term_site)
    {
        if (is_null($call_term_site)) {
            array_push($this->openAPINullablesSetToNull, 'call_term_site');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_term_site', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_term_site'] = $call_term_site;

        return $this;
    }

    /**
     * Gets call_term_to_uri
     *
     * @return string
     */
    public function getCallTermToUri()
    {
        return $this->container['call_term_to_uri'];
    }

    /**
     * Sets call_term_to_uri
     *
     * @param string $call_term_to_uri call_term_to_uri
     *
     * @return self
     */
    public function setCallTermToUri($call_term_to_uri)
    {
        if (is_null($call_term_to_uri)) {
            throw new \InvalidArgumentException('non-nullable call_term_to_uri cannot be null');
        }
        $this->container['call_term_to_uri'] = $call_term_to_uri;

        return $this;
    }

    /**
     * Gets call_term_user
     *
     * @return mixed
     */
    public function getCallTermUser()
    {
        return $this->container['call_term_user'];
    }

    /**
     * Sets call_term_user
     *
     * @param mixed $call_term_user call_term_user
     *
     * @return self
     */
    public function setCallTermUser($call_term_user)
    {
        if (is_null($call_term_user)) {
            array_push($this->openAPINullablesSetToNull, 'call_term_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_term_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_term_user'] = $call_term_user;

        return $this;
    }

    /**
     * Gets call_through_action
     *
     * @return string
     */
    public function getCallThroughAction()
    {
        return $this->container['call_through_action'];
    }

    /**
     * Sets call_through_action
     *
     * @param string $call_through_action call_through_action
     *
     * @return self
     */
    public function setCallThroughAction($call_through_action)
    {
        if (is_null($call_through_action)) {
            throw new \InvalidArgumentException('non-nullable call_through_action cannot be null');
        }
        $this->container['call_through_action'] = $call_through_action;

        return $this;
    }

    /**
     * Gets call_through_call_id
     *
     * @return mixed
     */
    public function getCallThroughCallId()
    {
        return $this->container['call_through_call_id'];
    }

    /**
     * Sets call_through_call_id
     *
     * @param mixed $call_through_call_id call_through_call_id
     *
     * @return self
     */
    public function setCallThroughCallId($call_through_call_id)
    {
        if (is_null($call_through_call_id)) {
            array_push($this->openAPINullablesSetToNull, 'call_through_call_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_through_call_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_through_call_id'] = $call_through_call_id;

        return $this;
    }

    /**
     * Gets call_through_caller_id
     *
     * @return mixed
     */
    public function getCallThroughCallerId()
    {
        return $this->container['call_through_caller_id'];
    }

    /**
     * Sets call_through_caller_id
     *
     * @param mixed $call_through_caller_id call_through_caller_id
     *
     * @return self
     */
    public function setCallThroughCallerId($call_through_caller_id)
    {
        if (is_null($call_through_caller_id)) {
            array_push($this->openAPINullablesSetToNull, 'call_through_caller_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_through_caller_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_through_caller_id'] = $call_through_caller_id;

        return $this;
    }

    /**
     * Gets call_through_department
     *
     * @return mixed
     */
    public function getCallThroughDepartment()
    {
        return $this->container['call_through_department'];
    }

    /**
     * Sets call_through_department
     *
     * @param mixed $call_through_department call_through_department
     *
     * @return self
     */
    public function setCallThroughDepartment($call_through_department)
    {
        if (is_null($call_through_department)) {
            array_push($this->openAPINullablesSetToNull, 'call_through_department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_through_department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_through_department'] = $call_through_department;

        return $this;
    }

    /**
     * Gets call_through_domain
     *
     * @return mixed
     */
    public function getCallThroughDomain()
    {
        return $this->container['call_through_domain'];
    }

    /**
     * Sets call_through_domain
     *
     * @param mixed $call_through_domain call_through_domain
     *
     * @return self
     */
    public function setCallThroughDomain($call_through_domain)
    {
        if (is_null($call_through_domain)) {
            array_push($this->openAPINullablesSetToNull, 'call_through_domain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_through_domain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_through_domain'] = $call_through_domain;

        return $this;
    }

    /**
     * Gets call_through_reseller
     *
     * @return mixed
     */
    public function getCallThroughReseller()
    {
        return $this->container['call_through_reseller'];
    }

    /**
     * Sets call_through_reseller
     *
     * @param mixed $call_through_reseller call_through_reseller
     *
     * @return self
     */
    public function setCallThroughReseller($call_through_reseller)
    {
        if (is_null($call_through_reseller)) {
            array_push($this->openAPINullablesSetToNull, 'call_through_reseller');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_through_reseller', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_through_reseller'] = $call_through_reseller;

        return $this;
    }

    /**
     * Gets call_through_site
     *
     * @return mixed
     */
    public function getCallThroughSite()
    {
        return $this->container['call_through_site'];
    }

    /**
     * Sets call_through_site
     *
     * @param mixed $call_through_site call_through_site
     *
     * @return self
     */
    public function setCallThroughSite($call_through_site)
    {
        if (is_null($call_through_site)) {
            array_push($this->openAPINullablesSetToNull, 'call_through_site');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_through_site', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_through_site'] = $call_through_site;

        return $this;
    }

    /**
     * Gets call_through_uri
     *
     * @return mixed
     */
    public function getCallThroughUri()
    {
        return $this->container['call_through_uri'];
    }

    /**
     * Sets call_through_uri
     *
     * @param mixed $call_through_uri call_through_uri
     *
     * @return self
     */
    public function setCallThroughUri($call_through_uri)
    {
        if (is_null($call_through_uri)) {
            array_push($this->openAPINullablesSetToNull, 'call_through_uri');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_through_uri', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_through_uri'] = $call_through_uri;

        return $this;
    }

    /**
     * Gets call_through_user
     *
     * @return mixed
     */
    public function getCallThroughUser()
    {
        return $this->container['call_through_user'];
    }

    /**
     * Sets call_through_user
     *
     * @param mixed $call_through_user call_through_user
     *
     * @return self
     */
    public function setCallThroughUser($call_through_user)
    {
        if (is_null($call_through_user)) {
            array_push($this->openAPINullablesSetToNull, 'call_through_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_through_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_through_user'] = $call_through_user;

        return $this;
    }

    /**
     * Gets call_total_duration_seconds
     *
     * @return int
     */
    public function getCallTotalDurationSeconds()
    {
        return $this->container['call_total_duration_seconds'];
    }

    /**
     * Sets call_total_duration_seconds
     *
     * @param int $call_total_duration_seconds call_total_duration_seconds
     *
     * @return self
     */
    public function setCallTotalDurationSeconds($call_total_duration_seconds)
    {
        if (is_null($call_total_duration_seconds)) {
            throw new \InvalidArgumentException('non-nullable call_total_duration_seconds cannot be null');
        }
        $this->container['call_total_duration_seconds'] = $call_total_duration_seconds;

        return $this;
    }

    /**
     * Gets call_video_codec
     *
     * @return mixed
     */
    public function getCallVideoCodec()
    {
        return $this->container['call_video_codec'];
    }

    /**
     * Sets call_video_codec
     *
     * @param mixed $call_video_codec call_video_codec
     *
     * @return self
     */
    public function setCallVideoCodec($call_video_codec)
    {
        if (is_null($call_video_codec)) {
            array_push($this->openAPINullablesSetToNull, 'call_video_codec');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_video_codec', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_video_codec'] = $call_video_codec;

        return $this;
    }

    /**
     * Gets call_video_relay_side_a_local_port
     *
     * @return mixed
     */
    public function getCallVideoRelaySideALocalPort()
    {
        return $this->container['call_video_relay_side_a_local_port'];
    }

    /**
     * Sets call_video_relay_side_a_local_port
     *
     * @param mixed $call_video_relay_side_a_local_port call_video_relay_side_a_local_port
     *
     * @return self
     */
    public function setCallVideoRelaySideALocalPort($call_video_relay_side_a_local_port)
    {
        if (is_null($call_video_relay_side_a_local_port)) {
            array_push($this->openAPINullablesSetToNull, 'call_video_relay_side_a_local_port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_video_relay_side_a_local_port', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_video_relay_side_a_local_port'] = $call_video_relay_side_a_local_port;

        return $this;
    }

    /**
     * Gets call_video_relay_side_a_packet_count
     *
     * @return mixed
     */
    public function getCallVideoRelaySideAPacketCount()
    {
        return $this->container['call_video_relay_side_a_packet_count'];
    }

    /**
     * Sets call_video_relay_side_a_packet_count
     *
     * @param mixed $call_video_relay_side_a_packet_count call_video_relay_side_a_packet_count
     *
     * @return self
     */
    public function setCallVideoRelaySideAPacketCount($call_video_relay_side_a_packet_count)
    {
        if (is_null($call_video_relay_side_a_packet_count)) {
            array_push($this->openAPINullablesSetToNull, 'call_video_relay_side_a_packet_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_video_relay_side_a_packet_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_video_relay_side_a_packet_count'] = $call_video_relay_side_a_packet_count;

        return $this;
    }

    /**
     * Gets call_video_relay_side_a_remote_ip
     *
     * @return mixed
     */
    public function getCallVideoRelaySideARemoteIp()
    {
        return $this->container['call_video_relay_side_a_remote_ip'];
    }

    /**
     * Sets call_video_relay_side_a_remote_ip
     *
     * @param mixed $call_video_relay_side_a_remote_ip call_video_relay_side_a_remote_ip
     *
     * @return self
     */
    public function setCallVideoRelaySideARemoteIp($call_video_relay_side_a_remote_ip)
    {
        if (is_null($call_video_relay_side_a_remote_ip)) {
            array_push($this->openAPINullablesSetToNull, 'call_video_relay_side_a_remote_ip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_video_relay_side_a_remote_ip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_video_relay_side_a_remote_ip'] = $call_video_relay_side_a_remote_ip;

        return $this;
    }

    /**
     * Gets call_video_relay_side_b_packet_count
     *
     * @return mixed
     */
    public function getCallVideoRelaySideBPacketCount()
    {
        return $this->container['call_video_relay_side_b_packet_count'];
    }

    /**
     * Sets call_video_relay_side_b_packet_count
     *
     * @param mixed $call_video_relay_side_b_packet_count call_video_relay_side_b_packet_count
     *
     * @return self
     */
    public function setCallVideoRelaySideBPacketCount($call_video_relay_side_b_packet_count)
    {
        if (is_null($call_video_relay_side_b_packet_count)) {
            array_push($this->openAPINullablesSetToNull, 'call_video_relay_side_b_packet_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_video_relay_side_b_packet_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_video_relay_side_b_packet_count'] = $call_video_relay_side_b_packet_count;

        return $this;
    }

    /**
     * Gets call_video_relay_side_b_remote_ip
     *
     * @return mixed
     */
    public function getCallVideoRelaySideBRemoteIp()
    {
        return $this->container['call_video_relay_side_b_remote_ip'];
    }

    /**
     * Sets call_video_relay_side_b_remote_ip
     *
     * @param mixed $call_video_relay_side_b_remote_ip call_video_relay_side_b_remote_ip
     *
     * @return self
     */
    public function setCallVideoRelaySideBRemoteIp($call_video_relay_side_b_remote_ip)
    {
        if (is_null($call_video_relay_side_b_remote_ip)) {
            array_push($this->openAPINullablesSetToNull, 'call_video_relay_side_b_remote_ip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_video_relay_side_b_remote_ip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_video_relay_side_b_remote_ip'] = $call_video_relay_side_b_remote_ip;

        return $this;
    }

    /**
     * Gets call_server_mac_address
     *
     * @return string
     */
    public function getCallServerMacAddress()
    {
        return $this->container['call_server_mac_address'];
    }

    /**
     * Sets call_server_mac_address
     *
     * @param string $call_server_mac_address call_server_mac_address
     *
     * @return self
     */
    public function setCallServerMacAddress($call_server_mac_address)
    {
        if (is_null($call_server_mac_address)) {
            throw new \InvalidArgumentException('non-nullable call_server_mac_address cannot be null');
        }
        $this->container['call_server_mac_address'] = $call_server_mac_address;

        return $this;
    }

    /**
     * Gets core_server
     *
     * @return string
     */
    public function getCoreServer()
    {
        return $this->container['core_server'];
    }

    /**
     * Sets core_server
     *
     * @param string $core_server core_server
     *
     * @return self
     */
    public function setCoreServer($core_server)
    {
        if (is_null($core_server)) {
            throw new \InvalidArgumentException('non-nullable core_server cannot be null');
        }
        $this->container['core_server'] = $core_server;

        return $this;
    }

    /**
     * Gets hide_from_results
     *
     * @return int
     */
    public function getHideFromResults()
    {
        return $this->container['hide_from_results'];
    }

    /**
     * Sets hide_from_results
     *
     * @param int $hide_from_results hide_from_results
     *
     * @return self
     */
    public function setHideFromResults($hide_from_results)
    {
        if (is_null($hide_from_results)) {
            throw new \InvalidArgumentException('non-nullable hide_from_results cannot be null');
        }
        $this->container['hide_from_results'] = $hide_from_results;

        return $this;
    }

    /**
     * Gets is_trace_expected
     *
     * @return bool
     */
    public function getIsTraceExpected()
    {
        return $this->container['is_trace_expected'];
    }

    /**
     * Sets is_trace_expected
     *
     * @param bool $is_trace_expected is_trace_expected
     *
     * @return self
     */
    public function setIsTraceExpected($is_trace_expected)
    {
        if (is_null($is_trace_expected)) {
            throw new \InvalidArgumentException('non-nullable is_trace_expected cannot be null');
        }
        $this->container['is_trace_expected'] = $is_trace_expected;

        return $this;
    }

    /**
     * Gets prefilled_trace_api
     *
     * @return string
     */
    public function getPrefilledTraceApi()
    {
        return $this->container['prefilled_trace_api'];
    }

    /**
     * Sets prefilled_trace_api
     *
     * @param string $prefilled_trace_api prefilled_trace_api
     *
     * @return self
     */
    public function setPrefilledTraceApi($prefilled_trace_api)
    {
        if (is_null($prefilled_trace_api)) {
            throw new \InvalidArgumentException('non-nullable prefilled_trace_api cannot be null');
        }
        $this->container['prefilled_trace_api'] = $prefilled_trace_api;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


