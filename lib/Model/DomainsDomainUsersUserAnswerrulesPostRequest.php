<?php
/**
 * DomainsDomainUsersUserAnswerrulesPostRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * DomainsDomainUsersUserAnswerrulesPostRequest Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomainsDomainUsersUserAnswerrulesPostRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_domains__domain__users__user__answerrules_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'synchronous' => '\SpectrumVoip\\\\NetSapiens\Model\Synchronous',
        'time_frame' => 'string',
        'enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault',
        'is_active' => 'bool',
        'order' => 'int',
        'simultaneous_ring' => '\SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesPostRequestSimultaneousRing',
        'do_not_disturb' => '\SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesPostRequestDoNotDisturb',
        'forward_always' => '\SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature',
        'forward_on_active' => '\SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature',
        'forward_on_busy' => '\SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature',
        'forward_no_answer' => '\SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature',
        'forward_when_unregistered' => '\SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature',
        'forward_on_dnd' => '\SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature',
        'forward_on_spam_call' => '\SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature',
        'call_screening' => '\SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesPostRequestCallScreening',
        'phone_numbers_to_allow' => '\SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeatureWithRemove',
        'new_position' => 'string',
        'phone_numbers_to_reject' => '\SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeatureWithRemove'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'synchronous' => null,
        'time_frame' => null,
        'enabled' => null,
        'is_active' => null,
        'order' => null,
        'simultaneous_ring' => null,
        'do_not_disturb' => null,
        'forward_always' => null,
        'forward_on_active' => null,
        'forward_on_busy' => null,
        'forward_no_answer' => null,
        'forward_when_unregistered' => null,
        'forward_on_dnd' => null,
        'forward_on_spam_call' => null,
        'call_screening' => null,
        'phone_numbers_to_allow' => null,
        'new_position' => null,
        'phone_numbers_to_reject' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'synchronous' => false,
        'time_frame' => false,
        'enabled' => false,
        'is_active' => false,
        'order' => false,
        'simultaneous_ring' => false,
        'do_not_disturb' => false,
        'forward_always' => false,
        'forward_on_active' => false,
        'forward_on_busy' => false,
        'forward_no_answer' => false,
        'forward_when_unregistered' => false,
        'forward_on_dnd' => false,
        'forward_on_spam_call' => false,
        'call_screening' => false,
        'phone_numbers_to_allow' => false,
        'new_position' => false,
        'phone_numbers_to_reject' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'synchronous' => 'synchronous',
        'time_frame' => 'time-frame',
        'enabled' => 'enabled',
        'is_active' => 'is-active',
        'order' => 'order',
        'simultaneous_ring' => 'simultaneous-ring',
        'do_not_disturb' => 'do-not-disturb',
        'forward_always' => 'forward-always',
        'forward_on_active' => 'forward-on-active',
        'forward_on_busy' => 'forward-on-busy',
        'forward_no_answer' => 'forward-no-answer',
        'forward_when_unregistered' => 'forward-when-unregistered',
        'forward_on_dnd' => 'forward-on-dnd',
        'forward_on_spam_call' => 'forward-on-spam-call',
        'call_screening' => 'call-screening',
        'phone_numbers_to_allow' => 'phone-numbers-to-allow',
        'new_position' => 'new-position',
        'phone_numbers_to_reject' => 'phone-numbers-to-reject'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'synchronous' => 'setSynchronous',
        'time_frame' => 'setTimeFrame',
        'enabled' => 'setEnabled',
        'is_active' => 'setIsActive',
        'order' => 'setOrder',
        'simultaneous_ring' => 'setSimultaneousRing',
        'do_not_disturb' => 'setDoNotDisturb',
        'forward_always' => 'setForwardAlways',
        'forward_on_active' => 'setForwardOnActive',
        'forward_on_busy' => 'setForwardOnBusy',
        'forward_no_answer' => 'setForwardNoAnswer',
        'forward_when_unregistered' => 'setForwardWhenUnregistered',
        'forward_on_dnd' => 'setForwardOnDnd',
        'forward_on_spam_call' => 'setForwardOnSpamCall',
        'call_screening' => 'setCallScreening',
        'phone_numbers_to_allow' => 'setPhoneNumbersToAllow',
        'new_position' => 'setNewPosition',
        'phone_numbers_to_reject' => 'setPhoneNumbersToReject'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'synchronous' => 'getSynchronous',
        'time_frame' => 'getTimeFrame',
        'enabled' => 'getEnabled',
        'is_active' => 'getIsActive',
        'order' => 'getOrder',
        'simultaneous_ring' => 'getSimultaneousRing',
        'do_not_disturb' => 'getDoNotDisturb',
        'forward_always' => 'getForwardAlways',
        'forward_on_active' => 'getForwardOnActive',
        'forward_on_busy' => 'getForwardOnBusy',
        'forward_no_answer' => 'getForwardNoAnswer',
        'forward_when_unregistered' => 'getForwardWhenUnregistered',
        'forward_on_dnd' => 'getForwardOnDnd',
        'forward_on_spam_call' => 'getForwardOnSpamCall',
        'call_screening' => 'getCallScreening',
        'phone_numbers_to_allow' => 'getPhoneNumbersToAllow',
        'new_position' => 'getNewPosition',
        'phone_numbers_to_reject' => 'getPhoneNumbersToReject'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const NEW_POSITION_TOP = 'top';
    public const NEW_POSITION_BOTTOM = 'bottom';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNewPositionAllowableValues()
    {
        return [
            self::NEW_POSITION_TOP,
            self::NEW_POSITION_BOTTOM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('synchronous', $data ?? [], null);
        $this->setIfExists('time_frame', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], 99);
        $this->setIfExists('simultaneous_ring', $data ?? [], null);
        $this->setIfExists('do_not_disturb', $data ?? [], null);
        $this->setIfExists('forward_always', $data ?? [], null);
        $this->setIfExists('forward_on_active', $data ?? [], null);
        $this->setIfExists('forward_on_busy', $data ?? [], null);
        $this->setIfExists('forward_no_answer', $data ?? [], null);
        $this->setIfExists('forward_when_unregistered', $data ?? [], null);
        $this->setIfExists('forward_on_dnd', $data ?? [], null);
        $this->setIfExists('forward_on_spam_call', $data ?? [], null);
        $this->setIfExists('call_screening', $data ?? [], null);
        $this->setIfExists('phone_numbers_to_allow', $data ?? [], null);
        $this->setIfExists('new_position', $data ?? [], null);
        $this->setIfExists('phone_numbers_to_reject', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['synchronous'] === null) {
            $invalidProperties[] = "'synchronous' can't be null";
        }
        if ($this->container['time_frame'] === null) {
            $invalidProperties[] = "'time_frame' can't be null";
        }
        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if (!is_null($this->container['order']) && ($this->container['order'] < 0)) {
            $invalidProperties[] = "invalid value for 'order', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getNewPositionAllowableValues();
        if (!is_null($this->container['new_position']) && !in_array($this->container['new_position'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'new_position', must be one of '%s'",
                $this->container['new_position'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets synchronous
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\Synchronous
     */
    public function getSynchronous()
    {
        return $this->container['synchronous'];
    }

    /**
     * Sets synchronous
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\Synchronous $synchronous synchronous
     *
     * @return self
     */
    public function setSynchronous($synchronous)
    {
        if (is_null($synchronous)) {
            throw new \InvalidArgumentException('non-nullable synchronous cannot be null');
        }
        $this->container['synchronous'] = $synchronous;

        return $this;
    }

    /**
     * Gets time_frame
     *
     * @return string
     */
    public function getTimeFrame()
    {
        return $this->container['time_frame'];
    }

    /**
     * Sets time_frame
     *
     * @param string $time_frame This is the timeframe that also is needed to make this set of answer rules unique. * is teh default and if no timeframes are setup this is is how to set anserrules.
     *
     * @return self
     */
    public function setTimeFrame($time_frame)
    {
        if (is_null($time_frame)) {
            throw new \InvalidArgumentException('non-nullable time_frame cannot be null');
        }
        $this->container['time_frame'] = $time_frame;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoStringYesDefault $enabled When enabled this rule is available to be user though it may not be active as the timeframe might not match the current time or there could be other hihger priority timeframes.
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active This is read only option that will be true if this timeframe is active for this user when taking into account current settings, date/time and all timeframes.
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order This is to allow for a priority based order of different timeframes. The default is to add it in value higher (lower priority) than the lowest priority timeframe. Timeframe * will get 99 if not already set.
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }

        if (($order < 0)) {
            throw new \InvalidArgumentException('invalid value for $order when calling DomainsDomainUsersUserAnswerrulesPostRequest., must be bigger than or equal to 0.');
        }

        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets simultaneous_ring
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesPostRequestSimultaneousRing|null
     */
    public function getSimultaneousRing()
    {
        return $this->container['simultaneous_ring'];
    }

    /**
     * Sets simultaneous_ring
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesPostRequestSimultaneousRing|null $simultaneous_ring simultaneous_ring
     *
     * @return self
     */
    public function setSimultaneousRing($simultaneous_ring)
    {
        if (is_null($simultaneous_ring)) {
            throw new \InvalidArgumentException('non-nullable simultaneous_ring cannot be null');
        }
        $this->container['simultaneous_ring'] = $simultaneous_ring;

        return $this;
    }

    /**
     * Gets do_not_disturb
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesPostRequestDoNotDisturb|null
     */
    public function getDoNotDisturb()
    {
        return $this->container['do_not_disturb'];
    }

    /**
     * Sets do_not_disturb
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesPostRequestDoNotDisturb|null $do_not_disturb do_not_disturb
     *
     * @return self
     */
    public function setDoNotDisturb($do_not_disturb)
    {
        if (is_null($do_not_disturb)) {
            throw new \InvalidArgumentException('non-nullable do_not_disturb cannot be null');
        }
        $this->container['do_not_disturb'] = $do_not_disturb;

        return $this;
    }

    /**
     * Gets forward_always
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null
     */
    public function getForwardAlways()
    {
        return $this->container['forward_always'];
    }

    /**
     * Sets forward_always
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null $forward_always forward_always
     *
     * @return self
     */
    public function setForwardAlways($forward_always)
    {
        if (is_null($forward_always)) {
            throw new \InvalidArgumentException('non-nullable forward_always cannot be null');
        }
        $this->container['forward_always'] = $forward_always;

        return $this;
    }

    /**
     * Gets forward_on_active
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null
     */
    public function getForwardOnActive()
    {
        return $this->container['forward_on_active'];
    }

    /**
     * Sets forward_on_active
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null $forward_on_active forward_on_active
     *
     * @return self
     */
    public function setForwardOnActive($forward_on_active)
    {
        if (is_null($forward_on_active)) {
            throw new \InvalidArgumentException('non-nullable forward_on_active cannot be null');
        }
        $this->container['forward_on_active'] = $forward_on_active;

        return $this;
    }

    /**
     * Gets forward_on_busy
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null
     */
    public function getForwardOnBusy()
    {
        return $this->container['forward_on_busy'];
    }

    /**
     * Sets forward_on_busy
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null $forward_on_busy forward_on_busy
     *
     * @return self
     */
    public function setForwardOnBusy($forward_on_busy)
    {
        if (is_null($forward_on_busy)) {
            throw new \InvalidArgumentException('non-nullable forward_on_busy cannot be null');
        }
        $this->container['forward_on_busy'] = $forward_on_busy;

        return $this;
    }

    /**
     * Gets forward_no_answer
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null
     */
    public function getForwardNoAnswer()
    {
        return $this->container['forward_no_answer'];
    }

    /**
     * Sets forward_no_answer
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null $forward_no_answer forward_no_answer
     *
     * @return self
     */
    public function setForwardNoAnswer($forward_no_answer)
    {
        if (is_null($forward_no_answer)) {
            throw new \InvalidArgumentException('non-nullable forward_no_answer cannot be null');
        }
        $this->container['forward_no_answer'] = $forward_no_answer;

        return $this;
    }

    /**
     * Gets forward_when_unregistered
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null
     */
    public function getForwardWhenUnregistered()
    {
        return $this->container['forward_when_unregistered'];
    }

    /**
     * Sets forward_when_unregistered
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null $forward_when_unregistered forward_when_unregistered
     *
     * @return self
     */
    public function setForwardWhenUnregistered($forward_when_unregistered)
    {
        if (is_null($forward_when_unregistered)) {
            throw new \InvalidArgumentException('non-nullable forward_when_unregistered cannot be null');
        }
        $this->container['forward_when_unregistered'] = $forward_when_unregistered;

        return $this;
    }

    /**
     * Gets forward_on_dnd
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null
     */
    public function getForwardOnDnd()
    {
        return $this->container['forward_on_dnd'];
    }

    /**
     * Sets forward_on_dnd
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null $forward_on_dnd forward_on_dnd
     *
     * @return self
     */
    public function setForwardOnDnd($forward_on_dnd)
    {
        if (is_null($forward_on_dnd)) {
            throw new \InvalidArgumentException('non-nullable forward_on_dnd cannot be null');
        }
        $this->container['forward_on_dnd'] = $forward_on_dnd;

        return $this;
    }

    /**
     * Gets forward_on_spam_call
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null
     */
    public function getForwardOnSpamCall()
    {
        return $this->container['forward_on_spam_call'];
    }

    /**
     * Sets forward_on_spam_call
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeature|null $forward_on_spam_call forward_on_spam_call
     *
     * @return self
     */
    public function setForwardOnSpamCall($forward_on_spam_call)
    {
        if (is_null($forward_on_spam_call)) {
            throw new \InvalidArgumentException('non-nullable forward_on_spam_call cannot be null');
        }
        $this->container['forward_on_spam_call'] = $forward_on_spam_call;

        return $this;
    }

    /**
     * Gets call_screening
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesPostRequestCallScreening|null
     */
    public function getCallScreening()
    {
        return $this->container['call_screening'];
    }

    /**
     * Sets call_screening
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesPostRequestCallScreening|null $call_screening call_screening
     *
     * @return self
     */
    public function setCallScreening($call_screening)
    {
        if (is_null($call_screening)) {
            throw new \InvalidArgumentException('non-nullable call_screening cannot be null');
        }
        $this->container['call_screening'] = $call_screening;

        return $this;
    }

    /**
     * Gets phone_numbers_to_allow
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeatureWithRemove|null
     */
    public function getPhoneNumbersToAllow()
    {
        return $this->container['phone_numbers_to_allow'];
    }

    /**
     * Sets phone_numbers_to_allow
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeatureWithRemove|null $phone_numbers_to_allow This is a list of numbers that would be allowed bypassing features like do-not-disturb and call-screening.
     *
     * @return self
     */
    public function setPhoneNumbersToAllow($phone_numbers_to_allow)
    {
        if (is_null($phone_numbers_to_allow)) {
            throw new \InvalidArgumentException('non-nullable phone_numbers_to_allow cannot be null');
        }
        $this->container['phone_numbers_to_allow'] = $phone_numbers_to_allow;

        return $this;
    }

    /**
     * Gets new_position
     *
     * @return string|null
     */
    public function getNewPosition()
    {
        return $this->container['new_position'];
    }

    /**
     * Sets new_position
     *
     * @param string|null $new_position This will move the answerrule to the top or bottom in the priority list. Top having the most priority, and bottom having the least priority
     *
     * @return self
     */
    public function setNewPosition($new_position)
    {
        if (is_null($new_position)) {
            throw new \InvalidArgumentException('non-nullable new_position cannot be null');
        }
        $allowedValues = $this->getNewPositionAllowableValues();
        if (!in_array($new_position, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'new_position', must be one of '%s'",
                    $new_position,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['new_position'] = $new_position;

        return $this;
    }

    /**
     * Gets phone_numbers_to_reject
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeatureWithRemove|null
     */
    public function getPhoneNumbersToReject()
    {
        return $this->container['phone_numbers_to_reject'];
    }

    /**
     * Sets phone_numbers_to_reject
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\AnswerruleFeatureWithRemove|null $phone_numbers_to_reject This is a list of numbers that would be allowed bypassing features like do-not-disturb and call-screening.
     *
     * @return self
     */
    public function setPhoneNumbersToReject($phone_numbers_to_reject)
    {
        if (is_null($phone_numbers_to_reject)) {
            throw new \InvalidArgumentException('non-nullable phone_numbers_to_reject cannot be null');
        }
        $this->container['phone_numbers_to_reject'] = $phone_numbers_to_reject;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


