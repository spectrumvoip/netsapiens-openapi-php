<?php
/**
 * CreateApikey200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * CreateApikey200Response Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateApikey200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateApikey_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'key_id' => 'string',
        'key' => 'string',
        'reseller' => 'string',
        'user' => 'string',
        'domain' => 'string',
        'user_scope' => 'string',
        'ip_address' => 'string',
        'readonly' => 'string',
        'can_create_keys' => 'string',
        'allowed_models' => '\SpectrumVoip\\\\NetSapiens\Model\ReadApikeys200ResponseInnerAllowedModels',
        'created_datetime' => '\DateTime',
        'lastused_datetime' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'key_id' => null,
        'key' => null,
        'reseller' => null,
        'user' => null,
        'domain' => null,
        'user_scope' => null,
        'ip_address' => null,
        'readonly' => null,
        'can_create_keys' => null,
        'allowed_models' => null,
        'created_datetime' => 'date-time',
        'lastused_datetime' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'key_id' => false,
        'key' => false,
        'reseller' => false,
        'user' => false,
        'domain' => false,
        'user_scope' => false,
        'ip_address' => false,
        'readonly' => false,
        'can_create_keys' => false,
        'allowed_models' => false,
        'created_datetime' => false,
        'lastused_datetime' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'key_id' => 'key-id',
        'key' => 'key',
        'reseller' => 'reseller',
        'user' => 'user',
        'domain' => 'domain',
        'user_scope' => 'user-scope',
        'ip_address' => 'ip-address',
        'readonly' => 'readonly',
        'can_create_keys' => 'can-create-keys',
        'allowed_models' => 'allowed-models',
        'created_datetime' => 'created-datetime',
        'lastused_datetime' => 'lastused-datetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'key_id' => 'setKeyId',
        'key' => 'setKey',
        'reseller' => 'setReseller',
        'user' => 'setUser',
        'domain' => 'setDomain',
        'user_scope' => 'setUserScope',
        'ip_address' => 'setIpAddress',
        'readonly' => 'setReadonly',
        'can_create_keys' => 'setCanCreateKeys',
        'allowed_models' => 'setAllowedModels',
        'created_datetime' => 'setCreatedDatetime',
        'lastused_datetime' => 'setLastusedDatetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'key_id' => 'getKeyId',
        'key' => 'getKey',
        'reseller' => 'getReseller',
        'user' => 'getUser',
        'domain' => 'getDomain',
        'user_scope' => 'getUserScope',
        'ip_address' => 'getIpAddress',
        'readonly' => 'getReadonly',
        'can_create_keys' => 'getCanCreateKeys',
        'allowed_models' => 'getAllowedModels',
        'created_datetime' => 'getCreatedDatetime',
        'lastused_datetime' => 'getLastusedDatetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const USER_SCOPE_BASIC_USER = 'Basic User';
    public const USER_SCOPE_SIMPLE_USER = 'Simple User';
    public const USER_SCOPE_ADVANCED_USER = 'Advanced User';
    public const USER_SCOPE_CALL_CENTER_AGENT = 'Call Center Agent';
    public const USER_SCOPE_CALL_CENTER_SUPERVISOR = 'Call Center Supervisor';
    public const USER_SCOPE_OFFICE_MANAGER = 'Office Manager';
    public const USER_SCOPE_RESELLER = 'Reseller';
    public const USER_SCOPE_SUPER_USER = 'Super User';
    public const USER_SCOPE_NDP = 'NDP';
    public const READONLY_YES = 'yes';
    public const READONLY_NO = 'no';
    public const CAN_CREATE_KEYS_YES = 'yes';
    public const CAN_CREATE_KEYS_NO = 'no';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserScopeAllowableValues()
    {
        return [
            self::USER_SCOPE_BASIC_USER,
            self::USER_SCOPE_SIMPLE_USER,
            self::USER_SCOPE_ADVANCED_USER,
            self::USER_SCOPE_CALL_CENTER_AGENT,
            self::USER_SCOPE_CALL_CENTER_SUPERVISOR,
            self::USER_SCOPE_OFFICE_MANAGER,
            self::USER_SCOPE_RESELLER,
            self::USER_SCOPE_SUPER_USER,
            self::USER_SCOPE_NDP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReadonlyAllowableValues()
    {
        return [
            self::READONLY_YES,
            self::READONLY_NO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCanCreateKeysAllowableValues()
    {
        return [
            self::CAN_CREATE_KEYS_YES,
            self::CAN_CREATE_KEYS_NO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('key_id', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('reseller', $data ?? [], '*');
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('user_scope', $data ?? [], null);
        $this->setIfExists('ip_address', $data ?? [], null);
        $this->setIfExists('readonly', $data ?? [], 'no');
        $this->setIfExists('can_create_keys', $data ?? [], 'no');
        $this->setIfExists('allowed_models', $data ?? [], null);
        $this->setIfExists('created_datetime', $data ?? [], null);
        $this->setIfExists('lastused_datetime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) < 12)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 12.";
        }

        if ($this->container['key_id'] === null) {
            $invalidProperties[] = "'key_id' can't be null";
        }
        if ((mb_strlen($this->container['key_id']) > 12)) {
            $invalidProperties[] = "invalid value for 'key_id', the character length must be smaller than or equal to 12.";
        }

        if ((mb_strlen($this->container['key_id']) < 12)) {
            $invalidProperties[] = "invalid value for 'key_id', the character length must be bigger than or equal to 12.";
        }

        if ($this->container['reseller'] === null) {
            $invalidProperties[] = "'reseller' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ((mb_strlen($this->container['domain']) > 64)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 64.";
        }

        if (!preg_match("/^[A-Za-z0-9._-]+|\\*/", $this->container['domain'])) {
            $invalidProperties[] = "invalid value for 'domain', must be conform to the pattern /^[A-Za-z0-9._-]+|\\*/.";
        }

        $allowedValues = $this->getUserScopeAllowableValues();
        if (!is_null($this->container['user_scope']) && !in_array($this->container['user_scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'user_scope', must be one of '%s'",
                $this->container['user_scope'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReadonlyAllowableValues();
        if (!is_null($this->container['readonly']) && !in_array($this->container['readonly'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'readonly', must be one of '%s'",
                $this->container['readonly'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCanCreateKeysAllowableValues();
        if (!is_null($this->container['can_create_keys']) && !in_array($this->container['can_create_keys'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'can_create_keys', must be one of '%s'",
                $this->container['can_create_keys'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description This is the main description/name for the API key that should describe its purpose for tracking and understanding its intended use.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        if ((mb_strlen($description) < 12)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CreateApikey200Response., must be bigger than or equal to 12.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets key_id
     *
     * @return string
     */
    public function getKeyId()
    {
        return $this->container['key_id'];
    }

    /**
     * Sets key_id
     *
     * @param string $key_id This is the Key ID that will identify the key and allow for managment, audit tracking and monitoring.
     *
     * @return self
     */
    public function setKeyId($key_id)
    {
        if (is_null($key_id)) {
            throw new \InvalidArgumentException('non-nullable key_id cannot be null');
        }
        if ((mb_strlen($key_id) > 12)) {
            throw new \InvalidArgumentException('invalid length for $key_id when calling CreateApikey200Response., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($key_id) < 12)) {
            throw new \InvalidArgumentException('invalid length for $key_id when calling CreateApikey200Response., must be bigger than or equal to 12.');
        }

        $this->container['key_id'] = $key_id;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key This is the key that will need to be saved securly for use in accessing the API. It will only be shown once.
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets reseller
     *
     * @return string
     */
    public function getReseller()
    {
        return $this->container['reseller'];
    }

    /**
     * Sets reseller
     *
     * @param string $reseller This is the reseller that will limit the API key to access the resellers data set.
     *
     * @return self
     */
    public function setReseller($reseller)
    {
        if (is_null($reseller)) {
            throw new \InvalidArgumentException('non-nullable reseller cannot be null');
        }
        $this->container['reseller'] = $reseller;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user This is the main user extension for the user account.
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain This is the main organization name. This is used to link resource to its group/tenant/organization/enterprise. ~ and * can be used alone in special cases to mean My Domain (~) and All Domains (\\*).
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        if ((mb_strlen($domain) > 64)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling CreateApikey200Response., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[A-Za-z0-9._-]+|\\*/", ObjectSerializer::toString($domain)))) {
            throw new \InvalidArgumentException("invalid value for \$domain when calling CreateApikey200Response., must conform to the pattern /^[A-Za-z0-9._-]+|\\*/.");
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets user_scope
     *
     * @return string|null
     */
    public function getUserScope()
    {
        return $this->container['user_scope'];
    }

    /**
     * Sets user_scope
     *
     * @param string|null $user_scope This is the scope that will be be used to enforce permissions for this API key and access.
     *
     * @return self
     */
    public function setUserScope($user_scope)
    {
        if (is_null($user_scope)) {
            throw new \InvalidArgumentException('non-nullable user_scope cannot be null');
        }
        $allowedValues = $this->getUserScopeAllowableValues();
        if (!in_array($user_scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'user_scope', must be one of '%s'",
                    $user_scope,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_scope'] = $user_scope;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address Optional IP restrictions for API to require access from matching IP or subnets. Multipe ips/subnets can be provided comma seperated
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        if (is_null($ip_address)) {
            throw new \InvalidArgumentException('non-nullable ip_address cannot be null');
        }
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return string|null
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param string|null $readonly If enabled it will limit any get Scope to a read only verion providing only GET acces to the read actions. POST, PUT and DELETE will be rejected.
     *
     * @return self
     */
    public function setReadonly($readonly)
    {
        if (is_null($readonly)) {
            throw new \InvalidArgumentException('non-nullable readonly cannot be null');
        }
        $allowedValues = $this->getReadonlyAllowableValues();
        if (!in_array($readonly, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'readonly', must be one of '%s'",
                    $readonly,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets can_create_keys
     *
     * @return string|null
     */
    public function getCanCreateKeys()
    {
        return $this->container['can_create_keys'];
    }

    /**
     * Sets can_create_keys
     *
     * @param string|null $can_create_keys If enabled it will allow this key to make keys for lesser scopes then itself. It will not allow creations of scopes same or higher access level.
     *
     * @return self
     */
    public function setCanCreateKeys($can_create_keys)
    {
        if (is_null($can_create_keys)) {
            throw new \InvalidArgumentException('non-nullable can_create_keys cannot be null');
        }
        $allowedValues = $this->getCanCreateKeysAllowableValues();
        if (!in_array($can_create_keys, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'can_create_keys', must be one of '%s'",
                    $can_create_keys,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['can_create_keys'] = $can_create_keys;

        return $this;
    }

    /**
     * Gets allowed_models
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\ReadApikeys200ResponseInnerAllowedModels|null
     */
    public function getAllowedModels()
    {
        return $this->container['allowed_models'];
    }

    /**
     * Sets allowed_models
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\ReadApikeys200ResponseInnerAllowedModels|null $allowed_models allowed_models
     *
     * @return self
     */
    public function setAllowedModels($allowed_models)
    {
        if (is_null($allowed_models)) {
            throw new \InvalidArgumentException('non-nullable allowed_models cannot be null');
        }
        $this->container['allowed_models'] = $allowed_models;

        return $this;
    }

    /**
     * Gets created_datetime
     *
     * @return \DateTime|null
     */
    public function getCreatedDatetime()
    {
        return $this->container['created_datetime'];
    }

    /**
     * Sets created_datetime
     *
     * @param \DateTime|null $created_datetime The datetime that the key was created.
     *
     * @return self
     */
    public function setCreatedDatetime($created_datetime)
    {
        if (is_null($created_datetime)) {
            throw new \InvalidArgumentException('non-nullable created_datetime cannot be null');
        }
        $this->container['created_datetime'] = $created_datetime;

        return $this;
    }

    /**
     * Gets lastused_datetime
     *
     * @return \DateTime|null
     */
    public function getLastusedDatetime()
    {
        return $this->container['lastused_datetime'];
    }

    /**
     * Sets lastused_datetime
     *
     * @param \DateTime|null $lastused_datetime The datetime of the last time the apikey was used for API access. The timestamp is acurrate up to the hour to avoid overhead in tracking high volume requests
     *
     * @return self
     */
    public function setLastusedDatetime($lastused_datetime)
    {
        if (is_null($lastused_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'lastused_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastused_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastused_datetime'] = $lastused_datetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


