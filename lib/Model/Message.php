<?php
/**
 * Message
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * Message Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Message implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Message';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => '\SpectrumVoip\\\\NetSapiens\Model\MessageId',
        'timestamp' => '\SpectrumVoip\\\\NetSapiens\Model\Timestamp',
        'type' => 'string',
        'domain' => 'string',
        'direction' => 'string',
        'from_number' => '\SpectrumVoip\\\\NetSapiens\Model\MessageFromNumber',
        'from_user_id' => 'string',
        'from_video_attendee_id' => 'string',
        'from_user_agent' => 'string',
        'dialed' => 'string',
        'text' => '\SpectrumVoip\\\\NetSapiens\Model\MessageText',
        'terminating_user_id' => 'string',
        'terminating_number' => 'string',
        'status' => 'string',
        'video_instance_id' => 'string',
        'media_type' => 'string',
        'media_size' => 'int',
        'deleted_datetime' => '\SpectrumVoip\\\\NetSapiens\Model\Timestamp',
        'messagesession_reciever_hostname' => 'string',
        'messagesession_id' => 'string',
        'messagesession_participants' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'timestamp' => null,
        'type' => null,
        'domain' => null,
        'direction' => null,
        'from_number' => null,
        'from_user_id' => null,
        'from_video_attendee_id' => null,
        'from_user_agent' => null,
        'dialed' => null,
        'text' => null,
        'terminating_user_id' => null,
        'terminating_number' => null,
        'status' => null,
        'video_instance_id' => null,
        'media_type' => null,
        'media_size' => null,
        'deleted_datetime' => null,
        'messagesession_reciever_hostname' => null,
        'messagesession_id' => null,
        'messagesession_participants' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'timestamp' => false,
        'type' => false,
        'domain' => false,
        'direction' => false,
        'from_number' => true,
        'from_user_id' => true,
        'from_video_attendee_id' => true,
        'from_user_agent' => true,
        'dialed' => true,
        'text' => true,
        'terminating_user_id' => true,
        'terminating_number' => true,
        'status' => false,
        'video_instance_id' => true,
        'media_type' => true,
        'media_size' => true,
        'deleted_datetime' => true,
        'messagesession_reciever_hostname' => false,
        'messagesession_id' => false,
        'messagesession_participants' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'timestamp' => 'timestamp',
        'type' => 'type',
        'domain' => 'domain',
        'direction' => 'direction',
        'from_number' => 'from-number',
        'from_user_id' => 'from-user-id',
        'from_video_attendee_id' => 'from-video-attendee-id',
        'from_user_agent' => 'from-user-agent',
        'dialed' => 'dialed',
        'text' => 'text',
        'terminating_user_id' => 'terminating-user-id',
        'terminating_number' => 'terminating-number',
        'status' => 'status',
        'video_instance_id' => 'video-instance-id',
        'media_type' => 'media-type',
        'media_size' => 'media-size',
        'deleted_datetime' => 'deleted-datetime',
        'messagesession_reciever_hostname' => 'messagesession-reciever-hostname',
        'messagesession_id' => 'messagesession-id',
        'messagesession_participants' => 'messagesession-participants'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'timestamp' => 'setTimestamp',
        'type' => 'setType',
        'domain' => 'setDomain',
        'direction' => 'setDirection',
        'from_number' => 'setFromNumber',
        'from_user_id' => 'setFromUserId',
        'from_video_attendee_id' => 'setFromVideoAttendeeId',
        'from_user_agent' => 'setFromUserAgent',
        'dialed' => 'setDialed',
        'text' => 'setText',
        'terminating_user_id' => 'setTerminatingUserId',
        'terminating_number' => 'setTerminatingNumber',
        'status' => 'setStatus',
        'video_instance_id' => 'setVideoInstanceId',
        'media_type' => 'setMediaType',
        'media_size' => 'setMediaSize',
        'deleted_datetime' => 'setDeletedDatetime',
        'messagesession_reciever_hostname' => 'setMessagesessionRecieverHostname',
        'messagesession_id' => 'setMessagesessionId',
        'messagesession_participants' => 'setMessagesessionParticipants'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'timestamp' => 'getTimestamp',
        'type' => 'getType',
        'domain' => 'getDomain',
        'direction' => 'getDirection',
        'from_number' => 'getFromNumber',
        'from_user_id' => 'getFromUserId',
        'from_video_attendee_id' => 'getFromVideoAttendeeId',
        'from_user_agent' => 'getFromUserAgent',
        'dialed' => 'getDialed',
        'text' => 'getText',
        'terminating_user_id' => 'getTerminatingUserId',
        'terminating_number' => 'getTerminatingNumber',
        'status' => 'getStatus',
        'video_instance_id' => 'getVideoInstanceId',
        'media_type' => 'getMediaType',
        'media_size' => 'getMediaSize',
        'deleted_datetime' => 'getDeletedDatetime',
        'messagesession_reciever_hostname' => 'getMessagesessionRecieverHostname',
        'messagesession_id' => 'getMessagesessionId',
        'messagesession_participants' => 'getMessagesessionParticipants'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
        $this->setIfExists('from_number', $data ?? [], null);
        $this->setIfExists('from_user_id', $data ?? [], null);
        $this->setIfExists('from_video_attendee_id', $data ?? [], null);
        $this->setIfExists('from_user_agent', $data ?? [], null);
        $this->setIfExists('dialed', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('terminating_user_id', $data ?? [], null);
        $this->setIfExists('terminating_number', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('video_instance_id', $data ?? [], null);
        $this->setIfExists('media_type', $data ?? [], null);
        $this->setIfExists('media_size', $data ?? [], null);
        $this->setIfExists('deleted_datetime', $data ?? [], null);
        $this->setIfExists('messagesession_reciever_hostname', $data ?? [], null);
        $this->setIfExists('messagesession_id', $data ?? [], null);
        $this->setIfExists('messagesession_participants', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ((mb_strlen($this->container['domain']) > 64)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 64.";
        }

        if (!preg_match("/^[A-Za-z0-9._-]+|\\*/", $this->container['domain'])) {
            $invalidProperties[] = "invalid value for 'domain', must be conform to the pattern /^[A-Za-z0-9._-]+|\\*/.";
        }

        if ($this->container['direction'] === null) {
            $invalidProperties[] = "'direction' can't be null";
        }
        if ($this->container['from_user_id'] === null) {
            $invalidProperties[] = "'from_user_id' can't be null";
        }
        if ($this->container['from_video_attendee_id'] === null) {
            $invalidProperties[] = "'from_video_attendee_id' can't be null";
        }
        if ($this->container['from_user_agent'] === null) {
            $invalidProperties[] = "'from_user_agent' can't be null";
        }
        if ($this->container['dialed'] === null) {
            $invalidProperties[] = "'dialed' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ($this->container['terminating_user_id'] === null) {
            $invalidProperties[] = "'terminating_user_id' can't be null";
        }
        if ($this->container['terminating_number'] === null) {
            $invalidProperties[] = "'terminating_number' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['media_type'] === null) {
            $invalidProperties[] = "'media_type' can't be null";
        }
        if ($this->container['media_size'] === null) {
            $invalidProperties[] = "'media_size' can't be null";
        }
        if ($this->container['messagesession_reciever_hostname'] === null) {
            $invalidProperties[] = "'messagesession_reciever_hostname' can't be null";
        }
        if ($this->container['messagesession_id'] === null) {
            $invalidProperties[] = "'messagesession_id' can't be null";
        }
        if ($this->container['messagesession_participants'] === null) {
            $invalidProperties[] = "'messagesession_participants' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\MessageId
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\MessageId $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\Timestamp
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\Timestamp $timestamp This is when the message was recieved or sent
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain This is the main organization name. This is used to link resource to its group/tenant/organization/enterprise. ~ and * can be used alone in special cases to mean My Domain (~) and All Domains (\\*).
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        if ((mb_strlen($domain) > 64)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling Message., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[A-Za-z0-9._-]+|\\*/", ObjectSerializer::toString($domain)))) {
            throw new \InvalidArgumentException("invalid value for \$domain when calling Message., must conform to the pattern /^[A-Za-z0-9._-]+|\\*/.");
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction This is the direction of the message. Either term for outbound or orig for inbound
     *
     * @return self
     */
    public function setDirection($direction)
    {
        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets from_number
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\MessageFromNumber|null
     */
    public function getFromNumber()
    {
        return $this->container['from_number'];
    }

    /**
     * Sets from_number
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\MessageFromNumber|null $from_number from_number
     *
     * @return self
     */
    public function setFromNumber($from_number)
    {
        if (is_null($from_number)) {
            array_push($this->openAPINullablesSetToNull, 'from_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from_number'] = $from_number;

        return $this;
    }

    /**
     * Gets from_user_id
     *
     * @return string
     */
    public function getFromUserId()
    {
        return $this->container['from_user_id'];
    }

    /**
     * Sets from_user_id
     *
     * @param string $from_user_id This is the User ID the message came from. Not set for offnet numbers
     *
     * @return self
     */
    public function setFromUserId($from_user_id)
    {
        if (is_null($from_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'from_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from_user_id'] = $from_user_id;

        return $this;
    }

    /**
     * Gets from_video_attendee_id
     *
     * @return string
     */
    public function getFromVideoAttendeeId()
    {
        return $this->container['from_video_attendee_id'];
    }

    /**
     * Sets from_video_attendee_id
     *
     * @param string $from_video_attendee_id This is the video attendee id the message came from if sent within a video call
     *
     * @return self
     */
    public function setFromVideoAttendeeId($from_video_attendee_id)
    {
        if (is_null($from_video_attendee_id)) {
            array_push($this->openAPINullablesSetToNull, 'from_video_attendee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from_video_attendee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from_video_attendee_id'] = $from_video_attendee_id;

        return $this;
    }

    /**
     * Gets from_user_agent
     *
     * @return string
     */
    public function getFromUserAgent()
    {
        return $this->container['from_user_agent'];
    }

    /**
     * Sets from_user_agent
     *
     * @param string $from_user_agent This is the HTTP USER AGENT the message came from
     *
     * @return self
     */
    public function setFromUserAgent($from_user_agent)
    {
        if (is_null($from_user_agent)) {
            array_push($this->openAPINullablesSetToNull, 'from_user_agent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from_user_agent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from_user_agent'] = $from_user_agent;

        return $this;
    }

    /**
     * Gets dialed
     *
     * @return string
     */
    public function getDialed()
    {
        return $this->container['dialed'];
    }

    /**
     * Sets dialed
     *
     * @param string $dialed This is the number that this message is sent to. This can be comma seperated list of numbers if more than one in a group MMS session. Or null for chat sessions
     *
     * @return self
     */
    public function setDialed($dialed)
    {
        if (is_null($dialed)) {
            array_push($this->openAPINullablesSetToNull, 'dialed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dialed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dialed'] = $dialed;

        return $this;
    }

    /**
     * Gets text
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\MessageText
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\MessageText $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            array_push($this->openAPINullablesSetToNull, 'text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets terminating_user_id
     *
     * @return string
     */
    public function getTerminatingUserId()
    {
        return $this->container['terminating_user_id'];
    }

    /**
     * Sets terminating_user_id
     *
     * @param string $terminating_user_id This is the receiving User ID of the message
     *
     * @return self
     */
    public function setTerminatingUserId($terminating_user_id)
    {
        if (is_null($terminating_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'terminating_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('terminating_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['terminating_user_id'] = $terminating_user_id;

        return $this;
    }

    /**
     * Gets terminating_number
     *
     * @return string
     */
    public function getTerminatingNumber()
    {
        return $this->container['terminating_number'];
    }

    /**
     * Sets terminating_number
     *
     * @param string $terminating_number This is the number that this message is sent to. This can be comma seperated list of numbers if more than one in a group MMS session. Or null for chat sessions
     *
     * @return self
     */
    public function setTerminatingNumber($terminating_number)
    {
        if (is_null($terminating_number)) {
            array_push($this->openAPINullablesSetToNull, 'terminating_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('terminating_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['terminating_number'] = $terminating_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status This is the status of the message
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets video_instance_id
     *
     * @return string|null
     */
    public function getVideoInstanceId()
    {
        return $this->container['video_instance_id'];
    }

    /**
     * Sets video_instance_id
     *
     * @param string|null $video_instance_id This is the video instance ID of the message if the message was sent from a video session.
     *
     * @return self
     */
    public function setVideoInstanceId($video_instance_id)
    {
        if (is_null($video_instance_id)) {
            array_push($this->openAPINullablesSetToNull, 'video_instance_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_instance_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_instance_id'] = $video_instance_id;

        return $this;
    }

    /**
     * Gets media_type
     *
     * @return string
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param string $media_type This is the media type of the message if applicable
     *
     * @return self
     */
    public function setMediaType($media_type)
    {
        if (is_null($media_type)) {
            array_push($this->openAPINullablesSetToNull, 'media_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets media_size
     *
     * @return int
     */
    public function getMediaSize()
    {
        return $this->container['media_size'];
    }

    /**
     * Sets media_size
     *
     * @param int $media_size This is the media size of the message if applicable
     *
     * @return self
     */
    public function setMediaSize($media_size)
    {
        if (is_null($media_size)) {
            array_push($this->openAPINullablesSetToNull, 'media_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['media_size'] = $media_size;

        return $this;
    }

    /**
     * Gets deleted_datetime
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\Timestamp|null
     */
    public function getDeletedDatetime()
    {
        return $this->container['deleted_datetime'];
    }

    /**
     * Sets deleted_datetime
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\Timestamp|null $deleted_datetime This is when the message was recieved or sent
     *
     * @return self
     */
    public function setDeletedDatetime($deleted_datetime)
    {
        if (is_null($deleted_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'deleted_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted_datetime'] = $deleted_datetime;

        return $this;
    }

    /**
     * Gets messagesession_reciever_hostname
     *
     * @return string
     */
    public function getMessagesessionRecieverHostname()
    {
        return $this->container['messagesession_reciever_hostname'];
    }

    /**
     * Sets messagesession_reciever_hostname
     *
     * @param string $messagesession_reciever_hostname This is the receiver hostname for the message
     *
     * @return self
     */
    public function setMessagesessionRecieverHostname($messagesession_reciever_hostname)
    {
        if (is_null($messagesession_reciever_hostname)) {
            throw new \InvalidArgumentException('non-nullable messagesession_reciever_hostname cannot be null');
        }
        $this->container['messagesession_reciever_hostname'] = $messagesession_reciever_hostname;

        return $this;
    }

    /**
     * Gets messagesession_id
     *
     * @return string
     */
    public function getMessagesessionId()
    {
        return $this->container['messagesession_id'];
    }

    /**
     * Sets messagesession_id
     *
     * @param string $messagesession_id This is the messagesession ID for this message
     *
     * @return self
     */
    public function setMessagesessionId($messagesession_id)
    {
        if (is_null($messagesession_id)) {
            throw new \InvalidArgumentException('non-nullable messagesession_id cannot be null');
        }
        $this->container['messagesession_id'] = $messagesession_id;

        return $this;
    }

    /**
     * Gets messagesession_participants
     *
     * @return string
     */
    public function getMessagesessionParticipants()
    {
        return $this->container['messagesession_participants'];
    }

    /**
     * Sets messagesession_participants
     *
     * @param string $messagesession_participants This is the comma seperated participants of the messagesession associated with this message
     *
     * @return self
     */
    public function setMessagesessionParticipants($messagesession_participants)
    {
        if (is_null($messagesession_participants)) {
            array_push($this->openAPINullablesSetToNull, 'messagesession_participants');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messagesession_participants', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messagesession_participants'] = $messagesession_participants;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


