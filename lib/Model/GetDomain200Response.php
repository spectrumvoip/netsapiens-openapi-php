<?php
/**
 * GetDomain200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Model;

use \ArrayAccess;
use \SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * GetDomain200Response Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetDomain200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetDomain_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'domain' => 'string',
        'reseller' => 'string',
        'description' => 'string',
        'music_on_hold_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoString',
        'music_on_ring_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoString',
        'music_on_hold_randomized_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoString',
        'domain_type' => 'string',
        'dial_plan' => 'string',
        'dial_policy' => 'string',
        'email_send_from_address' => 'string',
        'single_sign_on_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoString',
        'area_code' => 'float',
        'caller_id_name' => 'string',
        'caller_id_number' => 'float',
        'caller_id_number_emergency' => 'float',
        'limits_max_subcriber_resources_total' => 'int',
        'limits_max_active_calls_total' => 'int',
        'limits_max_active_calls_offnet' => 'int',
        'limits_max_call_queues' => 'int',
        'limits_max_auto_attendants' => 'int',
        'limits_max_conferences' => 'int',
        'limits_max_departments' => 'int',
        'limits_max_users' => 'int',
        'limits_max_sites' => 'int',
        'limits_max_fax_accounts' => 'int',
        'time_zone' => '\SpectrumVoip\\\\NetSapiens\Model\TimeZone',
        'email_send_smtp_hostname' => 'string',
        'email_send_smtp_port' => 'string',
        'email_send_smtp_username' => 'string',
        'email_send_smtp_password' => 'string',
        'active_calls_total_current' => 'int',
        'active_calls_against_license_count' => 'int',
        'active_calls_offnet_current' => 'int',
        'count_subcriber_resources_total' => 'int',
        'emergency_address_id' => 'string',
        'voicemail_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoString',
        'recording_configuration' => '\SpectrumVoip\\\\NetSapiens\Model\RecordingConfiguration',
        'voicemail_transcription_enabled' => 'string',
        'language_token' => 'string',
        'is_domain_locked' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoString',
        'is_stir_enabled' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoString',
        'is_ivr_forward_change_blocked' => '\SpectrumVoip\\\\NetSapiens\Model\YesNoString'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'domain' => null,
        'reseller' => null,
        'description' => null,
        'music_on_hold_enabled' => null,
        'music_on_ring_enabled' => null,
        'music_on_hold_randomized_enabled' => null,
        'domain_type' => null,
        'dial_plan' => null,
        'dial_policy' => null,
        'email_send_from_address' => null,
        'single_sign_on_enabled' => null,
        'area_code' => null,
        'caller_id_name' => null,
        'caller_id_number' => null,
        'caller_id_number_emergency' => null,
        'limits_max_subcriber_resources_total' => null,
        'limits_max_active_calls_total' => null,
        'limits_max_active_calls_offnet' => null,
        'limits_max_call_queues' => null,
        'limits_max_auto_attendants' => null,
        'limits_max_conferences' => null,
        'limits_max_departments' => null,
        'limits_max_users' => null,
        'limits_max_sites' => null,
        'limits_max_fax_accounts' => null,
        'time_zone' => null,
        'email_send_smtp_hostname' => 'hostname',
        'email_send_smtp_port' => null,
        'email_send_smtp_username' => null,
        'email_send_smtp_password' => 'pass',
        'active_calls_total_current' => null,
        'active_calls_against_license_count' => null,
        'active_calls_offnet_current' => null,
        'count_subcriber_resources_total' => null,
        'emergency_address_id' => null,
        'voicemail_enabled' => null,
        'recording_configuration' => null,
        'voicemail_transcription_enabled' => null,
        'language_token' => null,
        'is_domain_locked' => null,
        'is_stir_enabled' => null,
        'is_ivr_forward_change_blocked' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'domain' => false,
        'reseller' => false,
        'description' => false,
        'music_on_hold_enabled' => false,
        'music_on_ring_enabled' => false,
        'music_on_hold_randomized_enabled' => false,
        'domain_type' => false,
        'dial_plan' => false,
        'dial_policy' => false,
        'email_send_from_address' => false,
        'single_sign_on_enabled' => false,
        'area_code' => false,
        'caller_id_name' => false,
        'caller_id_number' => false,
        'caller_id_number_emergency' => false,
        'limits_max_subcriber_resources_total' => false,
        'limits_max_active_calls_total' => false,
        'limits_max_active_calls_offnet' => false,
        'limits_max_call_queues' => false,
        'limits_max_auto_attendants' => false,
        'limits_max_conferences' => false,
        'limits_max_departments' => false,
        'limits_max_users' => false,
        'limits_max_sites' => false,
        'limits_max_fax_accounts' => false,
        'time_zone' => false,
        'email_send_smtp_hostname' => true,
        'email_send_smtp_port' => true,
        'email_send_smtp_username' => true,
        'email_send_smtp_password' => true,
        'active_calls_total_current' => false,
        'active_calls_against_license_count' => false,
        'active_calls_offnet_current' => false,
        'count_subcriber_resources_total' => false,
        'emergency_address_id' => true,
        'voicemail_enabled' => false,
        'recording_configuration' => false,
        'voicemail_transcription_enabled' => false,
        'language_token' => false,
        'is_domain_locked' => false,
        'is_stir_enabled' => false,
        'is_ivr_forward_change_blocked' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
        'reseller' => 'reseller',
        'description' => 'description',
        'music_on_hold_enabled' => 'music-on-hold-enabled',
        'music_on_ring_enabled' => 'music-on-ring-enabled',
        'music_on_hold_randomized_enabled' => 'music-on-hold-randomized-enabled',
        'domain_type' => 'domain-type',
        'dial_plan' => 'dial-plan',
        'dial_policy' => 'dial-policy',
        'email_send_from_address' => 'email-send-from-address',
        'single_sign_on_enabled' => 'single-sign-on-enabled',
        'area_code' => 'area-code',
        'caller_id_name' => 'caller-id-name',
        'caller_id_number' => 'caller-id-number',
        'caller_id_number_emergency' => 'caller-id-number-emergency',
        'limits_max_subcriber_resources_total' => 'limits-max-subcriber-resources-total',
        'limits_max_active_calls_total' => 'limits-max-active-calls-total',
        'limits_max_active_calls_offnet' => 'limits-max-active-calls-offnet',
        'limits_max_call_queues' => 'limits-max-call-queues',
        'limits_max_auto_attendants' => 'limits-max-auto-attendants',
        'limits_max_conferences' => 'limits-max-conferences',
        'limits_max_departments' => 'limits-max-departments',
        'limits_max_users' => 'limits-max-users',
        'limits_max_sites' => 'limits-max-sites',
        'limits_max_fax_accounts' => 'limits-max-fax-accounts',
        'time_zone' => 'time-zone',
        'email_send_smtp_hostname' => 'email-send-smtp-hostname',
        'email_send_smtp_port' => 'email-send-smtp-port',
        'email_send_smtp_username' => 'email-send-smtp-username',
        'email_send_smtp_password' => 'email-send-smtp-password',
        'active_calls_total_current' => 'active-calls-total-current',
        'active_calls_against_license_count' => 'active-calls-against-license-count',
        'active_calls_offnet_current' => 'active-calls-offnet-current',
        'count_subcriber_resources_total' => 'count-subcriber-resources-total',
        'emergency_address_id' => 'emergency-address-id',
        'voicemail_enabled' => 'voicemail-enabled',
        'recording_configuration' => 'recording-configuration',
        'voicemail_transcription_enabled' => 'voicemail-transcription-enabled',
        'language_token' => 'language-token',
        'is_domain_locked' => 'is-domain-locked',
        'is_stir_enabled' => 'is-stir-enabled',
        'is_ivr_forward_change_blocked' => 'is-ivr-forward-change-blocked'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'reseller' => 'setReseller',
        'description' => 'setDescription',
        'music_on_hold_enabled' => 'setMusicOnHoldEnabled',
        'music_on_ring_enabled' => 'setMusicOnRingEnabled',
        'music_on_hold_randomized_enabled' => 'setMusicOnHoldRandomizedEnabled',
        'domain_type' => 'setDomainType',
        'dial_plan' => 'setDialPlan',
        'dial_policy' => 'setDialPolicy',
        'email_send_from_address' => 'setEmailSendFromAddress',
        'single_sign_on_enabled' => 'setSingleSignOnEnabled',
        'area_code' => 'setAreaCode',
        'caller_id_name' => 'setCallerIdName',
        'caller_id_number' => 'setCallerIdNumber',
        'caller_id_number_emergency' => 'setCallerIdNumberEmergency',
        'limits_max_subcriber_resources_total' => 'setLimitsMaxSubcriberResourcesTotal',
        'limits_max_active_calls_total' => 'setLimitsMaxActiveCallsTotal',
        'limits_max_active_calls_offnet' => 'setLimitsMaxActiveCallsOffnet',
        'limits_max_call_queues' => 'setLimitsMaxCallQueues',
        'limits_max_auto_attendants' => 'setLimitsMaxAutoAttendants',
        'limits_max_conferences' => 'setLimitsMaxConferences',
        'limits_max_departments' => 'setLimitsMaxDepartments',
        'limits_max_users' => 'setLimitsMaxUsers',
        'limits_max_sites' => 'setLimitsMaxSites',
        'limits_max_fax_accounts' => 'setLimitsMaxFaxAccounts',
        'time_zone' => 'setTimeZone',
        'email_send_smtp_hostname' => 'setEmailSendSmtpHostname',
        'email_send_smtp_port' => 'setEmailSendSmtpPort',
        'email_send_smtp_username' => 'setEmailSendSmtpUsername',
        'email_send_smtp_password' => 'setEmailSendSmtpPassword',
        'active_calls_total_current' => 'setActiveCallsTotalCurrent',
        'active_calls_against_license_count' => 'setActiveCallsAgainstLicenseCount',
        'active_calls_offnet_current' => 'setActiveCallsOffnetCurrent',
        'count_subcriber_resources_total' => 'setCountSubcriberResourcesTotal',
        'emergency_address_id' => 'setEmergencyAddressId',
        'voicemail_enabled' => 'setVoicemailEnabled',
        'recording_configuration' => 'setRecordingConfiguration',
        'voicemail_transcription_enabled' => 'setVoicemailTranscriptionEnabled',
        'language_token' => 'setLanguageToken',
        'is_domain_locked' => 'setIsDomainLocked',
        'is_stir_enabled' => 'setIsStirEnabled',
        'is_ivr_forward_change_blocked' => 'setIsIvrForwardChangeBlocked'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'reseller' => 'getReseller',
        'description' => 'getDescription',
        'music_on_hold_enabled' => 'getMusicOnHoldEnabled',
        'music_on_ring_enabled' => 'getMusicOnRingEnabled',
        'music_on_hold_randomized_enabled' => 'getMusicOnHoldRandomizedEnabled',
        'domain_type' => 'getDomainType',
        'dial_plan' => 'getDialPlan',
        'dial_policy' => 'getDialPolicy',
        'email_send_from_address' => 'getEmailSendFromAddress',
        'single_sign_on_enabled' => 'getSingleSignOnEnabled',
        'area_code' => 'getAreaCode',
        'caller_id_name' => 'getCallerIdName',
        'caller_id_number' => 'getCallerIdNumber',
        'caller_id_number_emergency' => 'getCallerIdNumberEmergency',
        'limits_max_subcriber_resources_total' => 'getLimitsMaxSubcriberResourcesTotal',
        'limits_max_active_calls_total' => 'getLimitsMaxActiveCallsTotal',
        'limits_max_active_calls_offnet' => 'getLimitsMaxActiveCallsOffnet',
        'limits_max_call_queues' => 'getLimitsMaxCallQueues',
        'limits_max_auto_attendants' => 'getLimitsMaxAutoAttendants',
        'limits_max_conferences' => 'getLimitsMaxConferences',
        'limits_max_departments' => 'getLimitsMaxDepartments',
        'limits_max_users' => 'getLimitsMaxUsers',
        'limits_max_sites' => 'getLimitsMaxSites',
        'limits_max_fax_accounts' => 'getLimitsMaxFaxAccounts',
        'time_zone' => 'getTimeZone',
        'email_send_smtp_hostname' => 'getEmailSendSmtpHostname',
        'email_send_smtp_port' => 'getEmailSendSmtpPort',
        'email_send_smtp_username' => 'getEmailSendSmtpUsername',
        'email_send_smtp_password' => 'getEmailSendSmtpPassword',
        'active_calls_total_current' => 'getActiveCallsTotalCurrent',
        'active_calls_against_license_count' => 'getActiveCallsAgainstLicenseCount',
        'active_calls_offnet_current' => 'getActiveCallsOffnetCurrent',
        'count_subcriber_resources_total' => 'getCountSubcriberResourcesTotal',
        'emergency_address_id' => 'getEmergencyAddressId',
        'voicemail_enabled' => 'getVoicemailEnabled',
        'recording_configuration' => 'getRecordingConfiguration',
        'voicemail_transcription_enabled' => 'getVoicemailTranscriptionEnabled',
        'language_token' => 'getLanguageToken',
        'is_domain_locked' => 'getIsDomainLocked',
        'is_stir_enabled' => 'getIsStirEnabled',
        'is_ivr_forward_change_blocked' => 'getIsIvrForwardChangeBlocked'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DOMAIN_TYPE_STANDARD = 'Standard';
    public const DOMAIN_TYPE_RESIDENTIAL = 'Residential';
    public const DOMAIN_TYPE_HOSPITALITY = 'Hospitality';
    public const VOICEMAIL_TRANSCRIPTION_ENABLED_NO = 'no';
    public const VOICEMAIL_TRANSCRIPTION_ENABLED_DEEPGRAM = 'deepgram';
    public const VOICEMAIL_TRANSCRIPTION_ENABLED_GOOGLE = 'google';
    public const VOICEMAIL_TRANSCRIPTION_ENABLED_MUTARE = 'mutare';
    public const VOICEMAIL_TRANSCRIPTION_ENABLED_VOICEBASE = 'voicebase';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDomainTypeAllowableValues()
    {
        return [
            self::DOMAIN_TYPE_STANDARD,
            self::DOMAIN_TYPE_RESIDENTIAL,
            self::DOMAIN_TYPE_HOSPITALITY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoicemailTranscriptionEnabledAllowableValues()
    {
        return [
            self::VOICEMAIL_TRANSCRIPTION_ENABLED_NO,
            self::VOICEMAIL_TRANSCRIPTION_ENABLED_DEEPGRAM,
            self::VOICEMAIL_TRANSCRIPTION_ENABLED_GOOGLE,
            self::VOICEMAIL_TRANSCRIPTION_ENABLED_MUTARE,
            self::VOICEMAIL_TRANSCRIPTION_ENABLED_VOICEBASE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('reseller', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('music_on_hold_enabled', $data ?? [], null);
        $this->setIfExists('music_on_ring_enabled', $data ?? [], null);
        $this->setIfExists('music_on_hold_randomized_enabled', $data ?? [], null);
        $this->setIfExists('domain_type', $data ?? [], null);
        $this->setIfExists('dial_plan', $data ?? [], null);
        $this->setIfExists('dial_policy', $data ?? [], null);
        $this->setIfExists('email_send_from_address', $data ?? [], null);
        $this->setIfExists('single_sign_on_enabled', $data ?? [], null);
        $this->setIfExists('area_code', $data ?? [], null);
        $this->setIfExists('caller_id_name', $data ?? [], null);
        $this->setIfExists('caller_id_number', $data ?? [], null);
        $this->setIfExists('caller_id_number_emergency', $data ?? [], null);
        $this->setIfExists('limits_max_subcriber_resources_total', $data ?? [], null);
        $this->setIfExists('limits_max_active_calls_total', $data ?? [], null);
        $this->setIfExists('limits_max_active_calls_offnet', $data ?? [], null);
        $this->setIfExists('limits_max_call_queues', $data ?? [], null);
        $this->setIfExists('limits_max_auto_attendants', $data ?? [], null);
        $this->setIfExists('limits_max_conferences', $data ?? [], null);
        $this->setIfExists('limits_max_departments', $data ?? [], null);
        $this->setIfExists('limits_max_users', $data ?? [], null);
        $this->setIfExists('limits_max_sites', $data ?? [], null);
        $this->setIfExists('limits_max_fax_accounts', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('email_send_smtp_hostname', $data ?? [], null);
        $this->setIfExists('email_send_smtp_port', $data ?? [], null);
        $this->setIfExists('email_send_smtp_username', $data ?? [], null);
        $this->setIfExists('email_send_smtp_password', $data ?? [], null);
        $this->setIfExists('active_calls_total_current', $data ?? [], null);
        $this->setIfExists('active_calls_against_license_count', $data ?? [], null);
        $this->setIfExists('active_calls_offnet_current', $data ?? [], null);
        $this->setIfExists('count_subcriber_resources_total', $data ?? [], null);
        $this->setIfExists('emergency_address_id', $data ?? [], null);
        $this->setIfExists('voicemail_enabled', $data ?? [], null);
        $this->setIfExists('recording_configuration', $data ?? [], null);
        $this->setIfExists('voicemail_transcription_enabled', $data ?? [], 'no');
        $this->setIfExists('language_token', $data ?? [], 'en_US');
        $this->setIfExists('is_domain_locked', $data ?? [], null);
        $this->setIfExists('is_stir_enabled', $data ?? [], null);
        $this->setIfExists('is_ivr_forward_change_blocked', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ((mb_strlen($this->container['domain']) > 64)) {
            $invalidProperties[] = "invalid value for 'domain', the character length must be smaller than or equal to 64.";
        }

        if (!preg_match("/^[A-Za-z0-9._-]+|\\*/", $this->container['domain'])) {
            $invalidProperties[] = "invalid value for 'domain', must be conform to the pattern /^[A-Za-z0-9._-]+|\\*/.";
        }

        if ($this->container['reseller'] === null) {
            $invalidProperties[] = "'reseller' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        $allowedValues = $this->getDomainTypeAllowableValues();
        if (!is_null($this->container['domain_type']) && !in_array($this->container['domain_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'domain_type', must be one of '%s'",
                $this->container['domain_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['area_code']) && ($this->container['area_code'] > 999)) {
            $invalidProperties[] = "invalid value for 'area_code', must be smaller than or equal to 999.";
        }

        if (!is_null($this->container['area_code']) && ($this->container['area_code'] < 100)) {
            $invalidProperties[] = "invalid value for 'area_code', must be bigger than or equal to 100.";
        }

        $allowedValues = $this->getVoicemailTranscriptionEnabledAllowableValues();
        if (!is_null($this->container['voicemail_transcription_enabled']) && !in_array($this->container['voicemail_transcription_enabled'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'voicemail_transcription_enabled', must be one of '%s'",
                $this->container['voicemail_transcription_enabled'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain This is the main organization name. This is used to link resource to its group/tenant/organization/enterprise. ~ and * can be used alone in special cases to mean My Domain (~) and All Domains (\\*).
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        if ((mb_strlen($domain) > 64)) {
            throw new \InvalidArgumentException('invalid length for $domain when calling GetDomain200Response., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[A-Za-z0-9._-]+|\\*/", ObjectSerializer::toString($domain)))) {
            throw new \InvalidArgumentException("invalid value for \$domain when calling GetDomain200Response., must conform to the pattern /^[A-Za-z0-9._-]+|\\*/.");
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets reseller
     *
     * @return string
     */
    public function getReseller()
    {
        return $this->container['reseller'];
    }

    /**
     * Sets reseller
     *
     * @param string $reseller This is the reseller that owns this domain. Must be a valid resller name on creation. If Reseller level scope you can use \"~\" to set your own reseller on create, Super User's will need to set this to a valid Reseller.
     *
     * @return self
     */
    public function setReseller($reseller)
    {
        if (is_null($reseller)) {
            throw new \InvalidArgumentException('non-nullable reseller cannot be null');
        }
        $this->container['reseller'] = $reseller;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description This is a description of the domain. This will be shown in many places to help show a more user friendly version of the domain to help identify it.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets music_on_hold_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null
     */
    public function getMusicOnHoldEnabled()
    {
        return $this->container['music_on_hold_enabled'];
    }

    /**
     * Sets music_on_hold_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null $music_on_hold_enabled music_on_hold_enabled
     *
     * @return self
     */
    public function setMusicOnHoldEnabled($music_on_hold_enabled)
    {
        if (is_null($music_on_hold_enabled)) {
            throw new \InvalidArgumentException('non-nullable music_on_hold_enabled cannot be null');
        }
        $this->container['music_on_hold_enabled'] = $music_on_hold_enabled;

        return $this;
    }

    /**
     * Gets music_on_ring_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null
     */
    public function getMusicOnRingEnabled()
    {
        return $this->container['music_on_ring_enabled'];
    }

    /**
     * Sets music_on_ring_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null $music_on_ring_enabled music_on_ring_enabled
     *
     * @return self
     */
    public function setMusicOnRingEnabled($music_on_ring_enabled)
    {
        if (is_null($music_on_ring_enabled)) {
            throw new \InvalidArgumentException('non-nullable music_on_ring_enabled cannot be null');
        }
        $this->container['music_on_ring_enabled'] = $music_on_ring_enabled;

        return $this;
    }

    /**
     * Gets music_on_hold_randomized_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null
     */
    public function getMusicOnHoldRandomizedEnabled()
    {
        return $this->container['music_on_hold_randomized_enabled'];
    }

    /**
     * Sets music_on_hold_randomized_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null $music_on_hold_randomized_enabled music_on_hold_randomized_enabled
     *
     * @return self
     */
    public function setMusicOnHoldRandomizedEnabled($music_on_hold_randomized_enabled)
    {
        if (is_null($music_on_hold_randomized_enabled)) {
            throw new \InvalidArgumentException('non-nullable music_on_hold_randomized_enabled cannot be null');
        }
        $this->container['music_on_hold_randomized_enabled'] = $music_on_hold_randomized_enabled;

        return $this;
    }

    /**
     * Gets domain_type
     *
     * @return string|null
     */
    public function getDomainType()
    {
        return $this->container['domain_type'];
    }

    /**
     * Sets domain_type
     *
     * @param string|null $domain_type Allows a special domain type to be set for specific use cases. Currently Residenital and Hospitality are options which will limit and effect the users expierence.
     *
     * @return self
     */
    public function setDomainType($domain_type)
    {
        if (is_null($domain_type)) {
            throw new \InvalidArgumentException('non-nullable domain_type cannot be null');
        }
        $allowedValues = $this->getDomainTypeAllowableValues();
        if (!in_array($domain_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'domain_type', must be one of '%s'",
                    $domain_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['domain_type'] = $domain_type;

        return $this;
    }

    /**
     * Gets dial_plan
     *
     * @return string|null
     */
    public function getDialPlan()
    {
        return $this->container['dial_plan'];
    }

    /**
     * Sets dial_plan
     *
     * @param string|null $dial_plan This is the default dial plan that will be used for new users created in the domain. A dial plan is created by default on new domain creation with a name matching the domain.
     *
     * @return self
     */
    public function setDialPlan($dial_plan)
    {
        if (is_null($dial_plan)) {
            throw new \InvalidArgumentException('non-nullable dial_plan cannot be null');
        }
        $this->container['dial_plan'] = $dial_plan;

        return $this;
    }

    /**
     * Gets dial_policy
     *
     * @return string|null
     */
    public function getDialPolicy()
    {
        return $this->container['dial_policy'];
    }

    /**
     * Sets dial_policy
     *
     * @param string|null $dial_policy This is the default dial policy (permission) that will be used for new users added ot the domain. Generally these are system wide policies and will not need to create one per domain.
     *
     * @return self
     */
    public function setDialPolicy($dial_policy)
    {
        if (is_null($dial_policy)) {
            throw new \InvalidArgumentException('non-nullable dial_policy cannot be null');
        }
        $this->container['dial_policy'] = $dial_policy;

        return $this;
    }

    /**
     * Gets email_send_from_address
     *
     * @return string|null
     */
    public function getEmailSendFromAddress()
    {
        return $this->container['email_send_from_address'];
    }

    /**
     * Sets email_send_from_address
     *
     * @param string|null $email_send_from_address This is the email source that will be used when sending out emails for this domain. This address should be configured properly through the email server so that emails are not blocked. In most cases this is recommended to be an address on the service providers or resellers hostname so DNS SPF records can be added on the hostname to prevent spam issues.  More info on SPF records available via https://www.cloudflare.com/learning/dns/dns-records/dns-spf-record/
     *
     * @return self
     */
    public function setEmailSendFromAddress($email_send_from_address)
    {
        if (is_null($email_send_from_address)) {
            throw new \InvalidArgumentException('non-nullable email_send_from_address cannot be null');
        }
        $this->container['email_send_from_address'] = $email_send_from_address;

        return $this;
    }

    /**
     * Gets single_sign_on_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null
     */
    public function getSingleSignOnEnabled()
    {
        return $this->container['single_sign_on_enabled'];
    }

    /**
     * Sets single_sign_on_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null $single_sign_on_enabled single_sign_on_enabled
     *
     * @return self
     */
    public function setSingleSignOnEnabled($single_sign_on_enabled)
    {
        if (is_null($single_sign_on_enabled)) {
            throw new \InvalidArgumentException('non-nullable single_sign_on_enabled cannot be null');
        }
        $this->container['single_sign_on_enabled'] = $single_sign_on_enabled;

        return $this;
    }

    /**
     * Gets area_code
     *
     * @return float|null
     */
    public function getAreaCode()
    {
        return $this->container['area_code'];
    }

    /**
     * Sets area_code
     *
     * @param float|null $area_code The default area code for the domain. This is used by default on 7 digit dials to extent the number to a valid 10 digit number.
     *
     * @return self
     */
    public function setAreaCode($area_code)
    {
        if (is_null($area_code)) {
            throw new \InvalidArgumentException('non-nullable area_code cannot be null');
        }

        if (($area_code > 999)) {
            throw new \InvalidArgumentException('invalid value for $area_code when calling GetDomain200Response., must be smaller than or equal to 999.');
        }
        if (($area_code < 100)) {
            throw new \InvalidArgumentException('invalid value for $area_code when calling GetDomain200Response., must be bigger than or equal to 100.');
        }

        $this->container['area_code'] = $area_code;

        return $this;
    }

    /**
     * Gets caller_id_name
     *
     * @return string|null
     */
    public function getCallerIdName()
    {
        return $this->container['caller_id_name'];
    }

    /**
     * Sets caller_id_name
     *
     * @param string|null $caller_id_name This is the main caller id name for the user to be used for outbound calls outside of the domain.
     *
     * @return self
     */
    public function setCallerIdName($caller_id_name)
    {
        if (is_null($caller_id_name)) {
            throw new \InvalidArgumentException('non-nullable caller_id_name cannot be null');
        }
        $this->container['caller_id_name'] = $caller_id_name;

        return $this;
    }

    /**
     * Gets caller_id_number
     *
     * @return float|null
     */
    public function getCallerIdNumber()
    {
        return $this->container['caller_id_number'];
    }

    /**
     * Sets caller_id_number
     *
     * @param float|null $caller_id_number This is the main caller id number for the user to be used for outbound calls outside of the domain.
     *
     * @return self
     */
    public function setCallerIdNumber($caller_id_number)
    {
        if (is_null($caller_id_number)) {
            throw new \InvalidArgumentException('non-nullable caller_id_number cannot be null');
        }
        $this->container['caller_id_number'] = $caller_id_number;

        return $this;
    }

    /**
     * Gets caller_id_number_emergency
     *
     * @return float|null
     */
    public function getCallerIdNumberEmergency()
    {
        return $this->container['caller_id_number_emergency'];
    }

    /**
     * Sets caller_id_number_emergency
     *
     * @param float|null $caller_id_number_emergency This is the main caller id that will be used for emergency calls when placed by the user.
     *
     * @return self
     */
    public function setCallerIdNumberEmergency($caller_id_number_emergency)
    {
        if (is_null($caller_id_number_emergency)) {
            throw new \InvalidArgumentException('non-nullable caller_id_number_emergency cannot be null');
        }
        $this->container['caller_id_number_emergency'] = $caller_id_number_emergency;

        return $this;
    }

    /**
     * Gets limits_max_subcriber_resources_total
     *
     * @return int|null
     */
    public function getLimitsMaxSubcriberResourcesTotal()
    {
        return $this->container['limits_max_subcriber_resources_total'];
    }

    /**
     * Sets limits_max_subcriber_resources_total
     *
     * @param int|null $limits_max_subcriber_resources_total This is the maximum number of subscribers allowed for domain including the subscribers that would be created as part of resources like call queues and auto attendants. If looking to limit nornal users it would be better to use limits-max-users
     *
     * @return self
     */
    public function setLimitsMaxSubcriberResourcesTotal($limits_max_subcriber_resources_total)
    {
        if (is_null($limits_max_subcriber_resources_total)) {
            throw new \InvalidArgumentException('non-nullable limits_max_subcriber_resources_total cannot be null');
        }
        $this->container['limits_max_subcriber_resources_total'] = $limits_max_subcriber_resources_total;

        return $this;
    }

    /**
     * Gets limits_max_active_calls_total
     *
     * @return int|null
     */
    public function getLimitsMaxActiveCallsTotal()
    {
        return $this->container['limits_max_active_calls_total'];
    }

    /**
     * Sets limits_max_active_calls_total
     *
     * @param int|null $limits_max_active_calls_total This is the limit for the number of active calls allowed in the domain simultaniously. Note: this will count and limit intra domain calls.
     *
     * @return self
     */
    public function setLimitsMaxActiveCallsTotal($limits_max_active_calls_total)
    {
        if (is_null($limits_max_active_calls_total)) {
            throw new \InvalidArgumentException('non-nullable limits_max_active_calls_total cannot be null');
        }
        $this->container['limits_max_active_calls_total'] = $limits_max_active_calls_total;

        return $this;
    }

    /**
     * Gets limits_max_active_calls_offnet
     *
     * @return int|null
     */
    public function getLimitsMaxActiveCallsOffnet()
    {
        return $this->container['limits_max_active_calls_offnet'];
    }

    /**
     * Sets limits_max_active_calls_offnet
     *
     * @param int|null $limits_max_active_calls_offnet This is the limit for the number of active calls allowed in the domain simultaniously that are connected to offnet or external numbers.
     *
     * @return self
     */
    public function setLimitsMaxActiveCallsOffnet($limits_max_active_calls_offnet)
    {
        if (is_null($limits_max_active_calls_offnet)) {
            throw new \InvalidArgumentException('non-nullable limits_max_active_calls_offnet cannot be null');
        }
        $this->container['limits_max_active_calls_offnet'] = $limits_max_active_calls_offnet;

        return $this;
    }

    /**
     * Gets limits_max_call_queues
     *
     * @return int|null
     */
    public function getLimitsMaxCallQueues()
    {
        return $this->container['limits_max_call_queues'];
    }

    /**
     * Sets limits_max_call_queues
     *
     * @param int|null $limits_max_call_queues This is the maximum number of call queues that would be allowed to be created in this domain.
     *
     * @return self
     */
    public function setLimitsMaxCallQueues($limits_max_call_queues)
    {
        if (is_null($limits_max_call_queues)) {
            throw new \InvalidArgumentException('non-nullable limits_max_call_queues cannot be null');
        }
        $this->container['limits_max_call_queues'] = $limits_max_call_queues;

        return $this;
    }

    /**
     * Gets limits_max_auto_attendants
     *
     * @return int|null
     */
    public function getLimitsMaxAutoAttendants()
    {
        return $this->container['limits_max_auto_attendants'];
    }

    /**
     * Sets limits_max_auto_attendants
     *
     * @param int|null $limits_max_auto_attendants This is the maximum number of auto attendants that would be allowed to be created in this domain.
     *
     * @return self
     */
    public function setLimitsMaxAutoAttendants($limits_max_auto_attendants)
    {
        if (is_null($limits_max_auto_attendants)) {
            throw new \InvalidArgumentException('non-nullable limits_max_auto_attendants cannot be null');
        }
        $this->container['limits_max_auto_attendants'] = $limits_max_auto_attendants;

        return $this;
    }

    /**
     * Gets limits_max_conferences
     *
     * @return int|null
     */
    public function getLimitsMaxConferences()
    {
        return $this->container['limits_max_conferences'];
    }

    /**
     * Sets limits_max_conferences
     *
     * @param int|null $limits_max_conferences This is the maximum number of conference bridges that would be allowed to be created in this domain.
     *
     * @return self
     */
    public function setLimitsMaxConferences($limits_max_conferences)
    {
        if (is_null($limits_max_conferences)) {
            throw new \InvalidArgumentException('non-nullable limits_max_conferences cannot be null');
        }
        $this->container['limits_max_conferences'] = $limits_max_conferences;

        return $this;
    }

    /**
     * Gets limits_max_departments
     *
     * @return int|null
     */
    public function getLimitsMaxDepartments()
    {
        return $this->container['limits_max_departments'];
    }

    /**
     * Sets limits_max_departments
     *
     * @param int|null $limits_max_departments This is the maximum number of departments that would be allowed to be created in this domain.
     *
     * @return self
     */
    public function setLimitsMaxDepartments($limits_max_departments)
    {
        if (is_null($limits_max_departments)) {
            throw new \InvalidArgumentException('non-nullable limits_max_departments cannot be null');
        }
        $this->container['limits_max_departments'] = $limits_max_departments;

        return $this;
    }

    /**
     * Gets limits_max_users
     *
     * @return int|null
     */
    public function getLimitsMaxUsers()
    {
        return $this->container['limits_max_users'];
    }

    /**
     * Sets limits_max_users
     *
     * @param int|null $limits_max_users This is the maximum number of regular users that would be allowed to be created in this domain.
     *
     * @return self
     */
    public function setLimitsMaxUsers($limits_max_users)
    {
        if (is_null($limits_max_users)) {
            throw new \InvalidArgumentException('non-nullable limits_max_users cannot be null');
        }
        $this->container['limits_max_users'] = $limits_max_users;

        return $this;
    }

    /**
     * Gets limits_max_sites
     *
     * @return int|null
     */
    public function getLimitsMaxSites()
    {
        return $this->container['limits_max_sites'];
    }

    /**
     * Sets limits_max_sites
     *
     * @param int|null $limits_max_sites This is the maximum number of sites that would be allowed to be created in this domain.
     *
     * @return self
     */
    public function setLimitsMaxSites($limits_max_sites)
    {
        if (is_null($limits_max_sites)) {
            throw new \InvalidArgumentException('non-nullable limits_max_sites cannot be null');
        }
        $this->container['limits_max_sites'] = $limits_max_sites;

        return $this;
    }

    /**
     * Gets limits_max_fax_accounts
     *
     * @return int|null
     */
    public function getLimitsMaxFaxAccounts()
    {
        return $this->container['limits_max_fax_accounts'];
    }

    /**
     * Sets limits_max_fax_accounts
     *
     * @param int|null $limits_max_fax_accounts This is the maximum number of fax accounts that would be allowed to be created in this domain.
     *
     * @return self
     */
    public function setLimitsMaxFaxAccounts($limits_max_fax_accounts)
    {
        if (is_null($limits_max_fax_accounts)) {
            throw new \InvalidArgumentException('non-nullable limits_max_fax_accounts cannot be null');
        }
        $this->container['limits_max_fax_accounts'] = $limits_max_fax_accounts;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\TimeZone|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\TimeZone|null $time_zone The timezone which the meeting was created with
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            throw new \InvalidArgumentException('non-nullable time_zone cannot be null');
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets email_send_smtp_hostname
     *
     * @return string|null
     */
    public function getEmailSendSmtpHostname()
    {
        return $this->container['email_send_smtp_hostname'];
    }

    /**
     * Sets email_send_smtp_hostname
     *
     * @param string|null $email_send_smtp_hostname This is the SMTP server hostname. SMTP server configs are NOT required at domain level as they will inherit reseller or system level as needed.
     *
     * @return self
     */
    public function setEmailSendSmtpHostname($email_send_smtp_hostname)
    {
        if (is_null($email_send_smtp_hostname)) {
            array_push($this->openAPINullablesSetToNull, 'email_send_smtp_hostname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_send_smtp_hostname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_send_smtp_hostname'] = $email_send_smtp_hostname;

        return $this;
    }

    /**
     * Gets email_send_smtp_port
     *
     * @return string|null
     */
    public function getEmailSendSmtpPort()
    {
        return $this->container['email_send_smtp_port'];
    }

    /**
     * Sets email_send_smtp_port
     *
     * @param string|null $email_send_smtp_port This is the SMTP port for sending emails. SMTP server configs are NOT required at domain level as they will inherit reseller or system level as needed.
     *
     * @return self
     */
    public function setEmailSendSmtpPort($email_send_smtp_port)
    {
        if (is_null($email_send_smtp_port)) {
            array_push($this->openAPINullablesSetToNull, 'email_send_smtp_port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_send_smtp_port', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_send_smtp_port'] = $email_send_smtp_port;

        return $this;
    }

    /**
     * Gets email_send_smtp_username
     *
     * @return string|null
     */
    public function getEmailSendSmtpUsername()
    {
        return $this->container['email_send_smtp_username'];
    }

    /**
     * Sets email_send_smtp_username
     *
     * @param string|null $email_send_smtp_username This is the username used in connecting to SMTP  server for sending email. SMTP server configs are NOT required at domain level as they will inherit reseller or system level as needed.
     *
     * @return self
     */
    public function setEmailSendSmtpUsername($email_send_smtp_username)
    {
        if (is_null($email_send_smtp_username)) {
            array_push($this->openAPINullablesSetToNull, 'email_send_smtp_username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_send_smtp_username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_send_smtp_username'] = $email_send_smtp_username;

        return $this;
    }

    /**
     * Gets email_send_smtp_password
     *
     * @return string|null
     */
    public function getEmailSendSmtpPassword()
    {
        return $this->container['email_send_smtp_password'];
    }

    /**
     * Sets email_send_smtp_password
     *
     * @param string|null $email_send_smtp_password This is the password used in connecting to SMTP  server for sending email. SMTP server configs are NOT required at domain level as they will inherit reseller or system level as needed.
     *
     * @return self
     */
    public function setEmailSendSmtpPassword($email_send_smtp_password)
    {
        if (is_null($email_send_smtp_password)) {
            array_push($this->openAPINullablesSetToNull, 'email_send_smtp_password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_send_smtp_password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_send_smtp_password'] = $email_send_smtp_password;

        return $this;
    }

    /**
     * Gets active_calls_total_current
     *
     * @return int|null
     */
    public function getActiveCallsTotalCurrent()
    {
        return $this->container['active_calls_total_current'];
    }

    /**
     * Sets active_calls_total_current
     *
     * @param int|null $active_calls_total_current This is the total active calls for the domain including on-net (intra domain) calls and calls across geo servers and calls linked to \"guest\" video sessions
     *
     * @return self
     */
    public function setActiveCallsTotalCurrent($active_calls_total_current)
    {
        if (is_null($active_calls_total_current)) {
            throw new \InvalidArgumentException('non-nullable active_calls_total_current cannot be null');
        }
        $this->container['active_calls_total_current'] = $active_calls_total_current;

        return $this;
    }

    /**
     * Gets active_calls_against_license_count
     *
     * @return int|null
     */
    public function getActiveCallsAgainstLicenseCount()
    {
        return $this->container['active_calls_against_license_count'];
    }

    /**
     * Sets active_calls_against_license_count
     *
     * @param int|null $active_calls_against_license_count This is the total active calls for the domain including on-net (intra domain) calls but counted as the license would be enforced inlcuding ignoring geo call legs and guest video sessions.
     *
     * @return self
     */
    public function setActiveCallsAgainstLicenseCount($active_calls_against_license_count)
    {
        if (is_null($active_calls_against_license_count)) {
            throw new \InvalidArgumentException('non-nullable active_calls_against_license_count cannot be null');
        }
        $this->container['active_calls_against_license_count'] = $active_calls_against_license_count;

        return $this;
    }

    /**
     * Gets active_calls_offnet_current
     *
     * @return int|null
     */
    public function getActiveCallsOffnetCurrent()
    {
        return $this->container['active_calls_offnet_current'];
    }

    /**
     * Sets active_calls_offnet_current
     *
     * @param int|null $active_calls_offnet_current This is the total active calls for the domain only including calls that are connected to a remote (non intra domain) caller/calling party.
     *
     * @return self
     */
    public function setActiveCallsOffnetCurrent($active_calls_offnet_current)
    {
        if (is_null($active_calls_offnet_current)) {
            throw new \InvalidArgumentException('non-nullable active_calls_offnet_current cannot be null');
        }
        $this->container['active_calls_offnet_current'] = $active_calls_offnet_current;

        return $this;
    }

    /**
     * Gets count_subcriber_resources_total
     *
     * @return int|null
     */
    public function getCountSubcriberResourcesTotal()
    {
        return $this->container['count_subcriber_resources_total'];
    }

    /**
     * Sets count_subcriber_resources_total
     *
     * @param int|null $count_subcriber_resources_total This is the total number of users plus all the system users as well for the entire domain.
     *
     * @return self
     */
    public function setCountSubcriberResourcesTotal($count_subcriber_resources_total)
    {
        if (is_null($count_subcriber_resources_total)) {
            throw new \InvalidArgumentException('non-nullable count_subcriber_resources_total cannot be null');
        }
        $this->container['count_subcriber_resources_total'] = $count_subcriber_resources_total;

        return $this;
    }

    /**
     * Gets emergency_address_id
     *
     * @return string|null
     */
    public function getEmergencyAddressId()
    {
        return $this->container['emergency_address_id'];
    }

    /**
     * Sets emergency_address_id
     *
     * @param string|null $emergency_address_id Value will need to be an exact match to an address-id which links to a address for DLR (dynamic location routing) for emergency calling
     *
     * @return self
     */
    public function setEmergencyAddressId($emergency_address_id)
    {
        if (is_null($emergency_address_id)) {
            array_push($this->openAPINullablesSetToNull, 'emergency_address_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emergency_address_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emergency_address_id'] = $emergency_address_id;

        return $this;
    }

    /**
     * Gets voicemail_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null
     */
    public function getVoicemailEnabled()
    {
        return $this->container['voicemail_enabled'];
    }

    /**
     * Sets voicemail_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null $voicemail_enabled voicemail_enabled
     *
     * @return self
     */
    public function setVoicemailEnabled($voicemail_enabled)
    {
        if (is_null($voicemail_enabled)) {
            throw new \InvalidArgumentException('non-nullable voicemail_enabled cannot be null');
        }
        $this->container['voicemail_enabled'] = $voicemail_enabled;

        return $this;
    }

    /**
     * Gets recording_configuration
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\RecordingConfiguration|null
     */
    public function getRecordingConfiguration()
    {
        return $this->container['recording_configuration'];
    }

    /**
     * Sets recording_configuration
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\RecordingConfiguration|null $recording_configuration recording_configuration
     *
     * @return self
     */
    public function setRecordingConfiguration($recording_configuration)
    {
        if (is_null($recording_configuration)) {
            throw new \InvalidArgumentException('non-nullable recording_configuration cannot be null');
        }
        $this->container['recording_configuration'] = $recording_configuration;

        return $this;
    }

    /**
     * Gets voicemail_transcription_enabled
     *
     * @return string|null
     */
    public function getVoicemailTranscriptionEnabled()
    {
        return $this->container['voicemail_transcription_enabled'];
    }

    /**
     * Sets voicemail_transcription_enabled
     *
     * @param string|null $voicemail_transcription_enabled Enable this setting and select a vendor if you wish to have voicemails transcripted after a voicemail is recorded.
     *
     * @return self
     */
    public function setVoicemailTranscriptionEnabled($voicemail_transcription_enabled)
    {
        if (is_null($voicemail_transcription_enabled)) {
            throw new \InvalidArgumentException('non-nullable voicemail_transcription_enabled cannot be null');
        }
        $allowedValues = $this->getVoicemailTranscriptionEnabledAllowableValues();
        if (!in_array($voicemail_transcription_enabled, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'voicemail_transcription_enabled', must be one of '%s'",
                    $voicemail_transcription_enabled,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voicemail_transcription_enabled'] = $voicemail_transcription_enabled;

        return $this;
    }

    /**
     * Gets language_token
     *
     * @return string|null
     */
    public function getLanguageToken()
    {
        return $this->container['language_token'];
    }

    /**
     * Sets language_token
     *
     * @param string|null $language_token This is the language that is set for the user to be used for portal viewing.
     *
     * @return self
     */
    public function setLanguageToken($language_token)
    {
        if (is_null($language_token)) {
            throw new \InvalidArgumentException('non-nullable language_token cannot be null');
        }
        $this->container['language_token'] = $language_token;

        return $this;
    }

    /**
     * Gets is_domain_locked
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null
     */
    public function getIsDomainLocked()
    {
        return $this->container['is_domain_locked'];
    }

    /**
     * Sets is_domain_locked
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null $is_domain_locked is_domain_locked
     *
     * @return self
     */
    public function setIsDomainLocked($is_domain_locked)
    {
        if (is_null($is_domain_locked)) {
            throw new \InvalidArgumentException('non-nullable is_domain_locked cannot be null');
        }
        $this->container['is_domain_locked'] = $is_domain_locked;

        return $this;
    }

    /**
     * Gets is_stir_enabled
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null
     */
    public function getIsStirEnabled()
    {
        return $this->container['is_stir_enabled'];
    }

    /**
     * Sets is_stir_enabled
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null $is_stir_enabled is_stir_enabled
     *
     * @return self
     */
    public function setIsStirEnabled($is_stir_enabled)
    {
        if (is_null($is_stir_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_stir_enabled cannot be null');
        }
        $this->container['is_stir_enabled'] = $is_stir_enabled;

        return $this;
    }

    /**
     * Gets is_ivr_forward_change_blocked
     *
     * @return \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null
     */
    public function getIsIvrForwardChangeBlocked()
    {
        return $this->container['is_ivr_forward_change_blocked'];
    }

    /**
     * Sets is_ivr_forward_change_blocked
     *
     * @param \SpectrumVoip\\\\NetSapiens\Model\YesNoString|null $is_ivr_forward_change_blocked is_ivr_forward_change_blocked
     *
     * @return self
     */
    public function setIsIvrForwardChangeBlocked($is_ivr_forward_change_blocked)
    {
        if (is_null($is_ivr_forward_change_blocked)) {
            throw new \InvalidArgumentException('non-nullable is_ivr_forward_change_blocked cannot be null');
        }
        $this->container['is_ivr_forward_change_blocked'] = $is_ivr_forward_change_blocked;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


