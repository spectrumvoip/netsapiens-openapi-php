<?php
/**
 * VoicemailRemindersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpectrumVoip\\\\NetSapiens\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SpectrumVoip\\\\NetSapiens\ApiException;
use SpectrumVoip\\\\NetSapiens\Configuration;
use SpectrumVoip\\\\NetSapiens\HeaderSelector;
use SpectrumVoip\\\\NetSapiens\ObjectSerializer;

/**
 * VoicemailRemindersApi Class Doc Comment
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VoicemailRemindersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'domainsDomainUsersUserVmailnagDelete' => [
            'application/json',
        ],
        'domainsDomainUsersUserVmailnagGet' => [
            'application/json',
        ],
        'domainsDomainUsersUserVmailnagPost' => [
            'application/json',
        ],
        'domainsDomainUsersUserVmailnagPut' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation domainsDomainUsersUserVmailnagDelete
     *
     * Delete Voicemail Reminders for Specific User
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagDelete'] to see the possible values for this operation
     *
     * @throws \SpectrumVoip\\\\NetSapiens\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesReorderPut202Response|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse
     */
    public function domainsDomainUsersUserVmailnagDelete($domain, $user, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagDelete'][0])
    {
        list($response) = $this->domainsDomainUsersUserVmailnagDeleteWithHttpInfo($domain, $user, $contentType);
        return $response;
    }

    /**
     * Operation domainsDomainUsersUserVmailnagDeleteWithHttpInfo
     *
     * Delete Voicemail Reminders for Specific User
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagDelete'] to see the possible values for this operation
     *
     * @throws \SpectrumVoip\\\\NetSapiens\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesReorderPut202Response|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function domainsDomainUsersUserVmailnagDeleteWithHttpInfo($domain, $user, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagDelete'][0])
    {
        $request = $this->domainsDomainUsersUserVmailnagDeleteRequest($domain, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesReorderPut202Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesReorderPut202Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesReorderPut202Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesReorderPut202Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesReorderPut202Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation domainsDomainUsersUserVmailnagDeleteAsync
     *
     * Delete Voicemail Reminders for Specific User
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainsDomainUsersUserVmailnagDeleteAsync($domain, $user, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagDelete'][0])
    {
        return $this->domainsDomainUsersUserVmailnagDeleteAsyncWithHttpInfo($domain, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation domainsDomainUsersUserVmailnagDeleteAsyncWithHttpInfo
     *
     * Delete Voicemail Reminders for Specific User
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainsDomainUsersUserVmailnagDeleteAsyncWithHttpInfo($domain, $user, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagDelete'][0])
    {
        $returnType = '\SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserAnswerrulesReorderPut202Response';
        $request = $this->domainsDomainUsersUserVmailnagDeleteRequest($domain, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'domainsDomainUsersUserVmailnagDelete'
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function domainsDomainUsersUserVmailnagDeleteRequest($domain, $user, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagDelete'][0])
    {

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling domainsDomainUsersUserVmailnagDelete'
            );
        }
        if (strlen($domain) > 64) {
            throw new \InvalidArgumentException('invalid length for "$domain" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagDelete, must be smaller than or equal to 64.');
        }
        if (!preg_match("/^[A-Za-z0-9._-]*|~|\\*+/", $domain)) {
            throw new \InvalidArgumentException("invalid value for \"domain\" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagDelete, must conform to the pattern /^[A-Za-z0-9._-]*|~|\\*+/.");
        }
        
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling domainsDomainUsersUserVmailnagDelete'
            );
        }
        if (strlen($user) > 16) {
            throw new \InvalidArgumentException('invalid length for "$user" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagDelete, must be smaller than or equal to 16.');
        }
        if (strlen($user) < 0) {
            throw new \InvalidArgumentException('invalid length for "$user" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagDelete, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/domains/{domain}/users/{user}/vmailnag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }
        // path params
        if ($user !== null) {
            $resourcePath = str_replace(
                '{' . 'user' . '}',
                ObjectSerializer::toPathValue($user),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation domainsDomainUsersUserVmailnagGet
     *
     * Get Voicemail Reminders for Specific User
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagGet'] to see the possible values for this operation
     *
     * @throws \SpectrumVoip\\\\NetSapiens\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SpectrumVoip\\\\NetSapiens\Model\Vmailnag|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse
     */
    public function domainsDomainUsersUserVmailnagGet($domain, $user, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagGet'][0])
    {
        list($response) = $this->domainsDomainUsersUserVmailnagGetWithHttpInfo($domain, $user, $contentType);
        return $response;
    }

    /**
     * Operation domainsDomainUsersUserVmailnagGetWithHttpInfo
     *
     * Get Voicemail Reminders for Specific User
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagGet'] to see the possible values for this operation
     *
     * @throws \SpectrumVoip\\\\NetSapiens\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SpectrumVoip\\\\NetSapiens\Model\Vmailnag|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function domainsDomainUsersUserVmailnagGetWithHttpInfo($domain, $user, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagGet'][0])
    {
        $request = $this->domainsDomainUsersUserVmailnagGetRequest($domain, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\Vmailnag' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\Vmailnag' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\Vmailnag', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SpectrumVoip\\\\NetSapiens\Model\Vmailnag';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\Vmailnag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation domainsDomainUsersUserVmailnagGetAsync
     *
     * Get Voicemail Reminders for Specific User
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainsDomainUsersUserVmailnagGetAsync($domain, $user, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagGet'][0])
    {
        return $this->domainsDomainUsersUserVmailnagGetAsyncWithHttpInfo($domain, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation domainsDomainUsersUserVmailnagGetAsyncWithHttpInfo
     *
     * Get Voicemail Reminders for Specific User
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainsDomainUsersUserVmailnagGetAsyncWithHttpInfo($domain, $user, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagGet'][0])
    {
        $returnType = '\SpectrumVoip\\\\NetSapiens\Model\Vmailnag';
        $request = $this->domainsDomainUsersUserVmailnagGetRequest($domain, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'domainsDomainUsersUserVmailnagGet'
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function domainsDomainUsersUserVmailnagGetRequest($domain, $user, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagGet'][0])
    {

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling domainsDomainUsersUserVmailnagGet'
            );
        }
        if (strlen($domain) > 64) {
            throw new \InvalidArgumentException('invalid length for "$domain" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagGet, must be smaller than or equal to 64.');
        }
        if (!preg_match("/^[A-Za-z0-9._-]*|~|\\*+/", $domain)) {
            throw new \InvalidArgumentException("invalid value for \"domain\" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagGet, must conform to the pattern /^[A-Za-z0-9._-]*|~|\\*+/.");
        }
        
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling domainsDomainUsersUserVmailnagGet'
            );
        }
        if (strlen($user) > 16) {
            throw new \InvalidArgumentException('invalid length for "$user" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagGet, must be smaller than or equal to 16.');
        }
        if (strlen($user) < 0) {
            throw new \InvalidArgumentException('invalid length for "$user" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagGet, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/domains/{domain}/users/{user}/vmailnag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }
        // path params
        if ($user !== null) {
            $resourcePath = str_replace(
                '{' . 'user' . '}',
                ObjectSerializer::toPathValue($user),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation domainsDomainUsersUserVmailnagPost
     *
     * Create Voicemail Reminder
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserVmailnagPostRequest $domains_domain_users_user_vmailnag_post_request domains_domain_users_user_vmailnag_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagPost'] to see the possible values for this operation
     *
     * @throws \SpectrumVoip\\\\NetSapiens\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse
     */
    public function domainsDomainUsersUserVmailnagPost($domain, $user, $domains_domain_users_user_vmailnag_post_request = null, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagPost'][0])
    {
        list($response) = $this->domainsDomainUsersUserVmailnagPostWithHttpInfo($domain, $user, $domains_domain_users_user_vmailnag_post_request, $contentType);
        return $response;
    }

    /**
     * Operation domainsDomainUsersUserVmailnagPostWithHttpInfo
     *
     * Create Voicemail Reminder
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserVmailnagPostRequest $domains_domain_users_user_vmailnag_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagPost'] to see the possible values for this operation
     *
     * @throws \SpectrumVoip\\\\NetSapiens\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function domainsDomainUsersUserVmailnagPostWithHttpInfo($domain, $user, $domains_domain_users_user_vmailnag_post_request = null, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagPost'][0])
    {
        $request = $this->domainsDomainUsersUserVmailnagPostRequest($domain, $user, $domains_domain_users_user_vmailnag_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation domainsDomainUsersUserVmailnagPostAsync
     *
     * Create Voicemail Reminder
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserVmailnagPostRequest $domains_domain_users_user_vmailnag_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainsDomainUsersUserVmailnagPostAsync($domain, $user, $domains_domain_users_user_vmailnag_post_request = null, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagPost'][0])
    {
        return $this->domainsDomainUsersUserVmailnagPostAsyncWithHttpInfo($domain, $user, $domains_domain_users_user_vmailnag_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation domainsDomainUsersUserVmailnagPostAsyncWithHttpInfo
     *
     * Create Voicemail Reminder
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserVmailnagPostRequest $domains_domain_users_user_vmailnag_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainsDomainUsersUserVmailnagPostAsyncWithHttpInfo($domain, $user, $domains_domain_users_user_vmailnag_post_request = null, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagPost'][0])
    {
        $returnType = 'object';
        $request = $this->domainsDomainUsersUserVmailnagPostRequest($domain, $user, $domains_domain_users_user_vmailnag_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'domainsDomainUsersUserVmailnagPost'
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserVmailnagPostRequest $domains_domain_users_user_vmailnag_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function domainsDomainUsersUserVmailnagPostRequest($domain, $user, $domains_domain_users_user_vmailnag_post_request = null, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagPost'][0])
    {

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling domainsDomainUsersUserVmailnagPost'
            );
        }
        if (strlen($domain) > 64) {
            throw new \InvalidArgumentException('invalid length for "$domain" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagPost, must be smaller than or equal to 64.');
        }
        if (!preg_match("/^[A-Za-z0-9._-]*|~|\\*+/", $domain)) {
            throw new \InvalidArgumentException("invalid value for \"domain\" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagPost, must conform to the pattern /^[A-Za-z0-9._-]*|~|\\*+/.");
        }
        
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling domainsDomainUsersUserVmailnagPost'
            );
        }
        if (strlen($user) > 16) {
            throw new \InvalidArgumentException('invalid length for "$user" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagPost, must be smaller than or equal to 16.');
        }
        if (strlen($user) < 0) {
            throw new \InvalidArgumentException('invalid length for "$user" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagPost, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/domains/{domain}/users/{user}/vmailnag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }
        // path params
        if ($user !== null) {
            $resourcePath = str_replace(
                '{' . 'user' . '}',
                ObjectSerializer::toPathValue($user),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($domains_domain_users_user_vmailnag_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($domains_domain_users_user_vmailnag_post_request));
            } else {
                $httpBody = $domains_domain_users_user_vmailnag_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation domainsDomainUsersUserVmailnagPut
     *
     * Update Voicemail Reminders for Specific User
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserVmailnagPutRequest $domains_domain_users_user_vmailnag_put_request domains_domain_users_user_vmailnag_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagPut'] to see the possible values for this operation
     *
     * @throws \SpectrumVoip\\\\NetSapiens\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse
     */
    public function domainsDomainUsersUserVmailnagPut($domain, $user, $domains_domain_users_user_vmailnag_put_request = null, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagPut'][0])
    {
        list($response) = $this->domainsDomainUsersUserVmailnagPutWithHttpInfo($domain, $user, $domains_domain_users_user_vmailnag_put_request, $contentType);
        return $response;
    }

    /**
     * Operation domainsDomainUsersUserVmailnagPutWithHttpInfo
     *
     * Update Voicemail Reminders for Specific User
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserVmailnagPutRequest $domains_domain_users_user_vmailnag_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagPut'] to see the possible values for this operation
     *
     * @throws \SpectrumVoip\\\\NetSapiens\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse|\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function domainsDomainUsersUserVmailnagPutWithHttpInfo($domain, $user, $domains_domain_users_user_vmailnag_put_request = null, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagPut'][0])
    {
        $request = $this->domainsDomainUsersUserVmailnagPutRequest($domain, $user, $domains_domain_users_user_vmailnag_put_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SpectrumVoip\\\\NetSapiens\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation domainsDomainUsersUserVmailnagPutAsync
     *
     * Update Voicemail Reminders for Specific User
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserVmailnagPutRequest $domains_domain_users_user_vmailnag_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainsDomainUsersUserVmailnagPutAsync($domain, $user, $domains_domain_users_user_vmailnag_put_request = null, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagPut'][0])
    {
        return $this->domainsDomainUsersUserVmailnagPutAsyncWithHttpInfo($domain, $user, $domains_domain_users_user_vmailnag_put_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation domainsDomainUsersUserVmailnagPutAsyncWithHttpInfo
     *
     * Update Voicemail Reminders for Specific User
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserVmailnagPutRequest $domains_domain_users_user_vmailnag_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domainsDomainUsersUserVmailnagPutAsyncWithHttpInfo($domain, $user, $domains_domain_users_user_vmailnag_put_request = null, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagPut'][0])
    {
        $returnType = 'object';
        $request = $this->domainsDomainUsersUserVmailnagPutRequest($domain, $user, $domains_domain_users_user_vmailnag_put_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'domainsDomainUsersUserVmailnagPut'
     *
     * @param  string $domain  (required)
     * @param  string $user  (required)
     * @param  \SpectrumVoip\\\\NetSapiens\Model\DomainsDomainUsersUserVmailnagPutRequest $domains_domain_users_user_vmailnag_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['domainsDomainUsersUserVmailnagPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function domainsDomainUsersUserVmailnagPutRequest($domain, $user, $domains_domain_users_user_vmailnag_put_request = null, string $contentType = self::contentTypes['domainsDomainUsersUserVmailnagPut'][0])
    {

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling domainsDomainUsersUserVmailnagPut'
            );
        }
        if (strlen($domain) > 64) {
            throw new \InvalidArgumentException('invalid length for "$domain" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagPut, must be smaller than or equal to 64.');
        }
        if (!preg_match("/^[A-Za-z0-9._-]*|~|\\*+/", $domain)) {
            throw new \InvalidArgumentException("invalid value for \"domain\" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagPut, must conform to the pattern /^[A-Za-z0-9._-]*|~|\\*+/.");
        }
        
        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling domainsDomainUsersUserVmailnagPut'
            );
        }
        if (strlen($user) > 16) {
            throw new \InvalidArgumentException('invalid length for "$user" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagPut, must be smaller than or equal to 16.');
        }
        if (strlen($user) < 0) {
            throw new \InvalidArgumentException('invalid length for "$user" when calling VoicemailRemindersApi.domainsDomainUsersUserVmailnagPut, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/domains/{domain}/users/{user}/vmailnag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }
        // path params
        if ($user !== null) {
            $resourcePath = str_replace(
                '{' . 'user' . '}',
                ObjectSerializer::toPathValue($user),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($domains_domain_users_user_vmailnag_put_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($domains_domain_users_user_vmailnag_put_request));
            } else {
                $httpBody = $domains_domain_users_user_vmailnag_put_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
