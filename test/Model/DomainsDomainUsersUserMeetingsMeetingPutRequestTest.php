<?php
/**
 * DomainsDomainUsersUserMeetingsMeetingPutRequestTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpectrumVoip\\\\NetSapiens
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NetSapiens API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace SpectrumVoip\\\\NetSapiens\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * DomainsDomainUsersUserMeetingsMeetingPutRequestTest Class Doc Comment
 *
 * @category    Class
 * @description DomainsDomainUsersUserMeetingsMeetingPutRequest
 * @package     SpectrumVoip\\\\NetSapiens
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class DomainsDomainUsersUserMeetingsMeetingPutRequestTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "DomainsDomainUsersUserMeetingsMeetingPutRequest"
     */
    public function testDomainsDomainUsersUserMeetingsMeetingPutRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "domain"
     */
    public function testPropertyDomain()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "user"
     */
    public function testPropertyUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "description"
     */
    public function testPropertyDescription()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_name"
     */
    public function testPropertyMeetingName()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_type"
     */
    public function testPropertyMeetingType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "limits_max_participants"
     */
    public function testPropertyLimitsMaxParticipants()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_status"
     */
    public function testPropertyMeetingStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_schedule_start_datetime"
     */
    public function testPropertyMeetingScheduleStartDatetime()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "timezone"
     */
    public function testPropertyTimezone()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_schedule_duration_minutes"
     */
    public function testPropertyMeetingScheduleDurationMinutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_schedule_recurrence_rule"
     */
    public function testPropertyMeetingScheduleRecurrenceRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_video_allowed_from"
     */
    public function testPropertyMeetingVideoAllowedFrom()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_audio_allowed_from"
     */
    public function testPropertyMeetingAudioAllowedFrom()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_chat_enabled"
     */
    public function testPropertyMeetingChatEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_chat_history_enabled"
     */
    public function testPropertyMeetingChatHistoryEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_question_answer_enabled"
     */
    public function testPropertyMeetingQuestionAnswerEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_recording_enabled"
     */
    public function testPropertyMeetingRecordingEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_join_require_invite_enabled"
     */
    public function testPropertyMeetingJoinRequireInviteEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_join_require_passcode_enabled"
     */
    public function testPropertyMeetingJoinRequirePasscodeEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_require_host_to_begin_enabled"
     */
    public function testPropertyMeetingRequireHostToBeginEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_allow_changes_from_hosts_enabled"
     */
    public function testPropertyMeetingAllowChangesFromHostsEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_hide_attendee_list_enabled"
     */
    public function testPropertyMeetingHideAttendeeListEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_lock_enabled"
     */
    public function testPropertyMeetingLockEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_lock_allowed"
     */
    public function testPropertyMeetingLockAllowed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_room_enabled"
     */
    public function testPropertyMeetingRoomEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_passcode"
     */
    public function testPropertyMeetingPasscode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_previous_presenter_attendee_id"
     */
    public function testPropertyMeetingPreviousPresenterAttendeeId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_presenter_attendee_id"
     */
    public function testPropertyMeetingPresenterAttendeeId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "meeting_video_layout_"
     */
    public function testPropertyMeetingVideoLayout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
